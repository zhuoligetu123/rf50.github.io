WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.865
Before we dive into designing a Kalman filter,

00:00:02.865 --> 00:00:06.794
let's make sure that we're on the same page when it comes to naming conventions.

00:00:06.794 --> 00:00:11.580
Since a robot is unable to sense the world around it with complete certainty,

00:00:11.580 --> 00:00:13.425
it holds an internal belief,

00:00:13.425 --> 00:00:18.163
which is its best guess at the state of the environment, including itself.

00:00:18.163 --> 00:00:19.515
As you may recall,

00:00:19.515 --> 00:00:23.891
a robot constraint to a plane can be described three state variables,

00:00:23.891 --> 00:00:26.759
two coordinates x and y to identify

00:00:26.760 --> 00:00:31.380
its position and one angle yaw to identify its orientation.

00:00:31.379 --> 00:00:37.144
These are its state variables and we will denote a state with the bold letter x.

00:00:37.145 --> 00:00:42.260
States may change over time so sometimes we will use a subscript to represent state

00:00:42.259 --> 00:00:48.113
x at time t. If you recall the two steps involved in the Kalman filter algorithm,

00:00:48.113 --> 00:00:51.394
they are a measurement update and a state prediction.

00:00:51.395 --> 00:00:53.182
Let's look at the first one.

00:00:53.182 --> 00:00:55.880
You know that a robot can perceive its environment using

00:00:55.880 --> 00:00:58.993
sensors which produces a measurement.

00:00:58.993 --> 00:01:02.030
This is denoted with the letter z and z of t

00:01:02.030 --> 00:01:05.689
represents the measurement obtained at time t. Next,

00:01:05.689 --> 00:01:10.191
our control actions such as movement can change the state of our environment.

00:01:10.191 --> 00:01:14.579
Control options are denoted by u and u of t represents the change of

00:01:14.579 --> 00:01:19.515
state that occurred between time t minus one and t. Perfect.

00:01:19.515 --> 00:01:21.775
Now that we've agreed on the naming conventions,

00:01:21.775 --> 00:01:24.128
let's go back to the Kalman filter cycle.

00:01:24.128 --> 00:01:26.519
We need to start the cycle somewhere and this is

00:01:26.519 --> 00:01:29.609
usually with an initial estimate of the state.

00:01:29.609 --> 00:01:30.974
As you will soon see,

00:01:30.974 --> 00:01:33.564
the estimate does not have to be accurate.

00:01:33.564 --> 00:01:36.299
It can be an awful guess and the Kalman filter will

00:01:36.299 --> 00:01:39.789
still manage to give us good results very quickly.

00:01:39.790 --> 00:01:43.740
Then, we iterate between the measurement update where we gain knowledge about

00:01:43.739 --> 00:01:47.789
our environment and the state prediction which causes us to lose knowledge,

00:01:47.790 --> 00:01:50.568
due to the uncertainty of robot motion.

00:01:50.567 --> 00:01:52.170
You will first learn to implement

00:01:52.170 --> 00:01:55.515
the measurement update and following that state prediction.

00:01:55.515 --> 00:01:59.430
Throughout this time, you'll be working with a one-dimensional Kalman filter.

00:01:59.430 --> 00:02:03.780
However, after gaining a better understanding of how Kalman Filters operate,

00:02:03.780 --> 00:02:05.310
you will extend your knowledge to

00:02:05.310 --> 00:02:09.659
a multidimensional Kalman filter and even code on in C++.

00:02:09.659 --> 00:02:11.835
Once you're a Kalman filtering expert,

00:02:11.835 --> 00:02:15.360
we will look at how the extended Kalman filter allows us to solve

00:02:15.360 --> 00:02:20.520
a wider range of problems and help us with real-world robot localization.

