WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:05.025
The carbon filter is an estimation algorithm that is very prominent in controls.

00:00:05.025 --> 00:00:07.740
It's used to estimate the value of a variable in

00:00:07.740 --> 00:00:10.849
real time as the data is being collected.

00:00:10.849 --> 00:00:14.294
This variable can represent the position or velocity of a robot,

00:00:14.294 --> 00:00:18.085
or for example, the temperature of a process.

00:00:18.085 --> 00:00:21.240
The reason that the Kalman filter is so noteworthy is because it

00:00:21.239 --> 00:00:24.750
can take data with a lot of uncertainty or noise in the measurements,

00:00:24.750 --> 00:00:28.134
and provide a very accurate estimate of the real value.

00:00:28.135 --> 00:00:30.030
And it can do it so fast.

00:00:30.030 --> 00:00:32.130
Unlike other estimation algorithms,

00:00:32.130 --> 00:00:34.200
you don't need to wait for a lot of data to come

00:00:34.200 --> 00:00:37.500
in in order to calculate an accurate estimate.

00:00:37.500 --> 00:00:38.950
Let's look at an example.

00:00:38.950 --> 00:00:41.190
Here, we're measuring the pressure that

00:00:41.189 --> 00:00:45.509
an underwater robot experiences as it swims through water.

00:00:45.509 --> 00:00:49.304
Recall that underwater, pressure increases linearly with depth.

00:00:49.304 --> 00:00:52.469
The pressure measurements are not perfectly accurate though.

00:00:52.469 --> 00:00:55.530
There may be fluctuations in the water causing fluctuations in

00:00:55.530 --> 00:00:59.814
pressure as well as electrical noise from the sensor itself.

00:00:59.814 --> 00:01:02.549
As soon as the pressure sensors start collecting data,

00:01:02.549 --> 00:01:06.734
the Kalman filter begins to narrow in and estimate the actual pressure.

00:01:06.734 --> 00:01:08.920
In addition to the sensor readings,

00:01:08.920 --> 00:01:13.394
the Kalman filter also takes into account the uncertainty of the sensor readings,

00:01:13.394 --> 00:01:18.685
which are specific to the sensor being used and the environment that it is operating in.

00:01:18.685 --> 00:01:20.310
Now, you might be wondering,

00:01:20.310 --> 00:01:24.350
at a high level, what is happening every time a measurement is recorded?

00:01:24.349 --> 00:01:26.814
Well, that's a two-step process,

00:01:26.814 --> 00:01:31.554
and the Kalman filter is a continuous iteration of these two steps.

00:01:31.555 --> 00:01:35.700
The first step is a measurement update which is exactly what it sounds like.

00:01:35.700 --> 00:01:39.329
We use the recorded measurement to update our state.

00:01:39.329 --> 00:01:41.635
The second step is a state prediction.

00:01:41.635 --> 00:01:43.500
We use the information that we have about

00:01:43.500 --> 00:01:46.784
the current state to predict what the future state will be.

00:01:46.784 --> 00:01:49.754
At the start, we use an initial guess.

00:01:49.754 --> 00:01:53.310
We continue to iterate through these two steps and it doesn't take

00:01:53.310 --> 00:01:56.980
many iterations for our estimate to converge on the real value.

00:01:56.980 --> 00:02:01.725
In this lesson, we will dive into the implementation of each of these steps.

00:02:01.724 --> 00:02:02.939
By the end of the lesson,

00:02:02.939 --> 00:02:04.859
you will have an intuitive understanding of

00:02:04.859 --> 00:02:09.120
the Kalman filter algorithm as well as be able to implement it in C++.

