WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.930
Another commonly utilized sample-based path planning method

00:00:03.930 --> 00:00:06.390
is the randomly exploring random tree method,

00:00:06.389 --> 00:00:08.084
or RRT for short.

00:00:08.085 --> 00:00:12.120
RRT differs from PRM in that it is a single query planner.

00:00:12.119 --> 00:00:15.179
If you recall, PRM spent its learning phase

00:00:15.179 --> 00:00:18.405
building up a representation of the entire workspace.

00:00:18.405 --> 00:00:20.420
This was computationally expensive,

00:00:20.420 --> 00:00:23.700
but the resultant graph can be used for multiple queries.

00:00:23.699 --> 00:00:27.509
RRT disregards the need for a comprehensive graph,

00:00:27.510 --> 00:00:30.165
and built on a new for each individual query,

00:00:30.164 --> 00:00:33.990
taking into account the start and goal positions as it does so.

00:00:33.990 --> 00:00:36.255
This results in a much smaller,

00:00:36.255 --> 00:00:39.885
but more directed graph with a faster computation time.

00:00:39.884 --> 00:00:42.464
PRM is great for static environments,

00:00:42.465 --> 00:00:43.855
where you can reuse the graph,

00:00:43.854 --> 00:00:46.049
but certain environments change too quickly,

00:00:46.049 --> 00:00:49.254
and the RRT method serves these environments well.

00:00:49.255 --> 00:00:52.320
Let's see what the RRT method looks like.

00:00:52.320 --> 00:00:54.829
We're path planning in the same environment as

00:00:54.829 --> 00:00:58.250
before with the same start and goal configurations.

00:00:58.250 --> 00:01:01.219
However, instead of adding these in the learning phase,

00:01:01.219 --> 00:01:03.969
they will be explicitly considered from the start.

00:01:03.969 --> 00:01:08.150
Then, we start to build up a representation of the workspace.

00:01:08.150 --> 00:01:10.370
While the PRM built up a graph,

00:01:10.370 --> 00:01:12.094
RRT will build a tree,

00:01:12.094 --> 00:01:16.010
that is a type of graph where each node only has one parent.

00:01:16.010 --> 00:01:17.890
In a single query planner,

00:01:17.890 --> 00:01:21.200
you are only concerned about getting from start to goal.

00:01:21.200 --> 00:01:23.420
The lack of lateral connections between

00:01:23.420 --> 00:01:27.424
seemingly neighboring nodes is less of a concern as you will see.

00:01:27.424 --> 00:01:29.364
So, what is the algorithm?

00:01:29.364 --> 00:01:32.239
RRT will randomly generate a node,

00:01:32.239 --> 00:01:35.299
say this one; then it will find its closest neighbor.

00:01:35.299 --> 00:01:37.414
If the node is within a certain distance,

00:01:37.415 --> 00:01:39.080
Delta of the neighbor,

00:01:39.079 --> 00:01:42.015
then it can be connected directly, of course,

00:01:42.015 --> 00:01:45.424
if the local planner determines the edge to be collision-free.

00:01:45.424 --> 00:01:50.979
However, if a newly generated node is a far distance away from all other nodes,

00:01:50.980 --> 00:01:53.329
then the chance of the edge between the node and

00:01:53.329 --> 00:01:56.510
its nearest neighbor being collision-free is unlikely.

00:01:56.510 --> 00:01:59.734
In such a case, instead of connecting to this node,

00:01:59.734 --> 00:02:02.929
RRT will create a new node in the same direction,

00:02:02.930 --> 00:02:04.975
but a distance Delta away.

00:02:04.974 --> 00:02:07.588
Then this edge is checked for collisions,

00:02:07.588 --> 00:02:08.895
and if it's in the clear,

00:02:08.895 --> 00:02:10.950
the node is added to the tree.

00:02:10.949 --> 00:02:14.924
Nodes can be generated by uniformly sampling the search space,

00:02:14.925 --> 00:02:19.205
which would favor wide unexplored spaces, or alternatively,

00:02:19.205 --> 00:02:21.710
some greediness can be introduced by increasing

00:02:21.710 --> 00:02:24.530
the probability of sampling near the goal,

00:02:24.530 --> 00:02:27.455
which would bias new samples in the direction of the goal.

00:02:27.455 --> 00:02:30.395
Since RRT is a single query planner,

00:02:30.395 --> 00:02:33.760
slight biasing is often favorable to introduce.

00:02:33.759 --> 00:02:37.519
One variation of the RRT method is one that grows

00:02:37.520 --> 00:02:41.235
two trees: one from the start and one from the goal.

00:02:41.235 --> 00:02:45.025
RRT alternates growing each tree, and at every step,

00:02:45.025 --> 00:02:49.930
it tries to build an edge between the most recently added node and the other tree.

00:02:49.930 --> 00:02:52.365
Eventually, it succeeds.

00:02:52.365 --> 00:02:56.105
RRT knows that a path has been found from start to goal.

00:02:56.104 --> 00:02:59.239
This is a very simplified example of a workspace and

00:02:59.240 --> 00:03:04.975
not a true representation of a problem that PRM or RRT would be tasked with solving.

00:03:04.974 --> 00:03:08.569
PRM and RRT are exemplary performers in

00:03:08.569 --> 00:03:12.694
multidimensional spaces for robots with many degrees of freedom.

00:03:12.694 --> 00:03:15.889
In fact, they have been able to solve problems that

00:03:15.889 --> 00:03:19.919
traditional path planning algorithms are unable to solve.

