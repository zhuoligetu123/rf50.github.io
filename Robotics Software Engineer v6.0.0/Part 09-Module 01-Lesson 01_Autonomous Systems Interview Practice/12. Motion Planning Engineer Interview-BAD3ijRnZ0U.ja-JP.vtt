WEBVTT
Kind: captions
Language: ja-JP

00:00:00.000 --> 00:00:01.955
Aaron さん、今日はお越しいただきありがとうございます

00:00:01.955 --> 00:00:05.605
モーションプランナー職をご希望ですね

00:00:05.605 --> 00:00:08.370
まずはモーションプランについて質問させていただきますが

00:00:10.449 --> 00:00:11.820
よろしいですか

00:00:11.820 --> 00:00:12.679
ええ

00:00:12.679 --> 00:00:16.320
では質問ですが

00:00:16.320 --> 00:00:20.490
高速道路を車両が走行しているとします

00:00:20.489 --> 00:00:24.159
他の車も走っているんですが、ここは小さな街で

00:00:24.160 --> 00:00:27.370
信号機や歩行者なども考慮しなくてはなりません

00:00:27.370 --> 00:00:30.780
この場合の、車の行動に関する有限ステートマシーンの

00:00:30.780 --> 00:00:35.289
行動ツリーを説明していただけますか

00:00:35.289 --> 00:00:37.359
ええ、有限ステートマシーンについてですが

00:00:37.359 --> 00:00:40.549
まずはさまざまな車の状態について考えてみます

00:00:41.204 --> 00:00:47.884
3 車線の高速道路で、ここを車が走行しているとします

00:00:47.884 --> 00:00:50.960
まずはこのシンプルな状況について考えます

00:00:50.960 --> 00:00:53.210
ここでは他の車のことは考えず

00:00:53.210 --> 00:00:54.920
この車線を維持するものとします

00:00:54.920 --> 00:00:58.579
完璧なローカライゼーションと制御が成り立っており

00:00:58.579 --> 00:01:04.250
車線沿いにこれらのウェイポイントを生成します

00:01:04.250 --> 00:01:07.010
このトラジェクトリーの速度についてですが

00:01:07.010 --> 00:01:10.230
この高速道路には目標速度があります

00:01:11.260 --> 00:01:14.760
これはパラメーターのひとつです

00:01:19.370 --> 00:01:20.730
加速しなくてはなりません

00:01:20.730 --> 00:01:27.245
スピードが目標速度未満なら

00:01:27.245 --> 00:01:28.980
加速する

00:01:28.980 --> 00:01:34.250
加速しすぎた場合は

00:01:34.250 --> 00:01:38.439
警察に車を止められたくはないので減速する必要があります

00:01:39.349 --> 00:01:43.174
これでこの車線を維持しやすくなります

00:01:43.174 --> 00:01:46.209
次に、他の車がいる場合について考えてみましょう

00:01:46.209 --> 00:01:50.899
遅かれ早かれこの前の車とぶつかってしまいます

00:01:50.900 --> 00:01:53.080
そこで役立つのがセンサーです

00:01:58.144 --> 00:02:05.155
ここで、レーダー距離というもう 1 つのパラメーターの登場です

00:02:05.155 --> 00:02:06.594
なるほど

00:02:06.594 --> 00:02:11.180
これで安全な車間距離を保ちます

00:02:11.180 --> 00:02:19.765
レーダーが安全な車間距離に対して小さくなりすぎると

00:02:19.764 --> 00:02:23.064
減速が必要となります

00:02:23.064 --> 00:02:25.710
ただしオプションがもう 1 つあります

00:02:25.710 --> 00:02:27.185
3 車線の高速道路ですから

00:02:27.185 --> 00:02:31.579
車線変更を試みることができます

00:02:31.579 --> 00:02:37.564
そのためにはライダーのような別のセンサーを使ってこの範囲に別の車がいないかを確認します

00:02:41.689 --> 00:02:47.800
他の車がいれば減速してこの車に追従します

00:02:47.800 --> 00:02:51.620
中央の車線を走行している場合はその他のオプションもあります

00:02:51.620 --> 00:02:58.295
厳しい追い越しルールに従って左右どちらかの車線に移動できます

00:02:58.294 --> 00:02:59.739
なるほど

00:02:59.740 --> 00:03:02.629
田舎での走行についてですが

00:03:02.629 --> 00:03:06.454
こんな風に横断歩道があるとします

00:03:06.455 --> 00:03:11.210
この場合、一時停止の標識があればこの横断歩道で停止し

00:03:11.210 --> 00:03:16.670
知覚を働かせて横断歩行者の有無を確認します

00:03:16.669 --> 00:03:19.250
歩行者がおらず安全が確認できれば

00:03:21.430 --> 00:03:23.870
直進、右折、左折をして

00:03:23.870 --> 00:03:27.800
最終目的地を目指します

00:03:27.800 --> 00:03:33.230
同様に、一時停止標識や信号機があれば

00:03:33.229 --> 00:03:35.419
必要に応じてそれが青信号か赤信号かを判断して

00:03:35.419 --> 00:03:38.264
先に進みます

00:03:38.264 --> 00:03:38.859
わかりました

00:03:38.860 --> 00:03:41.375
車線変更用のトラジェクトリーを生成すると

00:03:41.375 --> 00:03:44.435
もっと面白くなります

00:03:44.435 --> 00:03:51.229
モーションプランニングスキームの一部ではこのトラジェクトリーがどのように見えるかを検討します

00:03:54.569 --> 00:03:59.919
この場合には、近くを走っている他の車を考慮する必要があります

00:03:59.919 --> 00:04:03.239
それからこの車の助手席に乗っている人もです

00:04:03.240 --> 00:04:07.430
加速度やジャーク、他の車との車間距離、速度を確認し

00:04:07.430 --> 00:04:12.000
モニターする必要があります

00:04:12.000 --> 00:04:14.270
先を見越して予測するわけです

00:04:14.270 --> 00:04:16.579
興味深い方法のひとつは

00:04:16.579 --> 00:04:18.634
コスト関数を用いたもので

00:04:18.634 --> 00:04:19.149
はい

00:04:19.149 --> 00:04:21.914
この方法で多項式曲線を生成します

00:04:23.904 --> 00:04:29.284
モデル予測コントローラーを使えばこのトラジェクトリーを生成する方法を考え出すことができます

00:04:29.285 --> 00:04:32.570
そのためには、正しいコスト関数を生成し

00:04:32.569 --> 00:04:35.909
加速度やジャークを下げたい場合

00:04:35.910 --> 00:04:41.055
安全な車間距離を確保したい場合を想定します

00:04:41.055 --> 00:04:43.759
なるほど。先ほどモデル予測コントローラーの話が出ましたが

00:04:43.759 --> 00:04:45.730
これまで実際に実装されたことはありますか

00:04:45.730 --> 00:04:47.000
ええ、ありますよ

00:04:47.000 --> 00:04:48.485
非常に興味深いケースなんですが

00:04:48.485 --> 00:04:50.245
縦列駐車向けに実装したんです

00:04:52.230 --> 00:04:58.009
ええ。ここに車があって

00:04:58.009 --> 00:05:02.129
この 2 台の車の間に駐車しようとしているとします

00:05:02.129 --> 00:05:06.439
ここで大切なのは正しいコスト関数を生成することです

00:05:06.439 --> 00:05:09.589
これが車の中央、ここが目標だとします

00:05:09.589 --> 00:05:13.989
これが最終的な進行方向です

00:05:13.990 --> 00:05:18.254
最終的にはここに完璧に車をフィットさせたいわけです

00:05:18.254 --> 00:05:20.269
ここで使用するのがコスト関数です

00:05:20.269 --> 00:05:24.659
この距離を最小限に抑えて進行方向を調整します

00:05:24.660 --> 00:05:28.880
それから、他の車と衝突しないように気を付けないといけませんよね

00:05:37.790 --> 00:05:43.925
この中間を交差する場合に

00:05:43.925 --> 00:05:46.579
たくさんの負の頂点を集めます

00:05:46.579 --> 00:05:49.664
この頂点を見れば位置をモニタできるというわけです

00:05:49.665 --> 00:05:50.050
なるほど

00:05:50.050 --> 00:05:53.160
この際にはこういう s 曲線を使って

00:05:53.160 --> 00:05:57.000
微分可能であることを確認します

00:05:57.000 --> 00:06:00.470
そしてこのコスト関数を使うんですが、MPC により縦列駐車で

00:06:00.470 --> 00:06:03.775
非常に良好な結果を得ることができました

00:06:03.774 --> 00:06:05.889
非常に興味深いアプリケーションですね

00:06:07.504 --> 00:06:09.139
この質問についてはこれで以上です

00:06:09.139 --> 00:06:11.599
では次のトピックに進みましょう

00:06:11.600 --> 00:06:12.360
はい

