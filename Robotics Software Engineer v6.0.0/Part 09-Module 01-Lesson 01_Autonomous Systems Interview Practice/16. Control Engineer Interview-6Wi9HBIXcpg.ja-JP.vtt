WEBVTT
Kind: captions
Language: ja-JP

00:00:00.000 --> 00:00:02.384
本日は面接にお越しいただきありがとうございます

00:00:02.384 --> 00:00:05.689
制御エンジニア職をご希望ですね

00:00:05.690 --> 00:00:10.320
まずは制御について質問させていただきますが、よろしいですか

00:00:10.320 --> 00:00:11.185
もちろんです

00:00:11.185 --> 00:00:14.429
それでは始めますPID 制御がどのような要素で

00:00:14.429 --> 00:00:17.855
構成されているか説明してください

00:00:17.855 --> 00:00:23.130
はい。PID 制御は入力値の制御を出力値と目標値との偏差 P、その積分 I、微分 D の 3 つの要素で行う制御のことで

00:00:23.129 --> 00:00:26.789
PID は業界で最も広く使われているコントローラーの 1 つです

00:00:31.535 --> 00:00:36.100
なるほど。では PID コントローラーのコーディングはどうやって行いますか

00:00:36.100 --> 00:00:39.914
ホワイトボードを使って説明してもよろしいでしょうか

00:00:39.914 --> 00:00:40.725
どうぞ

00:00:40.725 --> 00:00:43.600
先ほど申し上げたとおり

00:00:43.600 --> 00:00:46.439
PID には 3 つのコントローラー変数が必要となります

00:00:46.439 --> 00:00:50.265
比例用の変数 kp と

00:00:50.265 --> 00:00:55.945
積分用の変数 ki、そして微分用の変数 kd です

00:00:55.945 --> 00:01:00.630
基本的にはこれらの変数からエラー

00:01:00.630 --> 00:01:03.330
つまり現在のエラーの値が返されます

00:01:03.329 --> 00:01:07.575
ここで制御出力を得なければなりません

00:01:09.670 --> 00:01:11.424
すべての制御ループで

00:01:11.424 --> 00:01:19.844
PID 変数にあるエラーを用いて制御値を計算します

00:01:19.844 --> 00:01:24.174
パラメーターの整数と偏微分係数を使用しているので

00:01:24.174 --> 00:01:29.334
これらの状態を計算する変数がさらに 2 つ必要になります

00:01:29.334 --> 00:01:33.324
1 つ目が整数エラーで

00:01:33.325 --> 00:01:38.770
さらに、微分係数の計算をするために前のエラーが必要となります

00:01:38.769 --> 00:01:41.369
ここでは error_prev と記述することにします

00:01:41.370 --> 00:01:43.575
次に制御ループで

00:01:43.575 --> 00:01:46.454
まず整数エラーを

00:01:50.754 --> 00:01:56.359
数式は「error_i + = error」となり

00:01:56.359 --> 00:02:03.605
error_i + はこのループにあるエラーと等しくなるので、次に値を計算します

00:02:03.605 --> 00:02:10.365
まず「control = kp × error」となり

00:02:10.365 --> 00:02:13.855
kp を足した値に error_i を乗算します

00:02:13.854 --> 00:02:19.639
積分はすでに更新してあるので

00:02:19.639 --> 00:02:22.324
ここではそのまま使います

00:02:22.324 --> 00:02:29.009
ki を加算して error_i を乗算し、最後の微分係数では

00:02:29.009 --> 00:02:33.609
「+ kd × (error - error_prev)」となり

00:02:33.610 --> 00:02:40.100
現在のエラーから前のエラーを引いた値を kd に乗算してこれを加算します

00:02:46.360 --> 00:02:49.085
更新する必要が生じます

00:02:49.085 --> 00:02:54.860
よって次のループでは現在のエラーが前のエラーとなります

00:02:54.860 --> 00:03:02.700
これがエラーで、このエラーが PID コントローラーの制御ループとなるわけです

00:03:02.699 --> 00:03:03.984
なるほど

00:03:03.985 --> 00:03:05.880
それでは、説明していただいたことを

00:03:05.879 --> 00:03:07.134
たとえば C++ で実行するとしたら

00:03:07.134 --> 00:03:08.479
使用する可能性のある変数も含め

00:03:08.479 --> 00:03:10.164
さまざまな変数をどのようにして

00:03:10.164 --> 00:03:12.804
初期化しますか

00:03:21.430 --> 00:03:26.314
ですが、エラーと制御変数に対して主に

00:03:26.314 --> 00:03:31.650
浮動を用いるとしたら、これらは基本的には同じなので

00:03:31.650 --> 00:03:36.254
これらのエラーも浮動となります

00:03:36.254 --> 00:03:38.805
初期状態ではエラーがなかったので

00:03:38.805 --> 00:03:43.849
整数エラーは 0 となり

00:03:43.849 --> 00:03:49.875
前のエラーも 0 になるはずで、後ほど微分係数を計算することになります

00:03:49.875 --> 00:03:51.500
結構です

00:03:51.500 --> 00:03:55.360
今の説明を聞く限り PID コントローラーは

00:03:55.360 --> 00:03:57.920
多くの状況で成果をあげそうですが

00:04:01.409 --> 00:04:06.569
PID は最も一般的なコントローラーだと思いますが

00:04:06.569 --> 00:04:12.560
PID コントローラーでうまく制御できない状況と言えば

00:04:12.560 --> 00:04:17.120
おそらく非線形システムでしょうか

00:04:17.120 --> 00:04:24.959
これは PID の制御出力は線形でシステムの出力に影響を及ぼさない可能性があるためです

00:04:24.959 --> 00:04:31.629
よって PID コントローラーでは制御出力のさまざまな領域で問題が生じるでしょう

00:04:31.629 --> 00:04:38.375
もう 1 つはシンプルなシステムの場合です

00:04:38.375 --> 00:04:41.865
ここでは PID コントローラーをフル活用する必要はなく

00:04:41.865 --> 00:04:45.465
比例コントローラーだけで十分かもしれません

00:04:45.464 --> 00:04:48.709
結構です。この分野についてはこれで十分です

00:04:50.014 --> 00:04:50.474
はい

00:04:50.475 --> 00:04:51.080
ありがとうございました

