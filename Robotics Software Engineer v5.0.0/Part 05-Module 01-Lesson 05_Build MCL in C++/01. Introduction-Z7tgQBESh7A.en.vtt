WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:05.352
In this lesson, you will code the Monte Carlo localization algorithm in C++.

00:00:05.352 --> 00:00:08.894
Before we start, let's take a look at the problem in hand.

00:00:08.894 --> 00:00:10.834
Inside this two-dimensional map,

00:00:10.835 --> 00:00:13.335
a mobile robot represented by a blue color,

00:00:13.335 --> 00:00:16.295
lives in a world of size 100 by 100.

00:00:16.295 --> 00:00:20.205
This robot can rotate left or right and move forward.

00:00:20.204 --> 00:00:23.875
The robot can also measure its distance to the eight landmarks,

00:00:23.875 --> 00:00:27.795
represented in red using rangefinder sensor.

00:00:27.795 --> 00:00:30.840
It's important to note that this is a cyclic word which means

00:00:30.839 --> 00:00:34.939
that the robot can cross the walls and reappear from the other side.

00:00:34.939 --> 00:00:37.649
Now, we aim to estimate the robot's pose using

00:00:37.649 --> 00:00:41.705
particle filtering as it moves and senses the environment.

00:00:41.706 --> 00:00:47.067
We'll be spreading virtual particles randomly and uniformly throughout the map.

00:00:47.067 --> 00:00:51.295
In this lesson, you will code the MCL algorithm in sections.

00:00:51.295 --> 00:00:55.510
First, you will move the robot and measure its distance to the landmarks.

00:00:55.509 --> 00:00:59.390
Then, you will simulate noise and added to the measurements.

00:00:59.390 --> 00:01:04.265
Moving on, you will randomly and uniformly spread particles throughout the map.

00:01:04.265 --> 00:01:07.469
You will also evaluate the importance weight of each particle.

00:01:07.469 --> 00:01:10.679
Following, you will resample the particles.

00:01:10.680 --> 00:01:15.150
You will then generate an error value to check the overall quality of the solution.

00:01:15.150 --> 00:01:19.620
This will enable you to identify how close the particles are to the robot.

00:01:19.620 --> 00:01:22.170
By the end, you'll plot the position of the robot and

00:01:22.170 --> 00:01:26.159
the particles at each iteration of the MCL algorithm.

00:01:26.159 --> 00:01:28.000
All right. Now, let's get started.

