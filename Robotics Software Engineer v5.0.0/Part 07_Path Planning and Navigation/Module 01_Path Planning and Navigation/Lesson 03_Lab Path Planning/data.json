{
  "data": {
    "lesson": {
      "id": 462528,
      "key": "de92bb3c-a163-4808-8335-b6ce5a79db08",
      "title": "Lab: Path Planning",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "Learn to code the BFS and A* algorithms in C++.",
      "lesson_type": "Classroom",
      "display_workspace_project_only": null,
      "resources": null,
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 587379,
          "key": "ce844870-3941-4907-b8ec-52b95c1a47c6",
          "title": "Introduction",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "ce844870-3941-4907-b8ec-52b95c1a47c6",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 614009,
              "key": "9cf67544-5a58-475d-8652-65d139aecf57",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Introduction",
              "instructor_notes": ""
            },
            {
              "id": 587380,
              "key": "aeba1f58-9b96-4e46-a60b-639c76b363f2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Welcome to the path planning lab! Here, you will get a chance to code two of the path planning algorithms that you’ve learned earlier. \n\nYou will first code the **Breadth-first search** algorithm in C++. This algorithm is divided into different coding quizzes. You will challenge yourself and code each one of them to finally generate the shortest path of a robot moving from start to goal.  \n\nThen, you will move on and make the necessary changes to code the **A star** algorithm.\nAfter coding both the BFS and A* algorithms, you will visually compare the expansion lists generated. After a close inspection, you will judge which of these algorithms is more efficient.\n  \n",
              "instructor_notes": ""
            },
            {
              "id": 614020,
              "key": "b91aa9da-78ac-45ec-8fc1-c8154bb5b14d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Later in this lab, you will apply the A* algorithm to a real-world problem. The real-world problem is nothing but the map that you’ve generated using the occupancy grid mapping algorithm.\n\nAlright now, let’s get started!",
              "instructor_notes": ""
            },
            {
              "id": 591164,
              "key": "da8673d1-bdc5-4838-ba77-f880aeee8006",
              "title": "Lab: Path Planning",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "da8673d1-bdc5-4838-ba77-f880aeee8006",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Modeling the Problem",
                "BFS: Expansion List",
                "BFS: Expansion Vector",
                "BFS: Shortest Path",
                "A*: Shortest Path",
                "Comparison",
                "A*: Real-World Map",
                "A*: Visualization"
              ],
              "positive_feedback": "Great Job!",
              "video_feedback": null,
              "description": "Here's a detailed list of the steps in this lab. Check them off as you complete them:"
            }
          ]
        },
        {
          "id": 573514,
          "key": "e0600634-15a4-46f3-9ffb-2ae7a7618681",
          "title": "Modeling the Problem",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "e0600634-15a4-46f3-9ffb-2ae7a7618681",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 614008,
              "key": "c88b0d26-4da0-40e0-a1f1-f1909b2fb19c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Modeling the Problem",
              "instructor_notes": ""
            },
            {
              "id": 587387,
              "key": "196ea541-6993-41cb-b8f8-124f3f8b3cc0",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "The purpose of this lab is to find the shortest path for a robot moving inside a 5x6 map from start to goal position using different path planning algorithms. The robot can only move in four directions: up, left, down, and right. We will first model this problem using classes in C++ and later solve it with the BFS and A* algorithms. \n\n### Given\n**Grid(`5x6`)**:\n<div style=\"text-align: center;\">0 1 0 0 0 0 <br />0 1 0 0 0 0 <br />0 1 0 0 0 0 <br />0 1 0 0 0 0 <br />0 0 0 1 1 0 <br/></div>\n\nWhere 1's represent obstacles and 0's represent free space.\n\n**Robot Start position:** `0`,`0`\n\n**Robot Goal Position:** `4`,`5`\n\n**Direction of Movement:** Up(`-1,0`) - left(`0,-1`) - down(`1,0`) - right(`0,1`)\n\nThe *Direction of Movement* vector is a collection of four different 2D vectors each of which enables you to move between grid cells in the map.\n\n**Movement Arrows:**  Up(`^`) - left(`<`) - down(`v`) - right(`>`)\n\nThe *Movement Arrows* vector store the robot actions, this vector will be used later in this lab to visualize the robot orientation at each grid cell on the shortest path. \n\n**Cost of Movement:** `1`\n\nThe *Cost of Movement* value indicates how much it cost to move from one cell to another. Here, the cost is equal for all possible movements. \n",
              "instructor_notes": ""
            },
            {
              "id": 587386,
              "key": "7744d842-8fe5-490d-9876-453dffc5aee8",
              "title": "Modeling the Problem",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "7744d842-8fe5-490d-9876-453dffc5aee8",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Define a Map class and initialize the grid, its width, and height.",
                "Define a Planner class and initialize the robot's start position, goal position, cost of movement, movements arrows, and values.",
                "Define a `print2DVector` function which will print 2D vectors of any data type."
              ],
              "positive_feedback": "Great Job!",
              "video_feedback": null,
              "description": "In this quiz, you'll have three main tasks to accomplish in order to model the problem:"
            },
            {
              "id": 587383,
              "key": "6f75e4cb-97a3-42ba-929e-b6fe36bf8f72",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Note\n\nThroughout this lab, you'll be working with 1D and 2D vectors in C++. Vectors allow you to easily manage and manipulate the data with pre-built functions. For example: the `pop_back` function can be used to delete the last element in the vector. \n\nIf you are not already familiar with vectors, I recommend you read the following two sources before you start coding: \n1. [2D Vectors](https://www.geeksforgeeks.org/2d-vector-in-cpp-with-user-defined-size/): Learn how to define and use 2D Vectors in C++.\n2. [Documentation](http://www.cplusplus.com/reference/vector/vector/): Learn the vectors iterators and modifiers. ",
              "instructor_notes": ""
            },
            {
              "id": 573515,
              "key": "65fbf538-d87f-40c3-8dd6-805458fca30e",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "65fbf538-d87f-40c3-8dd6-805458fca30e",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "6308855831724032",
                "initial_code_files": [
                  {
                    "text": "#include <iostream>\n#include <string.h>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\n/* TODO: Define a Map class\n   Inside the map class, define the mapWidth, mapHeight and grid as a 2D vector\n*/\n\n/* TODO: Define a Planner class\n   Inside the Planner class, define the start, goal, cost, movements, and movements_arrows\n   Note: The goal should be defined it terms of the mapWidth and mapHeight\n*/\n\n/* TODO: Define a print2DVector function which will print 2D vectors of any data type\n   Example\n   \n   Input: \n   vector<vector<int> > a{{ 1, 0 },{ 0, 1 }};\n   print2DVector(a);\n   vector<vector<string> > b{{ \"a\", \"b\" },{ \"c\", \"d\" }};\n   print2DVector(b);\n   \n   Output:\n   1 0\n   0 1\n   a b\n   c d\n   Hint: You need to use templates\n*/\n\n/*############ Don't modify the main function############*/\nint main()\n{\n    // Instantiate map and planner objects\n    Map map;\n    Planner planner;\n\n    // Print classes variables\n    cout << \"Map:\" << endl;\n    print2DVector(map.grid);\n    cout << \"Start: \" << planner.start[0] << \" , \" << planner.start[1] << endl;\n    cout << \"Goal: \" << planner.goal[0] << \" , \" << planner.goal[1] << endl;\n    cout << \"Cost: \" << planner.cost << endl;\n    cout << \"Robot Movements: \" << planner.movements_arrows[0] << \" , \" << planner.movements_arrows[1] << \" , \" << planner.movements_arrows[2] << \" , \" << planner.movements_arrows[3] << endl;\n    cout << \"Delta:\" << endl;\n    print2DVector(planner.movements);\n\n    return 0;\n}\n",
                    "name": "main.cpp"
                  },
                  {
                    "text": "#include <iostream>\n#include <string.h>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\n// Map class\nclass Map {\npublic:\n    const static int mapWidth = 6;\n    const static int mapHeight = 5;\n    vector<vector<int> > grid = {\n        { 0, 1, 0, 0, 0, 0 },\n        { 0, 1, 0, 0, 0, 0 },\n        { 0, 1, 0, 0, 0, 0 },\n        { 0, 1, 0, 0, 0, 0 },\n        { 0, 0, 0, 1, 1, 0 }\n    };\n};\n\n// Planner class\nclass Planner : Map {\npublic:\n    int start[2] = { 0, 0 };\n    int goal[2] = { mapHeight - 1, mapWidth - 1 };\n    int cost = 1;\n\n    string movements_arrows[4] = { \"^\", \"<\", \"v\", \">\" };\n\n    vector<vector<int> > movements{\n        { -1, 0 },\n        { 0, -1 },\n        { 1, 0 },\n        { 0, 1 }\n    };\n};\n\n// Template function to print 2D vectors of any type\ntemplate <typename T>\nvoid print2DVector(T Vec)\n{\n    for (int i = 0; i < Vec.size(); ++i) {\n        for (int j = 0; j < Vec[0].size(); ++j) {\n            cout << Vec[i][j] << ' ';\n        }\n        cout << endl;\n    }\n}\n\nint main()\n{\n    // Instantiate map and planner objects\n    Map map;\n    Planner planner;\n\n    // Print classes variables\n    cout << \"Map:\" << endl;\n    print2DVector(map.grid);\n    cout << \"Start: \" << planner.start[0] << \" , \" << planner.start[1] << endl;\n    cout << \"Goal: \" << planner.goal[0] << \" , \" << planner.goal[1] << endl;\n    cout << \"Cost: \" << planner.cost << endl;\n    cout << \"Robot Movements: \" << planner.movements_arrows[0] << \" , \" << planner.movements_arrows[1] << \" , \" << planner.movements_arrows[2] << \" , \" << planner.movements_arrows[3] << endl;\n    cout << \"Delta:\" << endl;\n    print2DVector(planner.movements);\n\n    return 0;\n}\n",
                    "name": "solution.cpp"
                  }
                ]
              },
              "answer": null
            }
          ]
        },
        {
          "id": 573527,
          "key": "89705ca1-69f1-42e8-8316-c45e0512f19c",
          "title": "BFS: Expansion List",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "89705ca1-69f1-42e8-8316-c45e0512f19c",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 614010,
              "key": "ba084056-183b-4e3d-a396-4a76a5fd5d9e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# BFS: Expansion List",
              "instructor_notes": ""
            },
            {
              "id": 590513,
              "key": "70c534d4-03b1-41c6-bfb9-01b7d5ba3071",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Now that you’ve modeled the problem using a Map and a Planner class in C++, you'll start with the first part of the BFS algorithm. In this quiz, you’ll write the search function which will expand the cells with the lowest cost until the goal is reached.\n\nFor that, you will need to represent each cell with a triplet value **[g, x, y]** where **g** represents the total cost of expanding toward this cell, **x** is the row value, and **y** is the column value. \n\nYour function should print the final triplet value of the goal once it expands towards it.  \n",
              "instructor_notes": ""
            },
            {
              "id": 590514,
              "key": "2b296cc5-c8b7-4f6a-b5f0-6c550766c187",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Multiple things to keep in mind while coding the search function\n* As you expand towards a new cell, check if you have reached the goal; and once you reach it, print its triplet value. \n* Actively check if you have reached a roadblock. If you do, stop expanding and print a message indicating that you have failed to reach the goal.\n* Expand the cells with the lowest **g** value and store your expansions in an **open** vector. If two cells have equal **g** values, then you can to pick one of them to expand further.\n\n\n",
              "instructor_notes": ""
            },
            {
              "id": 593857,
              "key": "2aaf4fa6-2b4e-448a-a485-77884d4c503f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Hint \nHere's how the cells are being expanded with the **BFS** algorithm until the goal is reached:\n\n|   **Map**|   **`0`** | **`1`**|**`2`**|**`3`**|**`4`**|**`5`**|         \n|--|:---: | :---:| :---:|:---:| :---: |:---:|\n| **`0`** |0|1 |0 |0 |0|0|\n| **`1`**|0|1 |0 |0 |0|0|\n| **`2`**|0|1 |0 |0 |0|0|\n| **`3`**|0|1 |0 |0 |0|0|\n| **`4`**|0|0 |0 |1 |1|0|",
              "instructor_notes": ""
            },
            {
              "id": 593855,
              "key": "1ebdd50a-ae28-4061-bcdd-5551b78b5e79",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Expansion #: 0<br/>\nOpen List:\n[0 0 0 ] <br/>\nCell Picked: \n[0 0 0]\n\n-------------------------------\nExpansion #: 1 <br/>\nOpen List:\n[1 1 0 ] <br/>\nCell Picked: \n[1 1 0]\n\n-------------------------------\nExpansion #: 2<br/>\nOpen List:\n[2 2 0 ]<br/>\nCell Picked: \n[2 2 0]\n\n-------------------------------\nExpansion #: 3<br/>\nOpen List:\n[3 3 0 ]<br/>\nCell Picked: \n[3 3 0]\n\n-------------------------------\nExpansion #: 4<br/>\nOpen List:\n[4 4 0 ]<br/>\nCell Picked: \n[4 4 0]\n\n-------------------------------\nExpansion #: 5<br/>\nOpen List:\n[5 4 1 ]<br/>\nCell Picked: \n[5 4 1]\n\n-------------------------------\nExpansion #: 6<br/>\nOpen List:\n[6 4 2 ]<br/>\nCell Picked: \n[6 4 2]\n\n-------------------------------\nExpansion #: 7<br/>\nOpen List:\n[7 3 2 ]<br/>\nCell Picked: \n[7 3 2]\n\n-------------------------------\nExpansion #: 8<br/>\nOpen List:\n[8 3 3 ],\n[8 2 2 ]<br/>\nCell Picked: \n[8 2 2]\n\n-------------------------------\nExpansion #: 9<br/>\nOpen List:\n[9 2 3 ],\n[9 1 2 ],\n[8 3 3 ]<br/>\nCell Picked: \n[8 3 3]\n\n-------------------------------\nExpansion #: 10<br/>\nOpen List:\n[9 3 4 ],\n[9 2 3 ],\n[9 1 2 ]<br/>\nCell Picked: \n[9 1 2]\n\n-------------------------------\nExpansion #: 11 <br/>\nOpen List:\n[10 1 3 ],\n[10 0 2 ],\n[9 3 4 ],\n[9 2 3 ]<br/>\nCell Picked: \n[9 2 3]\n\n-------------------------------\nExpansion #: 12<br/>\nOpen List:\n[10 2 4 ],\n[10 1 3 ],\n[10 0 2 ],\n[9 3 4 ]<br/>\nCell Picked: \n[9 3 4]\n\n-------------------------------\nExpansion #: 13<br/>\nOpen List:\n[10 3 5 ],\n[10 2 4 ],\n[10 1 3 ],\n[10 0 2 ]<br/>\nCell Picked: \n[10 0 2]\n\n-------------------------------\nExpansion #: 14<br/>\nOpen List:\n[11 0 3 ],\n[10 3 5 ],\n[10 2 4 ],\n[10 1 3 ]<br/>\nCell Picked: \n[10 1 3]\n\n-------------------------------\nExpansion #: 15<br/>\nOpen List:\n[11 1 4 ],\n[11 0 3 ],\n[10 3 5 ],\n[10 2 4 ]<br/>\nCell Picked: \n[10 2 4]\n\n-------------------------------\nExpansion #: 16<br/>\nOpen List:\n[11 2 5 ],\n[11 1 4 ],\n[11 0 3 ],\n[10 3 5 ]<br/>\nCell Picked: \n[10 3 5]\n\n-------------------------------\nExpansion #: 17<br/>\nOpen List:\n[11 4 5 ],\n[11 2 5 ],\n[11 1 4 ],\n[11 0 3 ]<br/>\nCell Picked: \n[11 0 3]\n\n-------------------------------\nExpansion #: 18<br/>\nOpen List:\n[12 0 4 ],\n[11 4 5 ],\n[11 2 5 ],\n[11 1 4 ]<br/>\nCell Picked: \n[11 1 4]\n\n-------------------------------\nExpansion #: 19<br/>\nOpen List:\n[12 1 5 ],\n[12 0 4 ],\n[11 4 5 ],\n[11 2 5 ]<br/>\nCell Picked: \n[11 2 5]\n\n-------------------------------\nExpansion #: 20<br/>\nOpen List:\n[12 1 5 ],\n[12 0 4 ],\n[11 4 5 ]<br/>\nCell Picked: \n[11 4 5]\n\n-------------------------------",
              "instructor_notes": ""
            },
            {
              "id": 573529,
              "key": "e10737e1-854e-45f0-9431-ee370a3c8f63",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "e10737e1-854e-45f0-9431-ee370a3c8f63",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "6325032960262144",
                "initial_code_files": [
                  {
                    "text": "#include <iostream>\n#include <string.h>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\n// Map class\nclass Map {\npublic:\n    const static int mapWidth = 6;\n    const static int mapHeight = 5;\n    vector<vector<int> > grid = {\n        { 0, 1, 0, 0, 0, 0 },\n        { 0, 1, 0, 0, 0, 0 },\n        { 0, 1, 0, 0, 0, 0 },\n        { 0, 1, 0, 0, 0, 0 },\n        { 0, 0, 0, 1, 1, 0 }\n    };\n};\n\n// Planner class\nclass Planner : Map {\npublic:\n    int start[2] = { 0, 0 };\n    int goal[2] = { mapHeight - 1, mapWidth - 1 };\n    int cost = 1;\n\n    string movements_arrows[4] = { \"^\", \"<\", \"v\", \">\" };\n\n    vector<vector<int> > movements{\n        { -1, 0 },\n        { 0, -1 },\n        { 1, 0 },\n        { 0, 1 }\n    };\n};\n\n// Template function to print 2D vectors of any type\ntemplate <typename T>\nvoid print2DVector(T Vec)\n{\n    for (int i = 0; i < Vec.size(); ++i) {\n        for (int j = 0; j < Vec[0].size(); ++j) {\n            cout << Vec[i][j] << ' ';\n        }\n        cout << endl;\n    }\n}\n\n/*#### TODO: Code the search function which will generate the expansion list ####*/\n// You are only required to print the final triplet values\nvoid search(Map map, Planner planner)\n{\n    \n}\n\nint main()\n{\n    // Instantiate map and planner objects\n    Map map;\n    Planner planner;\n\n    // Search for the expansions\n    search(map, planner);\n\n    return 0;\n}\n",
                    "name": "main.cpp"
                  },
                  {
                    "text": "#include <iostream>\n#include <string.h>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\n// Map class\nclass Map {\npublic:\n    const static int mapWidth = 6;\n    const static int mapHeight = 5;\n    vector<vector<int> > grid = {\n        { 0, 1, 0, 0, 0, 0 },\n        { 0, 1, 0, 0, 0, 0 },\n        { 0, 1, 0, 0, 0, 0 },\n        { 0, 1, 0, 0, 0, 0 },\n        { 0, 0, 0, 1, 1, 0 }\n    };\n};\n\n// Planner class\nclass Planner : Map {\npublic:\n    int start[2] = { 0, 0 };\n    int goal[2] = { mapHeight - 1, mapWidth - 1 };\n    int cost = 1;\n\n    string movements_arrows[4] = { \"^\", \"<\", \"v\", \">\" };\n\n    vector<vector<int> > movements{\n        { -1, 0 },\n        { 0, -1 },\n        { 1, 0 },\n        { 0, 1 }\n    };\n};\n\n// Template function to print 2D vectors of any type\ntemplate <typename T>\nvoid print2DVector(T Vec)\n{\n    for (int i = 0; i < Vec.size(); ++i) {\n        for (int j = 0; j < Vec[0].size(); ++j) {\n            cout << Vec[i][j] << ' ';\n        }\n        cout << endl;\n    }\n}\n\n// Search function which generates the expansions\nvoid search(Map map, Planner planner)\n{\n    // Create a closed 2 array filled with 0s and first element 1\n    vector<vector<int> > closed(map.mapHeight, vector<int>(map.mapWidth));\n    closed[planner.start[0]][planner.start[1]] = 1;\n\n    // Defined the triplet values\n    int x = planner.start[0];\n    int y = planner.start[1];\n    int g = 0;\n\n    // Store the expansions\n    vector<vector<int> > open;\n    open.push_back({ g, x, y });\n\n    // Flags\n    bool found = false;\n    bool resign = false;\n\n    int x2;\n    int y2;\n\n    // While I am still searching for the goal and the problem is solvable\n    while (!found && !resign) {\n        // Resign if no values in the open list and you can't expand anymore\n        if (open.size() == 0) {\n            resign = true;\n            cout << \"Failed to reach a goal\" << endl;\n        }\n        // Keep expanding\n        else {\n            // Remove triplets from the open list\n            sort(open.begin(), open.end());\n            reverse(open.begin(), open.end());\n            vector<int> next;\n            // Stored the poped value into next\n            next = open.back();\n            open.pop_back();\n\n            x = next[1];\n            y = next[2];\n            g = next[0];\n            \n            // Check if we reached the goal:\n            if (x == planner.goal[0] && y == planner.goal[1]) {\n                found = true;\n                cout << \"[\" << g << \", \" << x << \", \" << y << \"]\" << endl;\n            }\n\n            //else expand new elements\n            else {\n                for (int i = 0; i < planner.movements.size(); i++) {\n                    x2 = x + planner.movements[i][0];\n                    y2 = y + planner.movements[i][1];\n                    if (x2 >= 0 && x2 < map.grid.size() && y2 >= 0 && y2 < map.grid[0].size()) {\n                        if (closed[x2][y2] == 0 and map.grid[x2][y2] == 0) {\n                            int g2 = g + planner.cost;\n                            open.push_back({ g2, x2, y2 });\n                            closed[x2][y2] = 1;\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nint main()\n{\n    // Instantiate map and planner objects\n    Map map;\n    Planner planner;\n\n    // Search for the expansions\n    search(map, planner);\n\n    return 0;\n}\n",
                    "name": "solution.cpp"
                  }
                ]
              },
              "answer": null
            }
          ]
        },
        {
          "id": 573530,
          "key": "659699f1-26e2-4bb2-8649-62af078c5c75",
          "title": "BFS: Expansion Vector",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "659699f1-26e2-4bb2-8649-62af078c5c75",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 614011,
              "key": "a4c78839-0306-4873-8135-240506b3db48",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# BFS: Expansion Vector",
              "instructor_notes": ""
            },
            {
              "id": 590526,
              "key": "fa7e87d2-1fd5-48a5-bd32-ab2680ce6171",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Now that you have expanded the cells until you've reached the goal, you are asked to print the order in which each cell was expanded. For that, you’ll need to modify the search function and create a 2D **expansion** vector that is equal in size to the map. Each cell in the expansion vector will store the order at which it was expanded. Some of the cells were never expanded, and should show a value of **-1**. \n",
              "instructor_notes": ""
            },
            {
              "id": 591126,
              "key": "1ca18322-9b44-44df-a979-984dcea1b73d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Hint\nTake a look at the expansion list generated after running the code:\n",
              "instructor_notes": ""
            },
            {
              "id": 613963,
              "key": "8900cc98-6ef6-4715-ac89-05ec631ca8b6",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/April/5ada5dcc_screen-shot-2018-04-20-at-2.37.58-pm/screen-shot-2018-04-20-at-2.37.58-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/8900cc98-6ef6-4715-ac89-05ec631ca8b6",
              "caption": "",
              "alt": "",
              "width": 153,
              "height": 105,
              "instructor_notes": null
            },
            {
              "id": 590527,
              "key": "38f86a88-d7bb-4fd7-a8ca-75197d83efa8",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "You can see that we started with the first cell and ended at the goal cell which was expanded after **20** iterations. All the obstacles and some cells were never expanded and thus are showing a value of **-1**. \n",
              "instructor_notes": ""
            },
            {
              "id": 590528,
              "key": "7d2684eb-6a98-483e-8b60-df5a29fb3928",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Now, go ahead and modify the search function to generate and print the expansion 2D vector. \n",
              "instructor_notes": ""
            },
            {
              "id": 573531,
              "key": "d392842c-617d-40f4-b66d-4764dcabfeda",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "d392842c-617d-40f4-b66d-4764dcabfeda",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "4572256404111360",
                "initial_code_files": [
                  {
                    "text": "#include <iostream>\n#include <string.h>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\n// Map class\nclass Map {\npublic:\n    const static int mapWidth = 6;\n    const static int mapHeight = 5;\n    vector<vector<int> > grid = {\n        { 0, 1, 0, 0, 0, 0 },\n        { 0, 1, 0, 0, 0, 0 },\n        { 0, 1, 0, 0, 0, 0 },\n        { 0, 1, 0, 0, 0, 0 },\n        { 0, 0, 0, 1, 1, 0 }\n    };\n};\n\n// Planner class\nclass Planner : Map {\npublic:\n    int start[2] = { 0, 0 };\n    int goal[2] = { mapHeight - 1, mapWidth - 1 };\n    int cost = 1;\n\n    string movements_arrows[4] = { \"^\", \"<\", \"v\", \">\" };\n\n    vector<vector<int> > movements{\n        { -1, 0 },\n        { 0, -1 },\n        { 1, 0 },\n        { 0, 1 }\n    };\n};\n\n// Template function to print 2D vectors of any type\ntemplate <typename T>\nvoid print2DVector(T Vec)\n{\n    for (int i = 0; i < Vec.size(); ++i) {\n        for (int j = 0; j < Vec[0].size(); ++j) {\n            cout << Vec[i][j] << ' ';\n        }\n        cout << endl;\n    }\n}\n\n/* #### TODO: Modify the search function to generate and print the expansion 2D vector #### */\nvoid search(Map map, Planner planner)\n{\n    // Create a closed 2 array filled with 0s and first element 1\n    vector<vector<int> > closed(map.mapHeight, vector<int>(map.mapWidth));\n    closed[planner.start[0]][planner.start[1]] = 1;\n\n    // Defined the triplet values\n    int x = planner.start[0];\n    int y = planner.start[1];\n    int g = 0;\n\n    // Store the expansions\n    vector<vector<int> > open;\n    open.push_back({ g, x, y });\n\n    // Flags\n    bool found = false;\n    bool resign = false;\n\n    int x2;\n    int y2;\n\n    // While I am still searching for the goal and the problem is solvable\n    while (!found && !resign) {\n        // Resign if no values in the open list and you can't expand anymore\n        if (open.size() == 0) {\n            resign = true;\n            cout << \"Failed to reach a goal\" << endl;\n        }\n        // Keep expanding\n        else {\n            // Remove triplets from the open list\n            sort(open.begin(), open.end());\n            reverse(open.begin(), open.end());\n            vector<int> next;\n            // Stored the poped value into next\n            next = open.back();\n            open.pop_back();\n\n            x = next[1];\n            y = next[2];\n            g = next[0];\n            \n            // Check if we reached the goal:\n            if (x == planner.goal[0] && y == planner.goal[1]) {\n                found = true;\n                cout << \"[\" << g << \", \" << x << \", \" << y << \"]\" << endl;\n            }\n\n            //else expand new elements\n            else {\n                for (int i = 0; i < planner.movements.size(); i++) {\n                    x2 = x + planner.movements[i][0];\n                    y2 = y + planner.movements[i][1];\n                    if (x2 >= 0 && x2 < map.grid.size() && y2 >= 0 && y2 < map.grid[0].size()) {\n                        if (closed[x2][y2] == 0 and map.grid[x2][y2] == 0) {\n                            int g2 = g + planner.cost;\n                            open.push_back({ g2, x2, y2 });\n                            closed[x2][y2] = 1;\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nint main()\n{\n    // Instantiate map and planner objects\n    Map map;\n    Planner planner;\n\n    // Search for the expansions\n    search(map, planner);\n\n    return 0;\n}\n",
                    "name": "main.cpp"
                  },
                  {
                    "text": "#include <iostream>\n#include <string.h>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\n// Map class\nclass Map {\npublic:\n    const static int mapWidth = 6;\n    const static int mapHeight = 5;\n    vector<vector<int> > grid = {\n        { 0, 1, 0, 0, 0, 0 },\n        { 0, 1, 0, 0, 0, 0 },\n        { 0, 1, 0, 0, 0, 0 },\n        { 0, 1, 0, 0, 0, 0 },\n        { 0, 0, 0, 1, 1, 0 }\n    };\n};\n\n// Planner class\nclass Planner : Map {\npublic:\n    int start[2] = { 0, 0 };\n    int goal[2] = { mapHeight - 1, mapWidth - 1 };\n    int cost = 1;\n\n    string movements_arrows[4] = { \"^\", \"<\", \"v\", \">\" };\n\n    vector<vector<int> > movements{\n        { -1, 0 },\n        { 0, -1 },\n        { 1, 0 },\n        { 0, 1 }\n    };\n};\n\n// Template function to print 2D vectors of any type\ntemplate <typename T>\nvoid print2DVector(T Vec)\n{\n    for (int i = 0; i < Vec.size(); ++i) {\n        for (int j = 0; j < Vec[0].size(); ++j) {\n            cout << Vec[i][j] << ' ';\n        }\n        cout << endl;\n    }\n}\n\n// Search function will generate the expansions\nvoid search(Map map, Planner planner)\n{\n    // Create a closed 2 array filled with 0s and first element 1\n    vector<vector<int> > closed(map.mapHeight, vector<int>(map.mapWidth));\n    closed[planner.start[0]][planner.start[1]] = 1;\n\n    // Create expand array filled with -1\n    vector<vector<int> > expand(map.mapHeight, vector<int>(map.mapWidth, -1));\n\n    // Defined the triplet values\n    int x = planner.start[0];\n    int y = planner.start[1];\n    int g = 0;\n\n    // Store the expansions\n    vector<vector<int> > open;\n    open.push_back({ g, x, y });\n\n    // Flags and counters\n    bool found = false;\n    bool resign = false;\n    int count = 0;\n\n    int x2;\n    int y2;\n\n    // While I am still searching for the goal and the problem is solvable\n    while (!found && !resign) {\n        // Resign if no values in the open list and you can't expand anymore\n        if (open.size() == 0) {\n            resign = true;\n            cout << \"Failed to reach a goal\" << endl;\n        }\n        // Keep expanding\n        else {\n            // Remove triplets from the open list\n            sort(open.begin(), open.end());\n            reverse(open.begin(), open.end());\n            vector<int> next;\n            // Stored the poped value into next\n            next = open.back();\n            open.pop_back();\n\n            x = next[1];\n            y = next[2];\n            g = next[0];\n\n            // Fill the expand vectors with count\n            expand[x][y] = count;\n            count += 1;\n            \n            // Check if we reached the goal:\n            if (x == planner.goal[0] && y == planner.goal[1]) {\n                found = true;\n                //cout << \"[\" << g << \", \" << x << \", \" << y << \"]\" << endl;\n            }\n\n            //else expand new elements\n            else {\n                for (int i = 0; i < planner.movements.size(); i++) {\n                    x2 = x + planner.movements[i][0];\n                    y2 = y + planner.movements[i][1];\n                    if (x2 >= 0 && x2 < map.grid.size() && y2 >= 0 && y2 < map.grid[0].size()) {\n                        if (closed[x2][y2] == 0 and map.grid[x2][y2] == 0) {\n                            int g2 = g + planner.cost;\n                            open.push_back({ g2, x2, y2 });\n                            closed[x2][y2] = 1;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    // Print the expansion List\n    print2DVector(expand);\n}\n\nint main()\n{\n    // Instantiate map and planner objects\n    Map map;\n    Planner planner;\n\n    // Search for the expansions\n    search(map, planner);\n\n    return 0;\n}",
                    "name": "solution.cpp"
                  }
                ]
              },
              "answer": null
            }
          ]
        },
        {
          "id": 573533,
          "key": "c66cf1b0-cf45-4b52-8dcd-64e7eaf3e1a2",
          "title": "BFS: Shortest Path",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "c66cf1b0-cf45-4b52-8dcd-64e7eaf3e1a2",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 614012,
              "key": "dacd3ac2-50ce-4c9a-8213-306b97bea51d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# BFS: Shortest Path",
              "instructor_notes": ""
            },
            {
              "id": 590542,
              "key": "54ba0885-7331-44bf-8530-5c11373db5b2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "The final step is to print the shortest path that the robot has to take in order to travel from start to goal. You will need to record each action that the robot should take(ex: turning left **<**) and store all the actions in a **policy** 2D vector. \n ",
              "instructor_notes": ""
            },
            {
              "id": 614013,
              "key": "06dfa0a7-c85d-47e8-8fb7-05b558bf61f1",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Hint",
              "instructor_notes": ""
            },
            {
              "id": 591128,
              "key": "68a61b25-4d8e-45bb-8c54-b85d3499e16d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Here’s the output policy vector generated after running the code:\n",
              "instructor_notes": ""
            },
            {
              "id": 591127,
              "key": "868747a7-2a61-4694-9ff3-3bf2b972f721",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/April/5ac5463a_screen-shot-2018-04-04-at-2.39.43-pm/screen-shot-2018-04-04-at-2.39.43-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/868747a7-2a61-4694-9ff3-3bf2b972f721",
              "caption": "",
              "alt": "",
              "width": 118,
              "height": 108,
              "instructor_notes": null
            },
            {
              "id": 590543,
              "key": "7c07aa80-3719-44b7-98ad-8b82ac91bbd2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "You can see the different actions(**v** - **>** - **<** - **^**) that the robot has to take in order to reach the goal marked with the *****. Some of these cells will never be visited by the robot and are marked with an **-**. \n",
              "instructor_notes": ""
            },
            {
              "id": 590544,
              "key": "5530d25c-a14c-47db-a09d-81f93a89d3a5",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Now, go ahead and modify the search function to generate the policy 2D Vector. \n",
              "instructor_notes": ""
            },
            {
              "id": 573534,
              "key": "92aca36a-910a-4198-b5c5-f5b3ac92c8f9",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "92aca36a-910a-4198-b5c5-f5b3ac92c8f9",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "5651289896255488",
                "initial_code_files": [
                  {
                    "text": "#include <iostream>\n#include <string.h>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\n// Map class\nclass Map {\npublic:\n    const static int mapWidth = 6;\n    const static int mapHeight = 5;\n    vector<vector<int> > grid = {\n        { 0, 1, 0, 0, 0, 0 },\n        { 0, 1, 0, 0, 0, 0 },\n        { 0, 1, 0, 0, 0, 0 },\n        { 0, 1, 0, 0, 0, 0 },\n        { 0, 0, 0, 1, 1, 0 }\n    };\n};\n\n// Planner class\nclass Planner : Map {\npublic:\n    int start[2] = { 0, 0 };\n    int goal[2] = { mapHeight - 1, mapWidth - 1 };\n    int cost = 1;\n\n    string movements_arrows[4] = { \"^\", \"<\", \"v\", \">\" };\n\n    vector<vector<int> > movements{\n        { -1, 0 },\n        { 0, -1 },\n        { 1, 0 },\n        { 0, 1 }\n    };\n};\n\n// Template function to print 2D vectors of any type\ntemplate <typename T>\nvoid print2DVector(T Vec)\n{\n    for (int i = 0; i < Vec.size(); ++i) {\n        for (int j = 0; j < Vec[0].size(); ++j) {\n            cout << Vec[i][j] << ' ';\n        }\n        cout << endl;\n    }\n}\n\n/* #### TODO: Modify the search function and generate the policy vector #### */\nvoid search(Map map, Planner planner)\n{\n    // Create a closed 2 array filled with 0s and first element 1\n    vector<vector<int> > closed(map.mapHeight, vector<int>(map.mapWidth));\n    closed[planner.start[0]][planner.start[1]] = 1;\n\n    // Create expand array filled with -1\n    vector<vector<int> > expand(map.mapHeight, vector<int>(map.mapWidth, -1));\n\n    // Defined the triplet values\n    int x = planner.start[0];\n    int y = planner.start[1];\n    int g = 0;\n\n    // Store the expansions\n    vector<vector<int> > open;\n    open.push_back({ g, x, y });\n\n    // Flags and counters\n    bool found = false;\n    bool resign = false;\n    int count = 0;\n\n    int x2;\n    int y2;\n\n    // While I am still searching for the goal and the problem is solvable\n    while (!found && !resign) {\n        // Resign if no values in the open list and you can't expand anymore\n        if (open.size() == 0) {\n            resign = true;\n            cout << \"Failed to reach a goal\" << endl;\n        }\n        // Keep expanding\n        else {\n            // Remove triplets from the open list\n            sort(open.begin(), open.end());\n            reverse(open.begin(), open.end());\n            vector<int> next;\n            // Stored the poped value into next\n            next = open.back();\n            open.pop_back();\n\n            x = next[1];\n            y = next[2];\n            g = next[0];\n\n            // Fill the expand vectors with count\n            expand[x][y] = count;\n            count += 1;\n            \n            // Check if we reached the goal:\n            if (x == planner.goal[0] && y == planner.goal[1]) {\n                found = true;\n                //cout << \"[\" << g << \", \" << x << \", \" << y << \"]\" << endl;\n            }\n\n            //else expand new elements\n            else {\n                for (int i = 0; i < planner.movements.size(); i++) {\n                    x2 = x + planner.movements[i][0];\n                    y2 = y + planner.movements[i][1];\n                    if (x2 >= 0 && x2 < map.grid.size() && y2 >= 0 && y2 < map.grid[0].size()) {\n                        if (closed[x2][y2] == 0 and map.grid[x2][y2] == 0) {\n                            int g2 = g + planner.cost;\n                            open.push_back({ g2, x2, y2 });\n                            closed[x2][y2] = 1;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    // Print the expansion List\n    print2DVector(expand);\n}\n\nint main()\n{\n    // Instantiate map and planner objects\n    Map map;\n    Planner planner;\n\n    // Search for the expansions\n    search(map, planner);\n\n    return 0;\n}",
                    "name": "main.cpp"
                  },
                  {
                    "text": "#include <iostream>\n#include <string.h>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\n// Map class\nclass Map {\npublic:\n    const static int mapWidth = 6;\n    const static int mapHeight = 5;\n    vector<vector<int> > grid = {\n        { 0, 1, 0, 0, 0, 0 },\n        { 0, 1, 0, 0, 0, 0 },\n        { 0, 1, 0, 0, 0, 0 },\n        { 0, 1, 0, 0, 0, 0 },\n        { 0, 0, 0, 1, 1, 0 }\n    };\n};\n\n// Planner class\nclass Planner : Map {\npublic:\n    int start[2] = { 0, 0 };\n    int goal[2] = { mapHeight - 1, mapWidth - 1 };\n    int cost = 1;\n\n    string movements_arrows[4] = { \"^\", \"<\", \"v\", \">\" };\n\n    vector<vector<int> > movements{\n        { -1, 0 },\n        { 0, -1 },\n        { 1, 0 },\n        { 0, 1 }\n    };\n};\n\n// Template function to print 2D vectors of any type\ntemplate <typename T>\nvoid print2DVector(T Vec)\n{\n    for (int i = 0; i < Vec.size(); ++i) {\n        for (int j = 0; j < Vec[0].size(); ++j) {\n            cout << Vec[i][j] << ' ';\n        }\n        cout << endl;\n    }\n}\n\n// Search function will generate the expansions\nvoid search(Map map, Planner planner)\n{\n    // Create a closed 2 array filled with 0s and first element 1\n    vector<vector<int> > closed(map.mapHeight, vector<int>(map.mapWidth));\n    closed[planner.start[0]][planner.start[1]] = 1;\n\n    // Create expand array filled with -1\n    vector<vector<int> > expand(map.mapHeight, vector<int>(map.mapWidth, -1));\n\n    // Create action array filled with -1\n    vector<vector<int> > action(map.mapHeight, vector<int>(map.mapWidth, -1));\n\n    // Defined the triplet values\n    int x = planner.start[0];\n    int y = planner.start[1];\n    int g = 0;\n\n    // Store the expansions\n    vector<vector<int> > open;\n    open.push_back({ g, x, y });\n\n    // Flags and counters\n    bool found = false;\n    bool resign = false;\n    int count = 0;\n\n    int x2;\n    int y2;\n\n    // While I am still searching for the goal and the problem is solvable\n    while (!found && !resign) {\n        // Resign if no values in the open list and you can't expand anymore\n        if (open.size() == 0) {\n            resign = true;\n            cout << \"Failed to reach a goal\" << endl;\n        }\n        // Keep expanding\n        else {\n            // Remove triplets from the open list\n            sort(open.begin(), open.end());\n            reverse(open.begin(), open.end());\n            vector<int> next;\n            // Stored the poped value into next\n            next = open.back();\n            open.pop_back();\n\n            x = next[1];\n            y = next[2];\n            g = next[0];\n\n            // Fill the expand vectors with count\n            expand[x][y] = count;\n            count += 1;\n\n            // Check if we reached the goal:\n            if (x == planner.goal[0] && y == planner.goal[1]) {\n                found = true;\n                //cout << \"[\" << g << \", \" << x << \", \" << y << \"]\" << endl;\n            }\n\n            //else expand new elements\n            else {\n                for (int i = 0; i < planner.movements.size(); i++) {\n                    x2 = x + planner.movements[i][0];\n                    y2 = y + planner.movements[i][1];\n                    if (x2 >= 0 && x2 < map.grid.size() && y2 >= 0 && y2 < map.grid[0].size()) {\n                        if (closed[x2][y2] == 0 and map.grid[x2][y2] == 0) {\n                            int g2 = g + planner.cost;\n                            open.push_back({ g2, x2, y2 });\n                            closed[x2][y2] = 1;\n                            action[x2][y2] = i;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    // Print the expansion List\n    //print2DVector(expand);\n\n    // Find the path with robot orientation\n    vector<vector<string> > policy(map.mapHeight, vector<string>(map.mapWidth, \"-\"));\n\n    // Going backward\n    x = planner.goal[0];\n    y = planner.goal[1];\n    policy[x][y] = '*';\n\n    while (x != planner.start[0] or y != planner.start[1]) {\n        x2 = x - planner.movements[action[x][y]][0];\n        y2 = y - planner.movements[action[x][y]][1];\n        policy[x2][y2] = planner.movements_arrows[action[x][y]];\n        x = x2;\n        y = y2;\n    }\n\n    // Print the path with arrows\n    print2DVector(policy);\n}\n\nint main()\n{\n    // Instantiate map and planner objects\n    Map map;\n    Planner planner;\n\n    // Search for the expansions\n    search(map, planner);\n\n    return 0;\n}\n",
                    "name": "solution.cpp"
                  }
                ]
              },
              "answer": null
            }
          ]
        },
        {
          "id": 573537,
          "key": "4f12a326-d07a-4941-8f97-821050261797",
          "title": "A*: Shortest Path",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "4f12a326-d07a-4941-8f97-821050261797",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 614014,
              "key": "ae7d82d1-d80d-4660-aeff-2269b9713154",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# A*: Shortest Path",
              "instructor_notes": ""
            },
            {
              "id": 590551,
              "key": "3d3a54d0-0d27-419a-a03d-49c5899c53cc",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "You’ll now implement the A\\* algorithm and find the shortest path by modifying your previous code. As you know, A\\* is based on a heuristic function. Thus, we will implement a Manhattan-based heuristic vector and compute the Manhattan distance of each cell with respect to the goal position where:\n<div class=\"mathquill\">x_{d} = x_{goal} - x_{cellposition}</div>\n<div class=\"mathquill\">y_{d} = y_{goal} - y_{cellposition}</div>\n<div  class=\"mathquill\">Manhattan \\ distance \\ d = \\left | x_{d} \\right | +\\left | y_{d} \\right |</div>\n\nBy computing the Manhattan distance of each cell, we'll obtain this heuristic vector \n<div style=\"text-align: center;\">**Manhattan Heuristic Vector**</div>\n<div style=\"text-align: center;\">9 8 7 6 5 4<br/>8 7 6 5 4 3<br/>7 6 5 4 3 2<br/>6 5 4 3 2 1<br/>5 4 3 2 1 0<br /></div>\n\nYou can always experiment with other heuristic-based vectors such as the Euclidean distance or the  Chebyshev distance where:\n\n<div  class=\"mathquill\">Euclidean \\ distance \\ d = \\sqrt{ x_{d}^{2} + y_{d}^{2}}</div>\n<div style=\"text-align: center;\">**Euclidean Heuristic Vector**</div>\n<div style=\"text-align: center;\">6 5 5 4 4 4<br/>5 5 4 3 3 3<br/>5 4 3 2 2 2<br/>5 4 3 2 1 1<br/>5 4 3 2 1 0<br /></div>\n\n<div  class=\"mathquill\">Chebyshev \\ distance \\ d = max( \\left | x_{d} \\right |, \\left | y_{d} \\right |)</div>\n<div style=\"text-align: center;\">**Chebyshev Heuristic Vector**</div>\n<div style=\"text-align: center;\">5 4 4 4 4 4<br/>5 4 3 3 3 3<br/> 5 4 3 2 2 2<br/> 5 4 3 2 1 1<br/> 5 4 3 2 1 0<br/></div>\n\n\n\n\n \n\n",
              "instructor_notes": ""
            },
            {
              "id": 614015,
              "key": "d358243c-cadf-4438-946d-750292b1b2a9",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Expansion",
              "instructor_notes": ""
            },
            {
              "id": 590552,
              "key": "e860e540-0e23-422f-9292-dd9f70442393",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "And now instead of expanding cells with lowest path cost **g**, you’ll expand cells with lowest **f** value which is the sum of the path cost **g** and the heuristic value **h** of that cell. \n\n<div class=\"mathquill\">f = g + h</div>\n\nEach cell is now represented with a quadruplet **[f,g,x,y]** instead of a triplet **[g,x,y]**. \n",
              "instructor_notes": ""
            },
            {
              "id": 590553,
              "key": "a576c20d-137f-4ff5-bbe8-54adc81e5e66",
              "title": "A*: Shortest path",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "a576c20d-137f-4ff5-bbe8-54adc81e5e66",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Define a Manhattan-based **heuristic** vector inside the Map class.",
                "Introduce an **f** value.",
                "Represent cells in terms of a quadruplet **[f,g,x,y]** and expand the ones with the lowest **f** value",
                "Print both the **expansion** vector and the **policy** vector"
              ],
              "positive_feedback": "Great Job!",
              "video_feedback": null,
              "description": "Follow these steps and make the necessary changes to find the shortest path using the A* algorithm:"
            },
            {
              "id": 614016,
              "key": "fe3d67ff-be0f-4287-8032-322a8948535d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Hint",
              "instructor_notes": ""
            },
            {
              "id": 594199,
              "key": "253b3723-ff8d-4e78-b923-fb7878c7b805",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Here's how the cells are being expanded with the **A*** algorithm until the goal is reached:\n\n|   **Map**|   **`0`** | **`1`**|**`2`**|**`3`**|**`4`**|**`5`**|         \n|--|:---: | :---:| :---:|:---:| :---: |:---:|\n| **`0`** |0|1 |0 |0 |0|0|\n| **`1`**|0|1 |0 |0 |0|0|\n| **`2`**|0|1 |0 |0 |0|0|\n| **`3`**|0|1 |0 |0 |0|0|\n| **`4`**|0|0 |0 |1 |1|0|",
              "instructor_notes": ""
            },
            {
              "id": 594198,
              "key": "f010a5f9-243f-4968-8286-73f25d557227",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Expansion #: 0<br/>\nOpen List:\n[9 0 0 0 ]\n<br/>\nCell Picked: \n[9 0 0 0]\n\n-------------------------------\n\nExpansion #: 1<br/>\nOpen List:\n[9 1 1 0 ]\n<br/>\nCell Picked: \n[9 1 1 0]\n\n-------------------------------\n\nExpansion #: 2<br/>\nOpen List:\n[9 2 2 0 ]\n<br/>\nCell Picked: \n[9 2 2 0]\n\n-------------------------------\n\nExpansion #: 3<br/>\nOpen List:\n[9 3 3 0 ]\n<br/>\nCell Picked: \n[9 3 3 0]\n\n-------------------------------\n\nExpansion #: 4<br/>\nOpen List:\n[9 4 4 0 ]\n<br/>\nCell Picked: \n[9 4 4 0]\n\n-------------------------------\n\nExpansion #: 5<br/>\nOpen List:\n[9 5 4 1 ]\n<br/>\nCell Picked: \n[9 5 4 1]\n\n-------------------------------\n\nExpansion #: 6<br/>\nOpen List:\n[9 6 4 2 ]\n<br/>\nCell Picked: \n[9 6 4 2]\n\n-------------------------------\n\nExpansion #: 7<br/>\nOpen List:\n[11 7 3 2 ]\n<br/>\nCell Picked: \n[11 7 3 2]\n\n-------------------------------\n\nExpansion #: 8<br/>\nOpen List:\n[13 8 2 2 ],\n[11 8 3 3 ]\n<br/>\nCell Picked: \n[11 8 3 3]\n\n-------------------------------\n\nExpansion #: 9<br/>\nOpen List:\n[13 9 2 3 ],\n[13 8 2 2 ],\n[11 9 3 4 ]\n<br/>\nCell Picked: \n[11 9 3 4]\n\n-------------------------------\n\nExpansion #: 10<br/>\nOpen List:\n[13 10 2 4 ],\n[13 9 2 3 ],\n[13 8 2 2 ],\n[11 10 3 5 ]\n<br/>\nCell Picked: \n[11 10 3 5]\n\n-------------------------------\n\nExpansion #: 11<br/>\nOpen List:\n[13 11 2 5 ],\n[13 10 2 4 ],\n[13 9 2 3 ],\n[13 8 2 2 ],\n[11 11 4 5 ]\n<br/>\nCell Picked: \n[11 11 4 5]\n\n-------------------------------",
              "instructor_notes": ""
            },
            {
              "id": 573538,
              "key": "0ef123e7-ef97-40ae-ac83-27be30837982",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "0ef123e7-ef97-40ae-ac83-27be30837982",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "5811452447948800",
                "initial_code_files": [
                  {
                    "text": "#include <iostream>\n#include <string.h>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\n// TODO: Add a Manhattan-based heuristic vector to the Map class\nclass Map {\npublic:\n    const static int mapWidth = 6;\n    const static int mapHeight = 5;\n    vector<vector<int> > grid = {\n        { 0, 1, 0, 0, 0, 0 },\n        { 0, 1, 0, 0, 0, 0 },\n        { 0, 1, 0, 0, 0, 0 },\n        { 0, 1, 0, 0, 0, 0 },\n        { 0, 0, 0, 1, 1, 0 }\n    };\n};\n\n// Planner class\nclass Planner : Map {\npublic:\n    int start[2] = { 0, 0 };\n    int goal[2] = { mapHeight - 1, mapWidth - 1 };\n    int cost = 1;\n\n    string movements_arrows[4] = { \"^\", \"<\", \"v\", \">\" };\n\n    vector<vector<int> > movements{\n        { -1, 0 },\n        { 0, -1 },\n        { 1, 0 },\n        { 0, 1 }\n    };\n};\n\n// Template function to print 2D vectors of any type\ntemplate <typename T>\nvoid print2DVector(T Vec)\n{\n    for (int i = 0; i < Vec.size(); ++i) {\n        for (int j = 0; j < Vec[0].size(); ++j) {\n            cout << Vec[i][j] << ' ';\n        }\n        cout << endl;\n    }\n}\n\n/* #### TODO: Modify the search function and implement the A* algorithm #### */\nvoid search(Map map, Planner planner)\n{\n    // Create a closed 2 array filled with 0s and first element 1\n    vector<vector<int> > closed(map.mapHeight, vector<int>(map.mapWidth));\n    closed[planner.start[0]][planner.start[1]] = 1;\n\n    // Create expand array filled with -1\n    vector<vector<int> > expand(map.mapHeight, vector<int>(map.mapWidth, -1));\n\n    // Create action array filled with -1\n    vector<vector<int> > action(map.mapHeight, vector<int>(map.mapWidth, -1));\n\n    // Defined the triplet values\n    int x = planner.start[0];\n    int y = planner.start[1];\n    int g = 0;\n\n    // Store the expansions\n    vector<vector<int> > open;\n    open.push_back({ g, x, y });\n\n    // Flags and counters\n    bool found = false;\n    bool resign = false;\n    int count = 0;\n\n    int x2;\n    int y2;\n\n    // While I am still searching for the goal and the problem is solvable\n    while (!found && !resign) {\n        // Resign if no values in the open list and you can't expand anymore\n        if (open.size() == 0) {\n            resign = true;\n            cout << \"Failed to reach a goal\" << endl;\n        }\n        // Keep expanding\n        else {\n            // Remove triplets from the open list\n            sort(open.begin(), open.end());\n            reverse(open.begin(), open.end());\n            vector<int> next;\n            // Stored the poped value into next\n            next = open.back();\n            open.pop_back();\n\n            x = next[1];\n            y = next[2];\n            g = next[0];\n\n            // Fill the expand vectors with count\n            expand[x][y] = count;\n            count += 1;\n\n            // Check if we reached the goal:\n            if (x == planner.goal[0] && y == planner.goal[1]) {\n                found = true;\n                //cout << \"[\" << g << \", \" << x << \", \" << y << \"]\" << endl;\n            }\n\n            //else expand new elements\n            else {\n                for (int i = 0; i < planner.movements.size(); i++) {\n                    x2 = x + planner.movements[i][0];\n                    y2 = y + planner.movements[i][1];\n                    if (x2 >= 0 && x2 < map.grid.size() && y2 >= 0 && y2 < map.grid[0].size()) {\n                        if (closed[x2][y2] == 0 and map.grid[x2][y2] == 0) {\n                            int g2 = g + planner.cost;\n                            open.push_back({ g2, x2, y2 });\n                            closed[x2][y2] = 1;\n                            action[x2][y2] = i;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    // Print the expansion List\n    //print2DVector(expand);\n\n    // Find the path with robot orientation\n    vector<vector<string> > policy(map.mapHeight, vector<string>(map.mapWidth, \"-\"));\n\n    // Going backward\n    x = planner.goal[0];\n    y = planner.goal[1];\n    policy[x][y] = '*';\n\n    while (x != planner.start[0] or y != planner.start[1]) {\n        x2 = x - planner.movements[action[x][y]][0];\n        y2 = y - planner.movements[action[x][y]][1];\n        policy[x2][y2] = planner.movements_arrows[action[x][y]];\n        x = x2;\n        y = y2;\n    }\n\n    // Print the path with arrows\n    print2DVector(policy);\n}\n\nint main()\n{\n    // Instantiate map and planner objects\n    Map map;\n    Planner planner;\n\n    // Search for the expansions\n    search(map, planner);\n\n    return 0;\n}\n",
                    "name": "main.cpp"
                  },
                  {
                    "text": "#include <iostream>\n#include <string.h>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\n// Map class\nclass Map {\npublic:\n    const static int mapWidth = 6;\n    const static int mapHeight = 5;\n    vector<vector<int> > grid = {\n        { 0, 1, 0, 0, 0, 0 },\n        { 0, 1, 0, 0, 0, 0 },\n        { 0, 1, 0, 0, 0, 0 },\n        { 0, 1, 0, 0, 0, 0 },\n        { 0, 0, 0, 1, 1, 0 }\n    };\n\n    vector<vector<int> > heuristic = {\n        { 9, 8, 7, 6, 5, 4 },\n        { 8, 7, 6, 5, 4, 3 },\n        { 7, 6, 5, 4, 3, 2 },\n        { 6, 5, 4, 3, 2, 1 },\n        { 5, 4, 3, 2, 1, 0 }\n    };\n};\n\n// Planner class\nclass Planner : Map {\npublic:\n    int start[2] = { 0, 0 };\n    int goal[2] = { mapHeight - 1, mapWidth - 1 };\n    int cost = 1;\n\n    string movements_arrows[4] = { \"^\", \"<\", \"v\", \">\" };\n\n    vector<vector<int> > movements{\n        { -1, 0 },\n        { 0, -1 },\n        { 1, 0 },\n        { 0, 1 }\n    };\n};\n\n// Template function to print 2D vectors of any type\ntemplate <typename T>\nvoid print2DVector(T Vec)\n{\n    for (int i = 0; i < Vec.size(); ++i) {\n        for (int j = 0; j < Vec[0].size(); ++j) {\n            cout << Vec[i][j] << ' ';\n        }\n        cout << endl;\n    }\n}\n\n// Search function will generate the expansions\nvoid search(Map map, Planner planner)\n{\n    // Create a closed 2 array filled with 0s and first element 1\n    vector<vector<int> > closed(map.mapHeight, vector<int>(map.mapWidth));\n    closed[planner.start[0]][planner.start[1]] = 1;\n\n    // Create expand array filled with -1\n    vector<vector<int> > expand(map.mapHeight, vector<int>(map.mapWidth, -1));\n\n    // Create action array filled with -1\n    vector<vector<int> > action(map.mapHeight, vector<int>(map.mapWidth, -1));\n\n    // Defined the quadruplet values\n    int x = planner.start[0];\n    int y = planner.start[1];\n    int g = 0;\n    int f = g + map.heuristic[x][y];\n\n    // Store the expansions\n    vector<vector<int> > open;\n    open.push_back({ f, g, x, y });\n\n    // Flags and Counts\n    bool found = false;\n    bool resign = false;\n    int count = 0;\n\n    int x2;\n    int y2;\n\n    // While I am still searching for the goal and the problem is solvable\n    while (!found && !resign) {\n        // Resign if no values in the open list and you can't expand anymore\n        if (open.size() == 0) {\n            resign = true;\n            cout << \"Failed to reach a goal\" << endl;\n        }\n        // Keep expanding\n        else {\n            // Remove quadruplets from the open list\n            sort(open.begin(), open.end());\n            reverse(open.begin(), open.end());\n            vector<int> next;\n            // Stored the poped value into next\n            next = open.back();\n            open.pop_back();\n\n            x = next[2];\n            y = next[3];\n            g = next[1];\n\n            // Fill the expand vectors with count\n            expand[x][y] = count;\n            count += 1;\n            \n            // Check if we reached the goal:\n            if (x == planner.goal[0] && y == planner.goal[1]) {\n                found = true;\n                //cout << \"[\" << g << \", \" << x << \", \" << y << \"]\" << endl;\n            }\n\n            //else expand new elements\n            else {\n                for (int i = 0; i < planner.movements.size(); i++) {\n                    x2 = x + planner.movements[i][0];\n                    y2 = y + planner.movements[i][1];\n                    if (x2 >= 0 && x2 < map.grid.size() && y2 >= 0 && y2 < map.grid[0].size()) {\n                        if (closed[x2][y2] == 0 and map.grid[x2][y2] == 0) {\n                            int g2 = g + planner.cost;\n                            f = g2 + map.heuristic[x2][y2];\n                            open.push_back({ f, g2, x2, y2 });\n                            closed[x2][y2] = 1;\n                            action[x2][y2] = i;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    // Print the expansion List\n    print2DVector(expand);\n\n    // Find the path with robot orientation\n    vector<vector<string> > policy(map.mapHeight, vector<string>(map.mapWidth, \"-\"));\n\n    // Going backward\n    x = planner.goal[0];\n    y = planner.goal[1];\n    policy[x][y] = '*';\n\n    while (x != planner.start[0] or y != planner.start[1]) {\n        x2 = x - planner.movements[action[x][y]][0];\n        y2 = y - planner.movements[action[x][y]][1];\n        policy[x2][y2] = planner.movements_arrows[action[x][y]];\n        x = x2;\n        y = y2;\n    }\n\n    // Print the robot path\n    cout << endl; \n    print2DVector(policy);\n}\n\nint main()\n{\n    // Instantiate a planner and map objects\n    Map map;\n    Planner planner;\n\n    search(map, planner);\n\n    return 0;\n}",
                    "name": "solution.cpp"
                  }
                ]
              },
              "answer": null
            }
          ]
        },
        {
          "id": 590547,
          "key": "bfa42bea-e5a8-4cc6-b596-0aa67f812760",
          "title": "Comparison",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "bfa42bea-e5a8-4cc6-b596-0aa67f812760",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 614017,
              "key": "6f2467e7-dd5d-4ccd-b8ef-f4b597f001ed",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Comparison",
              "instructor_notes": ""
            },
            {
              "id": 590569,
              "key": "8fa19a6d-2f34-422a-88ff-dc16a9ee7227",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Now that you’ve coded both the **BFS** and **A*** algorithms, let’s take a closer look at their expansion list and compare them. ",
              "instructor_notes": ""
            },
            {
              "id": 591132,
              "key": "3024d08b-caf6-476b-8a41-5590e4035f45",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "<h2 style=\"text-align: center;\">BFS</h12>",
              "instructor_notes": ""
            },
            {
              "id": 613964,
              "key": "1ad8eac3-4f01-43b6-a34e-92fd6fcda536",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/April/5ada5e7f_screen-shot-2018-04-20-at-2.37.58-pm/screen-shot-2018-04-20-at-2.37.58-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/1ad8eac3-4f01-43b6-a34e-92fd6fcda536",
              "caption": "",
              "alt": "",
              "width": 153,
              "height": 105,
              "instructor_notes": null
            },
            {
              "id": 591133,
              "key": "781326b5-0f00-4d7d-ba2a-a6ead7dc6e42",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "<h2 style=\"text-align: center;\">A*</h2>",
              "instructor_notes": ""
            },
            {
              "id": 613966,
              "key": "27ab6e52-0981-48f0-b36a-68eb5a8af214",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/April/5ada5f25_screen-shot-2018-04-20-at-2.43.34-pm/screen-shot-2018-04-20-at-2.43.34-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/27ab6e52-0981-48f0-b36a-68eb5a8af214",
              "caption": "",
              "alt": "",
              "width": 147,
              "height": 105,
              "instructor_notes": null
            },
            {
              "id": 591134,
              "key": "c5b8393e-1f65-487b-ad0a-732105cb80ad",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "<h2 style=\"text-align: center;\">Path</h2>",
              "instructor_notes": ""
            },
            {
              "id": 591131,
              "key": "f9280314-e2c9-45d1-8c42-a45a57c3eb28",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/April/5ac5475c_screen-shot-2018-04-04-at-2.39.43-pm/screen-shot-2018-04-04-at-2.39.43-pm.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/f9280314-e2c9-45d1-8c42-a45a57c3eb28",
              "caption": "",
              "alt": "",
              "width": 118,
              "height": 108,
              "instructor_notes": null
            },
            {
              "id": 614018,
              "key": "489f166e-d2aa-4a59-8050-83e6cd85ad81",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Result",
              "instructor_notes": ""
            },
            {
              "id": 614019,
              "key": "43e01a83-9615-44eb-a38c-04a05a60749e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "You can clearly see that **A\\***  is more efficient since it did not expand in the free space as BFS did. With A\\* we reached the goal with only 11 expansions compared to 20 with BFS. ",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 573539,
          "key": "af222d51-9824-4d9c-8a27-e508bf809186",
          "title": "A*: Real-World Map",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "af222d51-9824-4d9c-8a27-e508bf809186",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 614021,
              "key": "f0e2654b-87ab-498d-b079-6d55cdd87813",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# A*: Real-World Map",
              "instructor_notes": ""
            },
            {
              "id": 591144,
              "key": "db940910-171c-4aed-9b79-b7f19c67a9fb",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Now it’s time to apply the A\\*  algorithm that you’ve coded earlier to a real-world map. \n",
              "instructor_notes": ""
            },
            {
              "id": 591137,
              "key": "b5d61dec-4cb6-4bb3-b51a-acc61fc45d6f",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/April/5ac54818_path-2/path-2.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/b5d61dec-4cb6-4bb3-b51a-acc61fc45d6f",
              "caption": "",
              "alt": "",
              "width": 800,
              "height": 600,
              "instructor_notes": null
            },
            {
              "id": 591145,
              "key": "51c29e50-7fcf-4a35-bda0-9abed3f2fcbe",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "If you recall, this map is the one you generated with the occupancy grid mapping algorithm using both sonar and odometry data. Our aim is now to find the shortest path for the robot to cross from start <span style=\"color:blue\">**o**</span> to goal <span style=\"color:blue\">*****</span> position. ",
              "instructor_notes": ""
            },
            {
              "id": 591146,
              "key": "ff3637eb-e3da-489f-830c-b87186e40ae2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Given\n**Map(`300x150`)**: The map data stored in the `map.txt` file in form of log odds values. As a reminder, here's how you should interpret these numbers:\n* A cell is considered **unknown** if its log odds value is **equal to 0**. \n* A cell is considered as **occupied** if its log odds is **larger than 0**.\n* A cell is considered as **free** if its log odds value is **less than 0**. \n\n**Grid(`300x150`)**: The log odds values converted to 0’s and 1’s where **0** represents the **free** space and **1** represents the **occupied** or **unknown** space. \n\n**Robot Start position:** `230,145`\n\n**Robot Goal Position:** `60,50`\n\n**Direction of Movement:** Up(`-1,0`) - left(`0,-1`) - down(`1,0`) - right(`0,1`)\n\n**Movement Arrows:**  Up(`^`) - left(`<`) - down(`v`) - right(`>`)\n\n**Cost of Movement:** `1`\n\n**Heuristic Vector:** `Manhattan`\n\n",
              "instructor_notes": ""
            },
            {
              "id": 591147,
              "key": "d2b94e73-648d-4d90-9f81-e4c2b1aaec98",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "If you scroll down to the code, you will notice that I added three new functions to the Map class. I coded a `GetMap` function which reads the `map.txt` log odds values and assign them the `map` variable. You will code the `MapToGrid` function in order to convert the log odds values to 0’s and 1’s. These 0 and 1 values will be assigned to the `grid` variable. And finally, the `GeneratedHeuristic` function is another function that you have to code in order to generate a Manhattan-based heuristic vector by computing the Manhattan distance of each cell with respect to the goal position. As a reminder the Manhattan distance of each cell can be calculated as follow:\n<div class=\"mathquill\">x_{d} = x_{goal} - x_{cellposition}</div>\n<div class=\"mathquill\">y_{d} = y_{goal} - y_{cellposition}</div>\n<div  class=\"mathquill\">Manhattan \\ distance \\ d = \\left | x_{d}  \\right | + \\left | y_{d}  \\right |</div>\n",
              "instructor_notes": ""
            },
            {
              "id": 591148,
              "key": "2252e7be-2afd-44a1-8fa4-0559782a6008",
              "title": "A*: Real-World Map",
              "semantic_type": "TaskListAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "2252e7be-2afd-44a1-8fa4-0559782a6008",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "tasks": [
                "Edit the `mapHeight` value inside the **Map** class.",
                "Edit the `mapWidth` value inside the **Map** class.",
                "Code the `MapToGrid` function.",
                "Code the `GenerateHeuristic` function to generate a Manhattan-based heuristic vector",
                "Edit the `start` value inside the **Planner** class.",
                "Edit the `goal` value inside the **Planner** class.",
                "Print the **policy** vector"
              ],
              "positive_feedback": "Great Job!",
              "video_feedback": null,
              "description": "Follow these instructions to generate the shortest path using the A* algorithm:"
            },
            {
              "id": 573541,
              "key": "a1df862d-b091-4ec9-9c02-e4d00dbece97",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "a1df862d-b091-4ec9-9c02-e4d00dbece97",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "6683073110999040",
                "initial_code_files": [
                  {
                    "text": "#include <iostream>\n#include <math.h>\n#include <vector>\n#include <algorithm>\n#include <fstream>\n\nusing namespace std;\n\n// Map class\nclass Map {\npublic:\n    const static int mapHeight = /* #### TODO: mapHeight #### */\n    const static int mapWidth = /* #### TODO: mapWidth #### */\n    vector<vector<double> > map = GetMap();\n    vector<vector<int> > grid = MaptoGrid();\n    vector<vector<int> > heuristic = GenerateHeuristic();\n\nprivate:\n    // Read the file and get the map\n    vector<vector<double> > GetMap()\n    {\n        vector<vector<double> > mymap(mapHeight, vector<double>(mapWidth));\n        ifstream myReadFile;\n        myReadFile.open(\"map.txt\");\n\n        while (!myReadFile.eof()) {\n            for (int i = 0; i < mapHeight; i++) {\n                for (int j = 0; j < mapWidth; j++) {\n                    myReadFile >> mymap[i][j];\n                }\n            }\n        }\n        return mymap;\n    }\n\n    /* #### TODO: Code the MaptoGrid function and convert the map to 1's and 0's #### */\n    vector<vector<int> > MaptoGrid()\n    {\n        vector<vector<int> > grid(mapHeight, vector<int>(mapWidth));\n        /* Here's how you interpret the data stored inside map\n           0:unkown \n          <0:free \n          >0:occupied\n        */\n        /* You need to convert these data to 0's and 1's and assigned it to grid where:\n           0: Free Space\n           1: Occupied + Unkown Space\n        */\n        return grid;\n    }\n\n    /* #### TODO: Generate a Manhttan Heuristic Vector #### */\n    vector<vector<int> > GenerateHeuristic()\n    {\n        int goal[2] = { 60, 50 };\n        vector<vector<int> > heuristic(mapHeight, vector<int>(mapWidth));\n        // Generate a Manhattan heursitic vector\n        return heuristic;\n    }\n};\n\n// Planner class\nclass Planner : Map {\npublic:\n    int start[2] = /* #### TODO: start #### */\n    int goal[2] = /* #### TODO: goal #### */\n    int cost = 1;\n\n    string movements_arrows[4] = { \"^\", \"<\", \"v\", \">\" };\n\n    vector<vector<int> > movements{\n        { -1, 0 },\n        { 0, -1 },\n        { 1, 0 },\n        { 0, 1 }\n    };\n\n    vector<vector<int> > path;\n};\n\n// Printing vectors of any type\ntemplate <typename T>\nvoid print2DVector(T Vec)\n{\n    for (int i = 0; i < Vec.size(); ++i) {\n        for (int j = 0; j < Vec[0].size(); ++j) {\n            cout << Vec[i][j] << ' ';\n        }\n        cout << endl;\n    }\n}\n\nPlanner search(Map map, Planner planner)\n{\n    // Create a closed 2 array filled with 0s and first element 1\n    vector<vector<int> > closed(map.mapHeight, vector<int>(map.mapWidth));\n    closed[planner.start[0]][planner.start[1]] = 1;\n\n    // Create expand array filled with -1\n    vector<vector<int> > expand(map.mapHeight, vector<int>(map.mapWidth, -1));\n\n    // Create action array filled with -1\n    vector<vector<int> > action(map.mapHeight, vector<int>(map.mapWidth, -1));\n\n    // Defined the quadruplet values\n    int x = planner.start[0];\n    int y = planner.start[1];\n    int g = 0;\n    int f = g + map.heuristic[x][y];\n\n    // Store the expansions\n    vector<vector<int> > open;\n    open.push_back({ f, g, x, y });\n\n    // Flags and Counts\n    bool found = false;\n    bool resign = false;\n    int count = 0;\n\n    int x2;\n    int y2;\n\n    // While I am still searching for the goal and the problem is solvable\n    while (!found && !resign) {\n        // Resign if no values in the open list and you can't expand anymore\n        if (open.size() == 0) {\n            resign = true;\n            cout << \"Failed to reach a goal\" << endl;\n        }\n        // Keep expanding\n        else {\n            // Remove quadruplets from the open list\n            sort(open.begin(), open.end());\n            reverse(open.begin(), open.end());\n            vector<int> next;\n            // Stored the poped value into next\n            next = open.back();\n            open.pop_back();\n\n            x = next[2];\n            y = next[3];\n            g = next[1];\n\n            // Fill the expand vectors with count\n            expand[x][y] = count;\n            count += 1;\n            \n\n            // Check if we reached the goal:\n            if (x == planner.goal[0] && y == planner.goal[1]) {\n                found = true;\n                //cout << \"[\" << g << \", \" << x << \", \" << y << \"]\" << endl;\n            }\n\n            //else expand new elements\n            else {\n                for (int i = 0; i < planner.movements.size(); i++) {\n                    x2 = x + planner.movements[i][0];\n                    y2 = y + planner.movements[i][1];\n                    if (x2 >= 0 && x2 < map.grid.size() && y2 >= 0 && y2 < map.grid[0].size()) {\n                        if (closed[x2][y2] == 0 and map.grid[x2][y2] == 0) {\n                            int g2 = g + planner.cost;\n                            f = g2 + map.heuristic[x2][y2];\n                            open.push_back({ f, g2, x2, y2 });\n                            closed[x2][y2] = 1;\n                            action[x2][y2] = i;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    // Print the expansion List\n    //print2DVector(expand);\n\n    // Find the path with robot orientation\n    vector<vector<string> > policy(map.mapHeight, vector<string>(map.mapWidth, \"-\"));\n\n    // Going backward\n    x = planner.goal[0];\n    y = planner.goal[1];\n    policy[x][y] = '*';\n\n    while (x != planner.start[0] or y != planner.start[1]) {\n        x2 = x - planner.movements[action[x][y]][0];\n        y2 = y - planner.movements[action[x][y]][1];\n        // Store the  Path in a vector\n        planner.path.push_back({ x2, y2 });\n        policy[x2][y2] = planner.movements_arrows[action[x][y]];\n        x = x2;\n        y = y2;\n    }\n\n    // Print the robot path\n    //cout << endl;\n    //print2DVector(policy);\n\n    return planner;\n}\n\nint main()\n{\n    // Instantiate a planner and map objects\n    Map map;\n    Planner planner;\n    // Generate the shortest Path using the Astar algorithm\n    planner = search(map, planner);\n\n    return 0;\n}\n",
                    "name": "main.cpp"
                  },
                  {
                    "text": "0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t18.8\t18.8\t18.8\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t18.8\t19.2\t19.6\t19.6\t20\t20\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t19.2\t19.6\t20\t20.8\t-16.8\t-16.8\t-16.8\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t18.8\t19.6\t20\t20.8\t-16.8\t-18.4\t-18\t-18.8\t-18.8\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t18.8\t19.6\t20.8\t-16.8\t-18\t-18.8\t-19.2\t-20\t-20\t-20\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t20\t20.8\t-16.4\t-18.8\t-20\t-20\t-20\t-20.8\t-20.8\t-20.8\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t19.6\t20.8\t-16.4\t-18.4\t-20\t-20\t-20.8\t-21.6\t-21.6\t-21.6\t-21.6\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t18.8\t20.8\t21.2\t-18.4\t-20\t-20.8\t-21.6\t-21.6\t-21.6\t-21.6\t-21.6\t-21.6\t0.4\t0.4\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t20.4\t21.2\t-16.8\t-20\t-20.8\t-21.6\t-21.6\t-21.6\t-21.6\t-21.6\t-21.6\t-21.2\t1.2\t0.8\t0.8\t0.4\t0.4\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t20.8\t21.6\t-20\t-20.8\t-21.6\t-21.6\t-21.6\t-21.6\t-21.2\t-20.8\t-20.8\t-20.8\t0.8\t0.8\t1.6\t1.2\t0.8\t0.4\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t19.2\t21.6\t-16\t-20.8\t-21.6\t-21.6\t-21.6\t-21.2\t-20.8\t-20.4\t-20.4\t-20.4\t-20.8\t-1.11022e-16\t0.4\t0.4\t1.2\t1.6\t1.2\t0.8\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t20.8\t21.6\t-19.2\t-21.6\t-21.6\t-21.6\t-21.2\t-20.4\t-20.4\t-20.8\t-21.2\t-21.2\t-21.2\t-0.4\t-0.4\t-0.4\t-1.11022e-16\t0.4\t2\t1.2\t0.8\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t21.6\t21.6\t-20.8\t-21.6\t-21.6\t-21.2\t-20.4\t-20\t-21.2\t-20.8\t-21.6\t-21.2\t-22\t-1.2\t-0.4\t-0.8\t-1.11022e-16\t-0.4\t0.8\t2\t1.2\t0.4\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t21.6\t21.6\t-21.6\t-21.6\t-21.2\t-20.4\t-19.6\t-20.8\t-21.2\t-21.6\t-22.4\t-22.4\t-22.4\t-1.6\t-1.6\t-1.6\t-0.8\t-0.4\t-1.11022e-16\t2\t2\t1.2\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0.4\t21.6\t20.8\t-21.6\t-21.6\t-20.8\t-20\t-20\t-21.2\t-22.4\t-22.8\t-22.8\t-23.2\t-4\t-21.6\t-2.4\t-1.6\t-2\t-1.6\t-0.4\t0.8\t2.4\t1.6\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0.8\t21.6\t20\t-21.6\t-21.6\t-20.4\t-19.2\t-20.8\t-22\t-22.4\t-23.2\t-23.6\t-23.6\t-3.6\t-23.2\t-2.8\t-2.8\t-2.4\t-1.6\t-1.2\t-1.11022e-16\t3.2\t2\t0.4\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t1.2\t2\t19.2\t17.6\t-21.2\t-19.6\t-19.2\t-21.2\t-22.4\t-23.6\t-23.6\t-23.6\t-4.4\t-3.6\t-23.2\t-23.6\t-2.8\t-2.8\t-2.8\t-2.4\t-0.4\t1.6\t2.8\t1.2\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0.8\t1.6\t20\t18.4\t-20.8\t-18.8\t-19.6\t-22.4\t-23.2\t-23.2\t-24\t-5.2\t-4.4\t-4.8\t-24\t-24.8\t-22.8\t-4\t-2.8\t-2.4\t-1.6\t1.2\t3.6\t1.6\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0.4\t1.2\t20.8\t-18.4\t-20.4\t-18.4\t-20\t-22.8\t-23.2\t-24\t-25.2\t-6\t-6\t-6.4\t-26\t-26.4\t-25.2\t-5.2\t-4\t-3.2\t-2\t1.6\t4\t1.6\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t-18\t-17.6\t-20.8\t-19.2\t-17.6\t-20.8\t-23.2\t-23.6\t-25.6\t-6.8\t-5.2\t-5.2\t-5.2\t-25.2\t-25.2\t-25.6\t-25.2\t-5.6\t-3.6\t-3.2\t1.2\t4.4\t2.4\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t-19.2\t-19.6\t-18.8\t-18.4\t-20.8\t-19.2\t-17.2\t-20\t-23.6\t-26\t-25.6\t-6\t-5.6\t-6.4\t-6\t-26\t-26\t-26.4\t-26\t-5.6\t-6\t-3.2\t0.8\t4.4\t1.6\t-0.4\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t-19.2\t-19.6\t-20\t-20.4\t-19.6\t-20\t-21.6\t-20\t-16\t-18.4\t-24.8\t-25.2\t-7.2\t-6.8\t-7.2\t-7.6\t-7.2\t-27.2\t-27.2\t-27.6\t-26.8\t-24\t-5.2\t-4.8\t1.6\t4.8\t0.4\t-0.8\t-0.8\t-0.4\t-0.4\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t19.2\t-19.6\t-20\t-20.4\t-20.4\t-20.8\t-20.4\t-20.8\t-20.8\t-19.2\t-15.6\t-17.6\t-24.4\t-26.4\t-7.6\t-7.6\t-7.6\t-8.4\t-8\t-28\t-28\t-27.2\t-26.4\t-25.6\t-6\t-4\t0.8\t4.4\t1.2\t-1.2\t-1.2\t-0.8\t-0.8\t-0.4\t-0.4\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t19.6\t20\t-20.4\t-20.4\t-20.8\t-20.8\t-21.2\t-21.2\t-21.6\t-21.6\t-19.2\t-15.6\t-18.8\t-23.6\t-6.8\t-7.2\t-8\t-8.4\t-8.4\t-8.4\t-28\t-28.4\t-28.4\t-27.2\t-27.6\t-25.2\t-3.6\t1.6\t4.8\t0.8\t-1.6\t-1.6\t-1.2\t-1.2\t-0.8\t-0.8\t-0.4\t-0.4\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t6\t20.4\t20\t-20.8\t-21.2\t-21.2\t-21.6\t-21.6\t-21.6\t-21.6\t-20\t-15.6\t-16\t-5.2\t-5.6\t-7.6\t-8\t-9.2\t-9.2\t-9.2\t-29.2\t-29.2\t-29.2\t-28.4\t-26.8\t-25.6\t-21.6\t3.2\t4.4\t1.2\t-1.6\t-1.6\t-1.6\t-1.6\t-1.2\t-1.2\t-0.8\t-0.8\t-0.4\t0.4\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t20.4\t21.2\t18.8\t-21.6\t-21.6\t-21.6\t-21.6\t-21.6\t-21.6\t-19.6\t-15.6\t-17.2\t-3.2\t-5.2\t-6.4\t-8.4\t-9.2\t-9.6\t-9.6\t-30.4\t-29.6\t-28.8\t-27.6\t-26.4\t-25.2\t-22.4\t2.4\t4.8\t0.8\t-1.6\t-1.6\t-1.6\t-1.6\t-1.6\t-1.6\t-1.2\t-1.2\t-0.8\t0.8\t0.4\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0.8\t21.6\t21.6\t-20\t-21.6\t-21.6\t-21.6\t-21.6\t-21.6\t-19.2\t-15.6\t0.4\t-3.6\t-4.8\t-5.6\t-7.2\t-8.8\t-8\t-8.8\t-28.8\t-28.8\t-28.8\t-27.6\t-25.6\t-24.8\t-23.6\t-17.2\t5.2\t1.6\t-1.6\t-1.6\t-1.6\t-1.6\t-1.6\t-1.6\t-1.6\t-0.8\t1.2\t1.2\t0.4\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t1.2\t21.6\t21.6\t-21.6\t-21.6\t-21.6\t-21.6\t-21.6\t-18.8\t-16\t-1.11022e-16\t-2.8\t-4.4\t-6.8\t-7.6\t-7.6\t-8\t-8.8\t-28.8\t-28\t-28.4\t-28.4\t-26.8\t-25.2\t-22.8\t-20\t4.8\t2\t-1.6\t-1.6\t-1.6\t-1.6\t-1.6\t-1.6\t-0.8\t0.8\t1.6\t0.8\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t6.8\t21.6\t20.8\t-21.6\t-21.6\t-21.6\t-21.6\t-18\t2.8\t-1.11022e-16\t-1.6\t-4\t-6.4\t-8\t-8.4\t-8.4\t-8.8\t-28.8\t-28.8\t-29.2\t-28\t-26.8\t-24.4\t-22\t-20.8\t-14.4\t2.8\t-1.6\t-1.6\t-1.6\t-1.6\t-1.6\t-1.6\t0.8\t1.6\t1.2\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t7.6\t21.6\t20\t16\t-21.6\t-21.6\t0.4\t3.6\t-0.4\t-2\t-4\t-6\t-7.6\t-8\t-7.6\t-8\t-27.6\t-27.2\t-27.6\t-26.8\t-26.4\t-24.8\t-23.2\t-21.6\t-14.8\t-14.4\t-1.6\t-1.6\t-1.6\t-1.6\t-1.6\t-0.8\t1.6\t1.2\t0.4\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t2.8\t21.6\t20.8\t16.8\t-21.6\t1.2\t4.4\t-0.8\t-3.6\t-4.4\t-6\t-6.8\t-6\t-7.2\t-8\t-28\t-28\t-26.4\t-26.8\t-25.2\t-24.4\t-24.8\t-22.4\t-14\t-15.6\t-1.6\t-1.6\t-1.6\t-1.6\t-0.8\t1.6\t1.6\t0.4\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t2.4\t21.6\t21.6\t0.4\t2\t4.4\t-1.11022e-16\t-4\t-5.6\t-4.8\t-4.8\t-6\t-7.6\t-7.2\t-27.6\t-28\t-26.8\t-26\t-25.6\t-24.4\t-24\t-22.8\t-14.4\t-15.6\t-19.6\t-1.6\t-1.6\t0\t1.6\t1.6\t0.8\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t1.2\t7.6\t1.6\t2\t4.4\t1.6\t-3.6\t-4\t-6\t-6.8\t-7.2\t-7.2\t-7.2\t-27.2\t-27.2\t-27.6\t-26.8\t-27.6\t-25.6\t-24\t-21.2\t-14\t-15.6\t-20.8\t-1.6\t0\t1.6\t1.6\t0.8\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0.8\t1.2\t0\t4.4\t4.8\t-3.2\t-4\t-6.4\t-7.6\t-8\t-8.4\t-8\t-28.8\t-28.8\t-28.4\t-28\t-26.8\t-26\t-23.2\t-20.4\t-13.6\t21.2\t19.2\t19.2\t1.6\t1.6\t0.8\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t-1.2\t3.6\t6.4\t-1.6\t-4\t-6.8\t-7.2\t-8\t-8.4\t-9.2\t-29.2\t-28.4\t-28.4\t-27.6\t-28\t-26\t13.6\t18.4\t26.8\t25.2\t20.8\t2.8\t1.2\t0.4\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t-0.4\t-0.8\t-1.2\t2.4\t6\t1.2\t-4\t-6\t-7.2\t-7.2\t-8.8\t-9.2\t-22\t-22\t5.2\t8.4\t11.6\t13.2\t17.2\t20.8\t28\t7.6\t1.6\t0.8\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t-0.4\t-1.2\t-1.2\t2\t5.2\t2\t-4\t-4.8\t-6.8\t-8\t-8.8\t-8.4\t11.6\t11.2\t11.2\t12\t14.4\t17.6\t0.8\t2.4\t8.8\t5.6\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t-0.4\t-1.2\t-1.2\t-1.2\t2\t5.2\t2\t-3.2\t-4.4\t-6\t-7.2\t-7.6\t-8.4\t8.8\t8.8\t-4.8\t-4.8\t-5.2\t-2.8\t-1.6\t-0.4\t6.8\t4.8\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t-0.8\t-1.2\t-1.2\t-1.2\t1.2\t4.8\t3.6\t-2.8\t-5.6\t-6.4\t-7.6\t-8.4\t-8\t-7.2\t-7.2\t-7.2\t-6.8\t-6.4\t-5.2\t-3.6\t1.6\t7.2\t4.8\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t-0.4\t-1.2\t-1.2\t-1.2\t-1.2\t0.4\t4.8\t2.8\t-2.8\t-5.2\t-6.8\t-7.2\t-7.6\t-8.4\t-8\t-7.2\t-7.2\t-7.6\t-6.4\t-5.2\t-3.2\t-1.11022e-16\t7.2\t4.8\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t-0.8\t-1.2\t-1.2\t-1.2\t-1.2\t0.4\t4\t2.4\t-2.4\t-5.6\t-5.6\t-6.4\t-6.4\t-7.6\t-6.8\t-6.8\t-6\t-6\t-5.6\t-5.6\t-3.2\t-1.2\t6.4\t4.4\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t-0.4\t-1.2\t-1.2\t-1.2\t-1.2\t-1.2\t0.8\t4\t2\t-2.8\t-3.6\t-4.8\t-5.6\t-6.8\t-6.4\t-6\t-6.4\t-6.4\t-5.6\t-4.8\t-3.6\t-2.8\t-0.8\t6\t4.8\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t-0.4\t-0.8\t-1.2\t-1.2\t-1.2\t-1.2\t-1.2\t-1.11022e-16\t3.6\t3.6\t-2.4\t-3.2\t-4\t-4.8\t-6\t-6.4\t-6.8\t-6.8\t-7.2\t-4.8\t-4.8\t-4.8\t-2.4\t-1.2\t6\t4.8\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t-0.4\t-1.2\t-1.2\t-1.2\t-1.2\t-1.2\t-1.2\t-1.2\t3.2\t5.2\t-2\t-3.2\t-4.4\t-6.8\t-6\t-6.8\t-6.4\t-6.4\t-6.4\t-6.8\t-5.2\t-4\t-3.2\t-1.11022e-16\t6.4\t4.4\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t-0.4\t-1.2\t-1.2\t-1.2\t-1.2\t-1.2\t-1.2\t-1.2\t-1.2\t2.4\t4.8\t-1.11022e-16\t-2.4\t-5.2\t-6\t-7.2\t-7.6\t-7.2\t-7.2\t-7.2\t-6.8\t-6.4\t-5.6\t-3.2\t-1.11022e-16\t6.8\t4.4\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t-0.8\t-1.2\t-1.2\t-1.2\t-1.2\t-1.2\t-1.2\t-1.2\t-1.2\t2.4\t5.6\t0.4\t-4\t-5.6\t-6.4\t-7.2\t-7.6\t-7.2\t-7.2\t-7.2\t-6.4\t-6\t-5.2\t-3.6\t0.4\t7.2\t4\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t-0.4\t-1.2\t-1.2\t-1.2\t-1.2\t-1.2\t-1.2\t-1.2\t-1.2\t-1.2\t2\t5.6\t0.8\t-4\t-5.2\t-5.6\t-6.8\t-7.6\t-8\t-8\t-7.2\t-7.2\t-6\t-4.8\t-4\t-1.2\t7.2\t4.8\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t-0.8\t-1.2\t-1.2\t-1.2\t-1.2\t-1.2\t-1.2\t-1.2\t-1.2\t-1.6\t2.8\t5.2\t1.2\t-2.8\t-5.2\t-6.8\t-8\t-8.8\t-8.4\t-8.4\t-8.4\t-7.2\t-7.2\t-6\t-3.2\t-1.2\t6.8\t4.8\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t-0.4\t-1.2\t-1.2\t-1.2\t-1.2\t-1.2\t-1.2\t-1.2\t-1.2\t-1.2\t-1.6\t3.2\t5.6\t-1.11022e-16\t-3.2\t-6\t-7.2\t-8.4\t-8\t-7.2\t-7.2\t-7.6\t-8\t-6.4\t-5.6\t-3.6\t-1.2\t7.2\t4.8\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t-0.4\t-1.2\t-1.2\t-1.2\t-1.2\t-1.2\t-1.2\t-1.2\t-1.2\t-1.2\t-1.2\t-1.2\t2.4\t5.6\t0.4\t-4.8\t-5.6\t-6.4\t-6.4\t-7.2\t-6.8\t-6.8\t-6.8\t-6\t-6\t-5.6\t-4.8\t-1.6\t6.4\t4.8\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t-0.4\t-1.2\t-1.2\t-1.2\t-1.2\t-1.2\t-1.2\t-1.2\t-1.2\t-1.2\t-1.6\t-1.2\t1.2\t5.2\t1.2\t-4\t-4.4\t-5.2\t-6\t-6.8\t-7.2\t-7.2\t-6.4\t-5.6\t-5.2\t-4.8\t-4\t-1.2\t4.8\t5.2\t0.4\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t-0.4\t-1.2\t-1.2\t-1.2\t-1.2\t-1.2\t-1.2\t-1.2\t-1.2\t-1.2\t-1.2\t-1.6\t-1.2\t2\t4.8\t-0.8\t-3.2\t-4\t-5.2\t-6.4\t-6.8\t-6\t-6\t-6\t-6.8\t-5.2\t-4.4\t-2.4\t-1.2\t4.8\t4.4\t0.4\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t-0.8\t-1.2\t-1.2\t-1.2\t-1.2\t-1.2\t-1.2\t-1.2\t-1.2\t-1.2\t-1.2\t-1.6\t-1.2\t2.8\t4\t-0.4\t-2\t-4.4\t-6\t-6.8\t-6\t-6.4\t-6.4\t-5.6\t-6\t-6.4\t-4.4\t-2.8\t-1.2\t5.2\t3.6\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t-0.4\t-1.2\t-1.2\t-1.2\t-1.2\t-1.2\t-1.2\t-1.2\t-1.2\t-1.2\t-1.2\t-1.2\t-1.2\t-1.2\t2\t3.6\t-0.8\t-2.8\t-4\t-5.6\t-5.2\t-6.8\t-7.2\t-6.8\t-6.4\t-4.8\t-4.4\t-4.8\t-2.8\t-1.6\t5.2\t4\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t-0.4\t-0.8\t-1.2\t-1.2\t-1.2\t-1.2\t-1.2\t-1.2\t-1.2\t-1.2\t-1.2\t-1.2\t-1.6\t-1.2\t-1.2\t1.6\t4.4\t0.4\t-2.8\t-2.8\t-4\t-5.6\t-6\t-6\t-6\t-5.6\t-5.6\t-4.4\t-2.8\t-2.4\t-2\t5.2\t3.6\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t-0.4\t-1.2\t-1.2\t-1.2\t-1.2\t-1.2\t-1.2\t-1.2\t-1.2\t-1.2\t-1.2\t-1.2\t-1.6\t-1.2\t-1.2\t1.6\t3.6\t1.2\t-2\t-3.6\t-5.2\t-5.2\t-6.4\t-5.6\t-6.4\t-5.6\t-5.6\t-4.4\t-3.6\t-2.8\t-1.2\t5.2\t3.6\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t-0.4\t-1.2\t-1.2\t-1.2\t-1.2\t-1.2\t-1.2\t-1.2\t-1.2\t-1.2\t-1.2\t-1.2\t-1.2\t-1.6\t-1.2\t-1.2\t1.2\t4\t1.6\t-0.8\t-3.6\t-5.2\t-6\t-7.6\t-6.8\t-6.8\t-7.2\t-6.4\t-6.4\t-4.8\t-2.4\t0.8\t6\t3.2\t-0.4\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t-0.8\t-1.2\t-1.2\t-1.2\t-1.2\t-1.2\t-1.2\t-1.2\t-1.2\t-1.2\t-1.2\t-1.2\t-1.2\t-1.2\t-1.2\t-1.2\t0.8\t3.6\t2.8\t-1.2\t-4\t-6\t-7.6\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-6.4\t-4\t-2.4\t1.6\t6.4\t4.4\t0.8\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0.4\t1.2\t0.4\t-1.2\t-1.2\t-1.2\t-1.2\t-1.2\t-1.2\t-1.2\t-1.2\t-1.2\t-1.2\t-1.6\t-1.2\t-1.2\t-1.2\t0.4\t4\t2.4\t-1.6\t-4.4\t-5.2\t-6.4\t-7.6\t-5.6\t-5.6\t-5.6\t-5.2\t-3.6\t-3.6\t-2\t1.6\t7.2\t5.2\t0.8\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0.4\t1.2\t1.2\t0.4\t0.4\t-1.2\t-1.2\t-1.2\t-1.2\t-1.2\t-1.2\t-1.2\t-1.2\t-1.6\t-1.2\t-1.2\t-1.2\t-1.11022e-16\t4\t4.4\t-2.4\t-4.4\t-5.6\t-5.6\t-6.4\t-4.8\t-4.8\t-4.8\t-4\t-3.6\t-4\t-2\t-0.4\t6.8\t4.4\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0.4\t0.8\t1.2\t1.2\t0.4\t0.4\t-1.2\t-1.2\t-1.2\t-1.2\t-1.2\t-1.2\t-1.2\t-1.2\t-1.2\t-1.2\t-0.4\t4\t3.6\t-3.2\t-3.6\t-4\t-4.8\t-6\t-4.8\t-4.4\t-4.8\t-5.2\t-3.6\t-2.8\t-2.8\t-1.2\t6\t5.2\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0.4\t0.8\t1.2\t1.2\t1.2\t0.4\t0.4\t-1.2\t-1.2\t-1.6\t-1.2\t-1.2\t-1.2\t-1.2\t-0.4\t4.4\t3.6\t-4\t-4.4\t-4.4\t-6\t-5.2\t-5.6\t-5.6\t-4.8\t-4\t-4\t-3.6\t-3.6\t-2.4\t5.6\t5.2\t0.4\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0.4\t0.4\t0.8\t1.2\t1.2\t1.2\t0.4\t0\t-0.4\t-0.4\t-1.2\t-1.2\t-1.11022e-16\t4\t3.2\t-2.4\t-4.8\t-5.6\t-5.6\t-6.4\t-5.2\t-6\t-5.2\t-5.2\t-4.8\t-4.4\t-2.8\t0.4\t4.8\t4.8\t0.8\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0.4\t0.4\t0.8\t0.8\t1.2\t1.2\t0.8\t1.2\t1.2\t0.4\t1.6\t4\t2.8\t-0.4\t-3.6\t-5.2\t-7.2\t-8.4\t-6.8\t-6.8\t-7.2\t-7.2\t-6\t-4.8\t-3.2\t1.2\t6.8\t4\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0.4\t0.4\t0.4\t0.4\t0.4\t0.8\t0.8\t2\t5.2\t5.6\t2\t-1.2\t-4\t-4.4\t-5.2\t-6.8\t-6.8\t-6.8\t-6\t-6.4\t-5.2\t-2\t0.8\t6.4\t4\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0.4\t0.8\t4.8\t6\t-0.8\t-2\t-3.6\t-4\t-5.2\t-5.2\t-5.2\t-5.2\t-5.2\t-3.6\t-3.2\t-2.4\t-0.8\t6.4\t4.8\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t4.8\t5.6\t-0.4\t-2.8\t-2.4\t-4\t-4.8\t-5.2\t-5.2\t-5.2\t-4\t-4\t-3.2\t-2.8\t-1.6\t5.6\t4.8\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t4.4\t6\t-1.11022e-16\t-2\t-3.6\t-4\t-5.2\t-6\t-6\t-6\t-6\t-4\t-3.6\t-2.4\t-0.4\t6.4\t4.4\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t4\t6\t0.4\t-2.4\t-3.6\t-5.2\t-6.4\t-6\t-6\t-6\t-6\t-6\t-5.2\t-3.2\t0.8\t6.4\t3.6\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t3.2\t6\t0.8\t-1.6\t-4.4\t-4.8\t-4.8\t-5.6\t-5.6\t-5.6\t-4.8\t-4.4\t-4\t-2.8\t-1.11022e-16\t6.4\t4\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t3.6\t6\t-1.11022e-16\t-3.2\t-3.2\t-3.2\t-4\t-5.6\t-5.2\t-5.2\t-4\t-4\t-2.8\t-2.8\t-1.2\t5.2\t4.8\t0.4\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t3.6\t5.6\t1.2\t-2.4\t-3.6\t-3.6\t-4.8\t-4.4\t-4.4\t-4.4\t-4.8\t-3.6\t-4\t-2.4\t-1.6\t6\t4.8\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t4\t6\t-1.11022e-16\t-2\t-3.6\t-5.6\t-5.2\t-4.8\t-5.2\t-5.2\t-5.2\t-5.2\t-4.4\t-2.4\t-1.11022e-16\t6.4\t4\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t2.4\t5.6\t3.2\t-0.8\t-3.6\t-4.8\t-4.8\t-5.6\t-5.6\t-5.6\t-5.6\t-4.4\t-3.2\t-2\t0.4\t6\t4\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t1.2\t5.2\t5.2\t-1.6\t-2.4\t-3.2\t-4.8\t-4.4\t-5.2\t-5.2\t-4.4\t-4\t-3.2\t-2\t1.6\t6\t4\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t1.6\t4.8\t3.6\t-1.11022e-16\t-2\t-4.4\t-3.6\t-4.8\t-4.8\t-4.8\t-4.4\t-4\t-2.8\t-1.2\t1.6\t6\t2.8\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t2\t4.4\t3.6\t0.8\t-1.6\t-3.2\t-4.4\t-5.2\t-5.2\t-5.2\t-5.2\t-3.6\t-2\t-1.2\t2\t5.6\t3.2\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t1.6\t4\t2.8\t0.8\t-0.8\t-2.8\t-4\t-4.4\t-6\t-6\t-4\t-4\t-3.2\t-0.4\t0.4\t5.2\t3.2\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t1.2\t4.4\t4.8\t-1.11022e-16\t-2\t-4\t-3.2\t-4.8\t-4.8\t-4.8\t-4.8\t-3.6\t-3.2\t-1.6\t0.8\t5.6\t3.6\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0.4\t4.8\t5.6\t-1.6\t-2.4\t-4.4\t-5.2\t-4.4\t-5.2\t-4.4\t-5.2\t-5.2\t-4\t-2.8\t-0.4\t6\t4.4\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t5.6\t6\t-2.4\t-4\t-4.4\t-4.4\t-5.2\t-5.2\t-5.2\t-5.2\t-4\t-4.4\t-4\t-1.2\t6\t4.4\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t5.2\t6.4\t-2.4\t-4\t-4.8\t-4.8\t-4.8\t-4.4\t-4.8\t-4.8\t-4.8\t-4.8\t-3.2\t-0.8\t6\t4.4\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t4.4\t6\t-1.2\t-3.2\t-4\t-4.8\t-5.6\t-5.6\t-5.6\t-4.8\t-4\t-4\t-3.2\t-0.4\t5.6\t4\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t4\t5.6\t-0.8\t-1.2\t-3.2\t-4.8\t-4.4\t-4.4\t-4.4\t-4.4\t-4\t-2.4\t-1.6\t1.11022e-16\t4.8\t3.6\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t3.2\t5.2\t0.8\t-0.8\t-2\t-2\t-2.4\t-3.2\t-4\t-3.2\t-2\t-2.8\t-0.8\t0.4\t4.8\t2.8\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t2.4\t4.8\t2\t0.4\t-0.4\t-1.2\t-2.4\t-2.4\t-4\t-3.2\t-2.8\t-1.6\t-1.11022e-16\t1.6\t4\t2.4\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t3.2\t5.6\t3.6\t1.6\t-1.11022e-16\t-1.2\t-2.8\t-2.4\t-3.2\t-3.6\t-2.8\t-2\t-0.4\t2\t4.4\t2\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0.4\t1.2\t4\t6.4\t3.2\t0.8\t-1.6\t-3.2\t-2.4\t-3.2\t-3.2\t-3.2\t-3.2\t-2\t-0.4\t1.6\t4.8\t2\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0.4\t1.2\t2\t3.2\t5.6\t4.4\t-1.2\t-2\t-4.4\t-5.2\t-5.2\t-4\t-4\t-3.6\t-2\t-0.4\t2.8\t4.4\t1.6\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0.4\t1.2\t2\t1.2\t2.4\t3.6\t2\t-2.4\t-4.8\t-6.4\t-7.2\t-6.8\t-4\t-4\t-3.6\t-2.4\t-0.8\t2.8\t4.8\t2\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t1.2\t2.4\t1.2\t0.8\t0.8\t2\t1.2\t-4\t-4\t-5.2\t-6\t-6.4\t-3.2\t-3.2\t-2.8\t-2.4\t-1.6\t2.4\t4.4\t2\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0.8\t2\t2\t-1.11022e-16\t-1.2\t-1.2\t2.4\t1.6\t-3.6\t-5.2\t-5.2\t-4.8\t-6.4\t-3.2\t-3.2\t-2.8\t-2.4\t-1.6\t2\t4.4\t2\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t2\t2.8\t1.2\t-1.2\t-2.4\t-2\t1.2\t3.2\t-3.6\t-4.4\t-5.6\t-6.8\t-8\t-3.2\t-2.4\t-3.6\t-2.4\t-0.8\t2.8\t4\t1.6\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t1.2\t2.8\t1.6\t-0.4\t-2\t-2.4\t-2\t0.8\t2.4\t-2.4\t-4.8\t-6\t-6.8\t-8\t-2.8\t-2.8\t-1.6\t-1.2\t-0.8\t2.4\t4.8\t2\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t2\t3.2\t0.4\t-1.2\t-2.4\t-2\t-3.2\t1.2\t2\t-4.8\t-8\t-8.4\t-8\t-7.6\t-2.4\t-2.4\t-2\t-1.2\t1.2\t4.4\t5.2\t1.6\t0.4\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0.4\t2.8\t3.6\t-1.2\t-2.4\t-1.6\t-2.8\t-3.6\t-0.8\t0.4\t-5.2\t-8.4\t-10.4\t-11.2\t-8.4\t-4\t-4.4\t-2.8\t-1.2\t0.8\t6.8\t6\t2\t0.8\t0.8\t0.4\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t1.2\t3.2\t2\t-1.6\t-1.6\t-2.8\t-4.4\t-4.4\t-2\t-1.6\t-6.8\t-8\t-9.2\t-10.4\t-8.4\t-6.4\t-5.6\t-4.8\t-3.2\t-0.8\t5.2\t4.8\t1.6\t1.6\t1.2\t0.8\t0.8\t0.4\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t2.8\t3.6\t0.8\t-1.6\t-2.8\t-4.4\t-5.2\t-6\t-3.2\t-2.4\t-6.4\t-7.2\t-8.8\t-9.2\t-7.2\t-6.4\t-5.6\t-5.6\t-3.6\t-0.8\t4\t4.4\t0\t0\t0.8\t0.8\t1.2\t0.8\t0.4\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t3.2\t4.4\t-0.4\t-2\t-4.4\t-5.2\t-6\t-6\t-3.6\t-2.8\t-4.8\t-5.6\t-7.6\t-8\t-5.6\t-5.2\t-5.6\t-4.8\t-3.6\t-2\t5.2\t4.8\t-0.4\t-1.2\t-0.8\t0\t0.8\t1.6\t1.2\t0.8\t0.4\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t3.6\t5.2\t-1.2\t-3.6\t-5.2\t-6\t-5.6\t-5.2\t-4\t-2\t-3.6\t-5.6\t-6.4\t-7.6\t-5.2\t-5.6\t-5.2\t-5.2\t-4.4\t-2.4\t5.2\t4.4\t-0.8\t-0.8\t-0.8\t-1.2\t-0.8\t0\t0.8\t1.2\t0.8\t0.4\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t4.4\t5.6\t-2\t-4.4\t-6\t-5.2\t-4.8\t-4.8\t-3.6\t-2.4\t-2.4\t-4.4\t-8.4\t-8.4\t-5.6\t-5.6\t-5.6\t-6\t-3.6\t-2.4\t5.6\t3.2\t-0.4\t-1.2\t-0.8\t-0.8\t-0.8\t-0.4\t0\t0.8\t1.6\t1.2\t0.4\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t4.8\t6\t-2.8\t-6\t-5.2\t-4.8\t-4\t-4\t-4.8\t-4.4\t-4\t-5.6\t-8\t-8\t-7.2\t-6.8\t-7.2\t-5.6\t-4.8\t-2\t4.4\t3.6\t-0.4\t-1.2\t-1.6\t-1.2\t-0.8\t-0.8\t-0.8\t-0.4\t0.8\t1.6\t1.2\t0.4\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t4.8\t6\t-3.6\t-5.2\t-4.8\t-5.2\t-4.8\t-5.6\t-5.6\t-5.6\t-4.8\t-3.6\t-6.8\t-6.8\t-6.4\t-6.8\t-7.6\t-6.8\t-5.2\t-4\t1.2\t2\t-1.2\t-1.6\t-1.2\t-1.2\t-0.8\t-1.2\t-0.8\t-0.8\t-0.4\t0.8\t1.6\t1.2\t0.4\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t5.2\t6\t-3.6\t-4.8\t-4.8\t-4.8\t-4.8\t-5.2\t-5.2\t-4.4\t-2.8\t-2.8\t-6.8\t-6.8\t-4.8\t-7.6\t-7.2\t-5.6\t-6.4\t-5.6\t-0.4\t0.4\t-2.8\t-2\t-2.4\t-1.6\t-1.2\t-1.2\t-0.8\t-0.8\t-0.8\t-0.4\t0.8\t1.6\t1.2\t0.4\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t4.4\t6.4\t-0.8\t-4\t-5.2\t-3.6\t-3.2\t-3.2\t-2.8\t-3.6\t-4.8\t-4.4\t-10.8\t-10.4\t-6.4\t-8\t-8.4\t-8.4\t-8.4\t-7.6\t-2\t-0.8\t-3.6\t-3.6\t-3.2\t-2\t-2.4\t-0.8\t-1.2\t-0.8\t-0.4\t-0.8\t-0.4\t0.8\t1.6\t0.8\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t3.6\t6.8\t0.4\t-2\t-2\t-2\t-1.6\t-2.8\t-2.8\t-4\t-5.6\t-5.2\t-13.6\t-10\t-8\t-10.8\t-11.2\t-11.2\t-9.6\t-7.6\t-0.8\t-2.4\t-5.6\t-4.4\t-4.4\t-3.6\t-3.2\t-2\t-1.6\t-0.8\t-1.6\t-0.4\t-0.8\t-0.4\t0.8\t1.6\t0.8\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t3.6\t4.8\t0.4\t-1.2\t-1.2\t-2.4\t-3.6\t-3.6\t-5.2\t-5.2\t-5.2\t-8.4\t-15.6\t-10.4\t-10.4\t-13.2\t-13.2\t-13.2\t-12\t-9.6\t-2.4\t-2.8\t-6.8\t-6\t-4.8\t-4.4\t-3.6\t-2.8\t-2.4\t-1.6\t-1.2\t-1.2\t-0.4\t-0.8\t0.4\t1.6\t1.2\t0.4\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0.4\t4.4\t5.2\t-1.11022e-16\t-2.4\t-1.6\t-2.8\t-3.6\t-4.4\t-6.8\t-6.8\t-9.6\t-9.2\t-15.6\t-9.6\t-10.8\t-13.2\t-14\t-14.8\t-13.6\t-12.4\t-2.4\t-3.6\t-7.6\t-6.4\t-6.8\t-6\t-4.8\t-4\t-3.6\t-3.2\t-2.8\t-1.2\t-1.6\t-0.4\t-0.8\t0.4\t1.6\t1.2\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0.4\t0.4\t0.8\t4.8\t4.8\t-0.4\t-2\t-3.2\t-3.2\t-5.2\t-6.8\t-6.8\t-6.4\t-10\t-9.6\t-14.4\t-9.6\t-10.8\t-13.6\t-13.2\t-13.2\t-14.4\t-12.4\t-4\t-4\t-9.2\t-8.8\t-7.6\t-6.4\t-6.4\t-5.2\t-4.4\t-3.6\t-3.2\t-2.4\t-1.6\t-1.11022e-16\t-1.11022e-16\t-1.11022e-16\t0.8\t1.6\t0.4\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0.4\t0.8\t1.2\t0.4\t4\t4\t-2.4\t-3.6\t-3.2\t-2.4\t-4\t-6\t-6\t-9.6\t-10\t-10.8\t-15.2\t-11.6\t-12\t-14.4\t-15.6\t-15.2\t-15.2\t-14\t-4\t-4.8\t-9.2\t-9.6\t-9.2\t-8.4\t-7.2\t-6.4\t-5.6\t-4.8\t-4\t-3.2\t-0.8\t-1.11022e-16\t-1.11022e-16\t-0.4\t0.8\t1.6\t1.2\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0.4\t0.8\t1.2\t0.4\t-0.4\t2\t3.2\t-1.2\t-2.4\t-2.4\t-2.4\t-4.4\t-5.2\t-8.8\t-11.2\t-12\t-11.6\t-16\t-10.4\t-12\t-16\t-15.6\t-16\t-16.4\t-14\t-8\t-6\t-8.8\t-9.6\t-9.2\t-9.6\t-8\t-8.4\t-6.4\t-5.6\t-4.4\t-2.8\t-1.6\t-0.4\t-0.8\t-1.11022e-16\t-0.8\t1.2\t1.6\t0.4\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0.4\t0.8\t1.2\t0.4\t-0.4\t-1.2\t2.4\t4\t-0.8\t-2.8\t-3.2\t-4\t-4.8\t-8.8\t-12.4\t-12.8\t-13.6\t-13.2\t-16\t-10.4\t-12.4\t-14.8\t-16.8\t-17.6\t-16.8\t-16\t-10\t-7.2\t-9.6\t-10\t-10\t-9.2\t-9.2\t-8.8\t-8\t-5.6\t-4.8\t-2.8\t-2\t-2.8\t-1.6\t-1.2\t-1.11022e-16\t0.8\t1.6\t1.2\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0.4\t0.8\t1.2\t0.4\t-0.4\t-1.2\t-0.4\t3.2\t3.6\t-2\t-4\t-6\t-7.6\t-8.8\t-11.6\t-12.8\t-14.4\t-14\t-12.8\t-15.2\t-12.4\t-14\t-15.2\t-16.4\t-16.8\t-18\t-15.6\t-12.4\t-8.4\t-10.8\t-12\t-10.8\t-9.6\t-9.2\t-8.4\t-7.2\t-5.6\t-4.4\t-4\t-3.6\t-2.8\t-2\t-1.2\t-0.8\t-0.8\t2\t1.6\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0.4\t0.8\t1.2\t0.4\t-1.2\t-1.2\t-0.8\t-0.4\t3.6\t4\t-4.4\t-6\t-7.2\t-8\t-10.8\t-13.6\t-15.2\t-16.8\t-14.4\t-13.6\t-15.6\t-13.2\t-14\t-16.4\t-18\t-18.4\t-16.8\t-17.2\t-14.8\t-10.8\t-11.6\t-12.4\t-12.4\t-11.6\t-8.8\t-6.8\t-5.6\t-5.2\t-5.2\t-4.8\t-4.8\t-4\t-2.8\t-2\t-1.2\t-0.8\t1.2\t1.2\t0.8\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0.4\t1.2\t0.4\t-0.4\t-1.2\t-0.8\t-0.8\t-1.2\t3.2\t2.8\t-6\t-6.4\t-7.6\t-11.2\t-15.2\t-16\t-17.2\t-16.8\t-14\t-14\t-15.2\t-14\t-15.6\t-17.6\t-18.4\t-19.2\t-18.8\t-16.8\t-16.4\t-11.2\t-12.4\t-14.4\t-12\t-7.6\t-7.2\t-6.8\t-4.8\t-5.2\t-6\t-6\t-5.6\t-4\t-3.2\t-2.4\t-0.8\t-0.8\t-0.4\t1.6\t0.8\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0.4\t1.2\t0.4\t-0.8\t-1.6\t-1.2\t-1.2\t-1.6\t-3.2\t2.4\t2.8\t-5.2\t-7.6\t-10.8\t-14.4\t-16.4\t-17.2\t-18\t-15.6\t-13.2\t-14.4\t-15.2\t-15.2\t-15.6\t-17.2\t-18\t-20.4\t-19.2\t-18.8\t-15.2\t-12\t-13.6\t-13.6\t-7.2\t-5.6\t-6\t-6.4\t-6.4\t-7.2\t-6.4\t-6.8\t-5.6\t-5.6\t-4\t-2.4\t-1.6\t-1.2\t-0.4\t1.6\t0.8\t-0.4\t-0.4\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0.4\t0.4\t0.8\t-0.4\t-2\t-2\t-1.6\t-1.6\t-3.6\t-3.2\t1.2\t2.8\t-6.8\t-10.4\t-14.4\t-16.4\t-17.2\t-18\t-17.2\t-14.8\t-12\t-14\t-14.8\t-15.2\t-16.4\t-18\t-18.4\t-19.6\t-21.2\t-19.2\t-16\t-11.6\t-8.8\t-5.2\t-3.6\t-5.6\t-7.2\t-7.6\t-7.6\t-7.6\t-7.2\t-6.4\t-6.8\t-6\t-4.8\t-3.6\t-2\t-0.4\t-1.11022e-16\t2\t0.8\t-0.8\t-0.8\t-0.4\t-0.4\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t-0.4\t-0.4\t-0.4\t0.4\t-0.8\t-2.4\t-2\t-2\t-2\t-4\t-4\t-3.6\t1.6\t0.4\t-8.8\t-14\t-16\t-16.4\t-17.2\t-17.2\t-14.4\t-11.2\t-8.4\t-11.6\t-14.4\t-13.6\t-14.4\t-16.4\t-17.2\t-18.4\t-19.6\t-18.8\t-10.8\t-2\t-0.4\t-2.4\t-6\t-8.8\t-9.2\t-8.8\t-9.2\t-8\t-7.6\t-7.2\t-6.4\t-6.8\t-6\t-4\t-3.2\t-1.6\t-0.4\t1.6\t1.6\t-0.4\t-0.8\t-0.8\t-0.4\t-0.4\t-0.4\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t-0.4\t-0.4\t-0.8\t-0.8\t-1.2\t-1.11022e-16\t-1.11022e-16\t-1.6\t-2.8\t-2\t-2.4\t-4.4\t-4.4\t-4.8\t-3.6\t1.2\t-0.8\t-12.4\t-14.4\t-15.6\t-16.4\t-16.4\t-15.2\t-12.4\t-8.8\t-7.6\t-11.2\t-15.2\t-15.6\t-14.8\t-15.6\t-16\t-16.8\t-16.8\t-14\t-4\t1.6\t-1.6\t-5.6\t-8\t-8.4\t-8.4\t-8\t-8\t-8\t-8.4\t-7.6\t-7.2\t-6.4\t-6\t-5.2\t-3.2\t-1.6\t-0.4\t0.8\t1.6\t0.4\t-0.8\t-0.8\t-0.8\t-0.8\t-0.4\t-0.4\t-0.4\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0.4\t0.8\t-0.8\t-1.2\t-1.2\t-1.2\t-0.8\t-0.4\t-1.2\t-3.2\t-2.4\t-2.8\t-4\t-4.8\t-5.2\t-4.8\t-2\t1.2\t-3.6\t-13.6\t-15.2\t-16\t-17.6\t-16.4\t-15.2\t-11.6\t-8.8\t-8\t-12.8\t-18\t-16.8\t-14\t-14.4\t-15.6\t-13.6\t-13.2\t-10.4\t-2.8\t-4.4\t-12\t-11.6\t-12\t-11.2\t-9.6\t-8.4\t-7.2\t-7.6\t-6.8\t-7.2\t-6.4\t-6.4\t-6.4\t-5.2\t-4.8\t-2.8\t-0.8\t0.4\t2.4\t0.8\t-0.8\t-0.8\t-0.8\t-0.8\t-0.8\t-0.8\t-0.4\t-0.4\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0.4\t1.2\t0.4\t-1.2\t-1.6\t-1.6\t-1.2\t-0.8\t-1.2\t-2.8\t-2.4\t-3.2\t-5.2\t-4.8\t-4.4\t-4.4\t-2.8\t-0.8\t-6\t-14.8\t-17.2\t-17.2\t-17.6\t-17.2\t-13.6\t-12\t-10\t-8\t-14.4\t-19.2\t-18\t-16\t-16\t-14.4\t-14\t-14.8\t-13.6\t-9.6\t-10\t-13.6\t-12.4\t-12.4\t-12.4\t-12.4\t-11.6\t-10\t-9.2\t-7.6\t-5.6\t-5.6\t-5.6\t-5.2\t-6\t-4.8\t-3.2\t-0.8\t0.8\t2.8\t0.8\t-0.8\t-0.8\t-0.8\t-0.8\t-0.8\t-0.8\t-0.8\t-0.4\t-0.4\t0.4\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0.8\t1.6\t0.4\t-2\t-2\t-0.8\t-0.8\t-2.8\t-1.2\t-1.2\t-3.2\t-4.4\t-4.4\t-4\t-4.4\t-4.4\t-4.8\t-12\t-17.6\t-18.4\t-18.8\t-17.6\t-15.6\t-14\t-12\t-9.6\t-8\t-17.2\t-17.6\t-20\t-19.2\t-19.2\t-18\t-18.4\t-18.4\t-19.2\t-12.8\t-13.2\t-15.6\t-14.8\t-14.4\t-14.4\t-15.2\t-13.2\t-13.2\t-11.6\t-10\t-9.2\t-7.2\t-5.2\t-4\t-3.2\t-4\t-3.6\t-2\t0.8\t3.2\t1.2\t-0.8\t-0.8\t-0.8\t-0.8\t-0.8\t-0.8\t-0.8\t-0.8\t-0.8\t0.4\t0.4\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0.8\t1.6\t1.2\t-1.2\t-1.6\t-0.8\t-1.6\t-3.2\t-1.2\t-1.11022e-16\t-2.8\t-5.2\t-5.6\t-6.4\t-6.8\t-6.8\t-9.2\t-14.8\t-19.2\t-19.2\t-18\t-17.2\t-16\t-14.4\t-11.2\t-9.6\t-10.4\t-18.8\t-18.8\t-20.8\t-21.2\t-22\t-22\t-22.8\t-23.2\t-20.8\t-18.8\t-18.8\t-19.6\t-20\t-19.2\t-18.8\t-18.8\t-18.8\t-18.4\t-17.2\t-16\t-14\t-11.2\t-9.2\t-7.2\t-2.8\t-1.6\t-1.6\t-1.11022e-16\t1.2\t3.6\t1.6\t-0.8\t-0.8\t-0.8\t-0.8\t-0.8\t-0.8\t-0.8\t-0.8\t0.8\t0.8\t0.8\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t1.2\t2\t0.4\t-1.6\t-0.8\t-1.2\t-2\t-0.8\t0.4\t-1.2\t-4.8\t-7.2\t-8\t-9.6\t-10.4\t-11.6\t-15.6\t-19.2\t-18\t-18.8\t-18\t-16\t-15.2\t-11.6\t-10\t-13.2\t-21.6\t-21.6\t-24\t-25.2\t-24.8\t-24.4\t-24.4\t-23.6\t-22.4\t-20\t-21.2\t-20.8\t-20\t-19.6\t-20\t-20\t-20\t-19.6\t-20\t-18.8\t-18.4\t-17.2\t-16\t-14.4\t-12\t-5.6\t-2.4\t3.2\t5.6\t6.8\t2\t-0.8\t-0.8\t-0.8\t-0.8\t-0.8\t-0.8\t-0.8\t-0.8\t0.8\t0.8\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0.4\t2\t1.2\t0.4\t-1.11022e-16\t-1.2\t-1.6\t-2\t-2.8\t-1.6\t-2.8\t-7.6\t-11.6\t-12.4\t-12.4\t-14\t-16.4\t-19.6\t-19.6\t-18\t-18\t-16\t-14.4\t-13.6\t-13.2\t-16.8\t-26.8\t-23.2\t-24.4\t-26.4\t-26\t-26\t-25.6\t-24.8\t-23.2\t-22\t-22\t-22.4\t-21.6\t-20.8\t-20\t-19.6\t-19.6\t-19.6\t-19.2\t-19.6\t-18.8\t-18.4\t-17.2\t-16\t-14.8\t-13.6\t-13.2\t-8.4\t2.4\t10.4\t8\t1.6\t-0.8\t-0.8\t-0.8\t-0.8\t-0.8\t-0.8\t0.8\t0.8\t0.4\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t1.2\t2.4\t2.4\t0.4\t-2.4\t-2.8\t-2.4\t-4\t-3.2\t-2.8\t-6\t-11.2\t-13.6\t-14.8\t-16\t-17.6\t-19.6\t-19.6\t-20\t-19.6\t-16.8\t-15.6\t-13.2\t-13.6\t-16\t-26.4\t-24\t-24.8\t-27.2\t-26.4\t-26.4\t-26.4\t-26\t-26\t-25.2\t-24\t-22.8\t-22\t-22\t-21.2\t-20.4\t-20.8\t-20.8\t-19.6\t-19.2\t-19.6\t-18.8\t-17.6\t-16.4\t-15.6\t-14\t-12.4\t-11.2\t-8\t-2\t5.2\t4.8\t4.8\t0\t-0.8\t-0.8\t-0.8\t0.8\t0.8\t0.8\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t1.2\t3.2\t4\t0.4\t-3.2\t-2.8\t-3.6\t-5.6\t-4.4\t-0.4\t-2.4\t-10.4\t-16\t-17.6\t-18\t-17.6\t-19.6\t-21.2\t-20.8\t-19.2\t-16.8\t-14.8\t-13.2\t-15.6\t-16.8\t-25.6\t-24.4\t-24.8\t-27.6\t-27.2\t-27.6\t-26.8\t-26.8\t-27.2\t-26.4\t-25.6\t-25.6\t-24\t-22.8\t-22\t-21.2\t-20.8\t-20.4\t-20.4\t-19.2\t-19.2\t-18.8\t-18.8\t-16.8\t-15.6\t-14.4\t-12.8\t-11.6\t-8\t-1.2\t-4\t-8\t4.8\t4.8\t4.8\t-0.8\t0\t0.8\t0.8\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0.4\t0.8\t1.2\t1.6\t2.8\t1.6\t-3.6\t-4\t-4.8\t-6\t-5.2\t-3.2\t0.8\t-5.2\t-14.8\t-19.2\t-18.4\t-18.4\t-22\t-21.2\t-20.8\t-18\t-15.6\t-14.4\t-14.8\t-17.2\t-16.4\t-26.8\t-25.2\t-25.6\t-27.2\t-26.8\t-28.4\t-28.4\t-27.6\t-27.6\t-27.6\t-26.8\t-26.4\t-26\t-25.2\t-23.6\t-22.4\t-22\t-21.6\t-20.8\t-20.4\t-19.2\t-19.2\t-18.8\t-18\t-16\t-15.2\t-14\t-12.4\t-6.4\t-0.8\t-4.4\t-8\t-8\t-8\t4.8\t5.6\t2\t0.8\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0.4\t0.8\t1.2\t0.4\t-1.11022e-16\t2.4\t2\t-1.6\t-4.4\t-4\t-6\t-6.4\t-5.2\t-1.2\t1.6\t-4.4\t-19.2\t-20.8\t-20.8\t-21.2\t-20.8\t-19.2\t-16.4\t-15.2\t-13.6\t-15.2\t-18\t-16\t-25.6\t-24\t-24.8\t-25.6\t-26.4\t-28\t-28.8\t-28.8\t-28\t-28.4\t-27.6\t-27.6\t-26.8\t-26.4\t-25.2\t-25.2\t-23.6\t-22\t-21.6\t-20.8\t-20.4\t-19.2\t-19.2\t-19.2\t-17.6\t-16.4\t-14\t-12\t-5.6\t-0.8\t-4.8\t-8\t-8\t-8\t-8\t1.6\t6.4\t4\t-0.4\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0.4\t1.2\t0.8\t0.4\t-1.11022e-16\t-0.4\t-0.4\t0.4\t-0.8\t-2.4\t-6\t-6.8\t-7.2\t-8.4\t-6.4\t-7.77156e-16\t2.8\t-1.2\t-14\t-20.4\t-21.6\t-19.6\t-16.4\t-14.8\t-13.6\t-11.6\t-15.2\t-14.8\t-13.2\t-24\t-21.6\t-22\t-23.2\t-24.8\t-25.6\t-27.6\t-28\t-28.4\t-28.4\t-28.8\t-28\t-27.6\t-27.6\t-26.8\t-26\t-25.6\t-23.6\t-22.4\t-22.4\t-21.2\t-20.8\t-19.2\t-19.2\t-18.4\t-16.8\t-14.4\t-12.4\t-6.4\t1.11022e-16\t-4\t-8\t-8\t-8\t-6.4\t-6.4\t-2\t2.4\t5.6\t1.2\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0.4\t1.2\t0.8\t0.4\t-0.8\t-1.2\t-1.6\t-0.8\t1.11022e-16\t-0.8\t-0.8\t-4.4\t-8\t-8.4\t-8.8\t-10\t-9.2\t1.6\t6\t2.4\t-8\t-13.6\t-16\t-14\t-12\t-10.8\t-13.6\t-14.8\t-14.8\t-14\t-22.4\t-22\t-22.4\t-20.4\t-22.4\t-24\t-25.2\t-26\t-26.4\t-26.4\t-27.6\t-28.4\t-28.8\t-28\t-27.6\t-27.6\t-26.8\t-25.2\t-23.6\t-22.4\t-22\t-21.2\t-20\t-18.8\t-18.8\t-17.2\t-15.2\t-13.2\t-5.6\t0.4\t-3.6\t-8\t-8\t-6.4\t-6.4\t-6.8\t-7.2\t-4.8\t0.8\t4.8\t2\t-0.4\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0.4\t1.2\t0.8\t0.4\t-0.8\t-1.2\t-1.6\t-2\t-1.2\t-1.6\t-3.6\t-2\t-2.4\t-5.6\t-10\t-11.2\t-10.8\t-9.6\t-7.2\t2.8\t8.4\t3.6\t-4.8\t-9.2\t-13.2\t-14\t-16.4\t-18\t-19.6\t-18\t-17.2\t-24.8\t-23.2\t-23.6\t-24.4\t-24.8\t-25.6\t-25.6\t-26\t-26\t-25.2\t-26\t-26.4\t-27.6\t-28.4\t-28.8\t-28\t-27.6\t-26.8\t-26.4\t-24.4\t-23.2\t-22.4\t-21.6\t-20.4\t-19.6\t-18\t-16\t-12\t-4.4\t1.11022e-16\t-4\t-7.2\t-6.4\t-6.4\t-6.8\t-7.2\t-7.2\t-7.2\t-5.6\t1.11022e-16\t2.4\t2.4\t0.4\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0.4\t1.2\t0.8\t-0.4\t-0.8\t-1.2\t-1.6\t-2\t-2.4\t-1.6\t-2\t-3.6\t-4\t-3.2\t-6\t-8.8\t-10.8\t-9.2\t-6.8\t-6\t-2\t3.2\t-2.4\t-6.8\t-11.6\t-13.2\t-15.6\t-17.2\t-20.8\t-20.8\t-19.6\t-18.8\t-24.8\t-24\t-24.4\t-25.2\t-27.6\t-27.6\t-28.8\t-29.2\t-28.4\t-26.8\t-26\t-25.6\t-25.6\t-25.6\t-27.6\t-28.4\t-28\t-27.6\t-26.8\t-26.4\t-24.4\t-23.2\t-22\t-21.2\t-20.4\t-19.2\t-16.8\t-10.4\t-4\t1.11022e-16\t-2.8\t-6.4\t-6.4\t-6.8\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-5.6\t-0.8\t2.4\t2.8\t0.8\t-0.4\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0.4\t1.2\t0.8\t-0.4\t-0.8\t-1.2\t-1.6\t-2\t-2.4\t-2.8\t-2.4\t-2.8\t-3.2\t-5.2\t-5.6\t-7.2\t-6.4\t-6.4\t-6.8\t-5.6\t-6\t-3.6\t-3.6\t-8.4\t-9.6\t-14\t-14.4\t-18\t-20.4\t-22.8\t-22\t-20.8\t-20.4\t-26\t-26\t-26.4\t-26\t-27.6\t-28\t-29.2\t-29.6\t-30\t-30.8\t-30.4\t-28.8\t-26.8\t-26\t-25.6\t-26.4\t-27.6\t-28.8\t-27.6\t-26.8\t-26.4\t-24.8\t-23.6\t-21.6\t-20.8\t-20\t-17.2\t-12.4\t-2\t2\t-3.2\t-6.4\t-6.8\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-5.6\t-1.6\t1.2\t2\t0.8\t-0.8\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0.4\t0.8\t0.8\t0.4\t-0.8\t-1.2\t-1.6\t-2\t-2.4\t-2.8\t-3.6\t-4\t-3.2\t-3.6\t-6.4\t-7.2\t-6.8\t-4.8\t-4.8\t-6\t-7.6\t-9.2\t-5.2\t-4\t-11.2\t-13.2\t-16.4\t-18.4\t-20.4\t-22\t-23.6\t-22.4\t-23.2\t-22\t-26\t-26.4\t-26.8\t-26.8\t-28\t-28.8\t-28.8\t-30.4\t-32\t-31.6\t-31.2\t-30.4\t-30\t-28.8\t-26.4\t-25.2\t-24.8\t-27.2\t-28.4\t-27.2\t-26.8\t-26.4\t-25.2\t-23.2\t-21.2\t-20.8\t-17.6\t-12\t0.4\t2\t-4.4\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-5.6\t-1.6\t1.11022e-16\t1.2\t1.2\t-0.4\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0.4\t0.8\t0.8\t0.4\t-0.8\t-1.2\t-1.6\t-2\t-2.4\t-2.8\t-3.6\t-4\t-4.4\t-3.6\t-6\t-7.2\t-5.2\t-5.6\t-5.6\t-7.2\t-9.2\t-9.2\t-10\t-6.4\t-4\t-10.8\t-15.6\t-18.8\t-20.4\t-21.2\t-25.2\t-24.4\t-23.6\t-22.8\t-22\t-26.4\t-26.4\t-26.8\t-27.2\t-27.6\t-28.8\t-29.6\t-30.4\t-32\t-32.4\t-32\t-32.4\t-32\t-31.6\t-30.4\t-26.8\t-24.8\t-25.2\t-26\t-28\t-27.2\t-27.2\t-25.6\t-24.4\t-22.8\t-20.4\t-16.4\t-11.2\t1.2\t0.8\t-6.4\t-7.6\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-4.8\t-1.6\t-0.4\t1.2\t1.2\t-0.4\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0.8\t1.2\t0.4\t-1.11022e-16\t-1.2\t-1.6\t-2\t-2.4\t-2.8\t-3.6\t-4\t-4.4\t-4.8\t-6.4\t-5.6\t-4\t-3.6\t-3.6\t-8.4\t-9.2\t-10\t-10\t-10.4\t-7.6\t-5.2\t-11.6\t-18\t-20.8\t-21.6\t-23.2\t-25.2\t-23.6\t-24\t-23.2\t-22.4\t-26\t-26.4\t-26.4\t-26.8\t-26.8\t-28\t-28.8\t-29.6\t-31.2\t-32.8\t-33.2\t-33.2\t-32.8\t-32.4\t-32\t-30.8\t-28\t-25.2\t-24.8\t-25.2\t-27.6\t-27.2\t-27.2\t-26.4\t-22.8\t-18\t-16\t-12.8\t1.6\t1.11022e-16\t-8\t-6.4\t-6.8\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-4\t-1.6\t-0.8\t0.8\t0.8\t-0.4\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0.4\t1.2\t0\t-1.11022e-16\t-0.4\t-2\t-2\t-2.4\t-2.8\t-3.2\t-4\t-4.4\t-4.8\t-7.2\t-6.4\t-4\t-3.6\t-4\t-8\t-8.8\t-9.6\t-10.4\t-10.4\t-11.2\t-8\t-6.8\t-16\t-19.6\t-21.2\t-21.6\t-23.6\t-24.8\t-24.8\t-24.4\t-24\t-21.6\t-24.8\t-24.8\t-25.2\t-25.6\t-24.8\t-27.2\t-28\t-28.4\t-30\t-31.2\t-32.4\t-32.8\t-33.2\t-33.6\t-33.6\t-32.4\t-32\t-30.8\t-26.4\t-24\t-24.8\t-27.6\t-27.6\t-25.6\t-23.2\t-19.2\t-15.2\t-13.2\t1.6\t-0.8\t-8.4\t-7.2\t-6.8\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-3.2\t-0.8\t-0.4\t0.8\t0.8\t-0.4\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0.4\t1.2\t0.8\t-0.4\t-0.4\t-2\t-2.4\t-1.6\t-2.8\t-3.2\t-4\t-4.4\t-4.8\t-6.8\t-6.4\t-4.4\t-3.6\t-4.8\t-8.4\t-9.6\t-10\t-10.4\t-11.2\t-11.2\t-12\t-9.2\t-8\t-17.2\t-20.8\t-20\t-22.4\t-26\t-25.6\t-25.6\t-24.8\t-23.2\t-22\t-23.2\t-23.6\t-24\t-24.4\t-24.4\t-26.4\t-27.2\t-28\t-28.8\t-30.4\t-31.6\t-32\t-32.4\t-32.8\t-33.2\t-33.6\t-34\t-32.8\t-30.8\t-26\t-24\t-24\t-26.8\t-27.2\t-25.2\t-22\t-18\t-12.8\t1.2\t-1.2\t-8\t-7.6\t-7.6\t-7.6\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-5.6\t-2.4\t-1.6\t-0.8\t0.4\t0.8\t-0.8\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0.8\t0.8\t0.4\t-0.8\t-1.2\t-2.4\t-2\t-2\t-3.2\t-3.6\t-4.4\t-4.8\t-6\t-6.4\t-4.4\t-3.6\t-4.8\t-8\t-9.6\t-10\t-10.4\t-11.2\t-12\t-12.8\t-13.2\t-8.8\t-8.8\t-18.8\t-19.6\t-21.6\t-24\t-26.4\t-25.2\t-25.2\t-24\t-23.2\t-22\t-23.2\t-23.2\t-23.6\t-24\t-24.8\t-26.4\t-27.2\t-27.2\t-27.6\t-29.2\t-30.8\t-31.6\t-32\t-32\t-32.4\t-32.8\t-33.2\t-33.6\t-32.4\t-31.2\t-26\t-23.2\t-24.4\t-26.8\t-26.8\t-22.8\t-17.2\t-11.6\t0.4\t-1.2\t-8.8\t-8.8\t-8.8\t-8.4\t-8\t-7.6\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-4.8\t-2.4\t-1.2\t-0.4\t1.11022e-16\t0.4\t-0.8\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0.4\t1.2\t0\t-1.11022e-16\t-1.2\t-1.6\t-2\t-2.4\t-2.4\t-3.6\t-4.8\t-4.8\t-6\t-7.2\t-4.4\t-3.6\t-4.8\t-8\t-9.6\t-10.4\t-11.2\t-11.2\t-12\t-12.8\t-12.8\t-14\t-9.6\t-8.8\t-19.2\t-21.2\t-22.4\t-24.8\t-26\t-25.6\t-25.2\t-24.4\t-22.8\t-20.4\t-22.8\t-23.2\t-23.6\t-24\t-24\t-25.2\t-26.4\t-26.8\t-27.6\t-28\t-29.2\t-30.8\t-31.2\t-31.6\t-32\t-32.4\t-32.8\t-33.2\t-33.2\t-33.6\t-31.6\t-24.8\t-22\t-24.4\t-26.4\t-25.2\t-16.8\t-10.8\t0.8\t-2\t-9.2\t-9.6\t-9.2\t-9.2\t-8.8\t-8.4\t-8\t-7.6\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-4\t-1.6\t-1.2\t-0.8\t0.4\t0\t-0.4\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0.4\t0.8\t0.8\t-0.4\t-0.4\t-2\t-2\t-2.4\t-2.8\t-3.6\t-4\t-5.2\t-6\t-7.2\t-5.2\t-3.6\t-4.8\t-8\t-9.6\t-10.4\t-11.2\t-11.2\t-12.8\t-12.8\t-12.8\t-13.6\t-14.4\t-10.4\t-8.8\t-18.8\t-20.4\t-24\t-26.8\t-26\t-26.8\t-25.6\t-24.4\t-23.2\t-20.8\t-22.4\t-22.4\t-22.8\t-23.2\t-23.6\t-24\t-26\t-26\t-26.4\t-27.2\t-28.8\t-30\t-30.8\t-30.8\t-31.2\t-31.6\t-32\t-32.4\t-32.8\t-33.2\t-33.6\t-31.6\t-23.6\t-21.6\t-24.4\t-24.4\t-17.6\t-10\t2\t-2.8\t-10.8\t-10.4\t-10\t-9.6\t-9.2\t-8.8\t-8.4\t-8\t-7.6\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-5.6\t-3.2\t-1.6\t-1.6\t-0.4\t0.8\t-0.4\t-0.4\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0.8\t1.2\t0.4\t-0.8\t-1.2\t-2.4\t-1.6\t-2.8\t-3.2\t-4\t-4.4\t-5.6\t-7.2\t-6.4\t-4\t-3.2\t-8.4\t-9.6\t-10.4\t-11.2\t-11.2\t-12.8\t-12.8\t-12.8\t-13.2\t-14.4\t-15.2\t-10.8\t-9.2\t-19.2\t-21.6\t-24.8\t-26.4\t-26\t-26\t-25.6\t-24.4\t-24\t-20.4\t-21.6\t-22\t-22.4\t-22.8\t-22.8\t-23.2\t-25.2\t-25.6\t-26\t-26.4\t-27.6\t-28\t-29.6\t-30.4\t-30.8\t-31.2\t-31.2\t-31.6\t-32\t-32.4\t-32.8\t-33.2\t-29.6\t-23.6\t-21.6\t-22.8\t-17.6\t-9.2\t2.4\t-4\t-10.8\t-10.8\t-10.8\t-10.4\t-10\t-9.6\t-9.2\t-8.8\t-8.4\t-8\t-7.6\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-4.8\t-2.4\t-1.6\t-1.2\t-0.8\t0.8\t-0.4\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0.4\t1.2\t0.8\t-1.11022e-16\t-1.2\t-1.6\t-2\t-2.4\t-3.2\t-3.6\t-4.4\t-4.8\t-6.8\t-6.8\t-4.4\t-3.6\t-6.8\t-9.6\t-10\t-11.2\t-11.2\t-12.8\t-12.8\t-12.8\t-13.2\t-14\t-14.8\t-15.6\t-10.4\t-9.6\t-20\t-23.2\t-26.8\t-26.8\t-27.2\t-26.8\t-25.6\t-25.6\t-24.4\t-19.2\t-21.2\t-21.2\t-21.6\t-22\t-22.4\t-22.8\t-24.8\t-24\t-24.4\t-24.8\t-24.8\t-26.4\t-27.6\t-28.4\t-30.4\t-30.4\t-30.8\t-31.2\t-31.6\t-32\t-32\t-32.4\t-32.8\t-27.6\t-20.8\t-19.2\t-18\t-8.8\t1.2\t-4\t-11.2\t-10.8\t-10.8\t-10.8\t-10.4\t-10\t-9.6\t-9.2\t-9.2\t-8.8\t-8.4\t-8\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-6.4\t-3.2\t-2.4\t-1.6\t-0.8\t-0.4\t0.4\t-0.8\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0.8\t1.2\t0.4\t-0.4\t-1.2\t-2.4\t-2.4\t-2.8\t-3.6\t-4\t-5.2\t-6\t-7.2\t-5.6\t-3.6\t-4.4\t-8.8\t-10\t-10.4\t-11.2\t-12.8\t-12.8\t-12.8\t-12.8\t-13.6\t-14.8\t-15.6\t-15.6\t-10.8\t-10.8\t-21.2\t-24\t-27.2\t-27.2\t-27.6\t-27.6\t-27.2\t-25.6\t-24\t-19.2\t-20.8\t-20.8\t-21.2\t-21.6\t-21.6\t-22\t-22.4\t-22.8\t-23.2\t-23.2\t-24\t-24.8\t-26.4\t-28\t-30\t-30.4\t-30.4\t-30.4\t-30.8\t-31.2\t-31.6\t-32\t-32.4\t-32.8\t-23.6\t-17.2\t-15.2\t-11.2\t0.8\t-4\t-11.2\t-11.2\t-11.2\t-10.8\t-10.8\t-10.8\t-10.4\t-10\t-9.6\t-9.2\t-8.8\t-7.6\t-6.4\t-6.8\t-7.2\t-7.2\t-7.2\t-7.2\t-4.8\t-2.4\t-2.4\t-2\t-0.4\t1.11022e-16\t0\t-0.4\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0.4\t1.2\t0.8\t-1.11022e-16\t-1.2\t-1.6\t-2\t-2\t-3.2\t-4\t-4.4\t-5.6\t-7.2\t-6.8\t-4\t-3.2\t-7.2\t-9.2\t-10.4\t-11.2\t-12.8\t-12.8\t-12.8\t-12.8\t-13.6\t-14.4\t-15.2\t-16\t-15.2\t-11.2\t-12\t-21.2\t-26.8\t-28.4\t-28\t-28\t-28\t-27.2\t-26.8\t-24.8\t-19.2\t-20\t-20.8\t-20.8\t-20.8\t-21.2\t-21.6\t-22.4\t-22\t-22\t-22.4\t-22.4\t-23.2\t-24.4\t-26\t-28.8\t-29.6\t-30\t-30.4\t-30.4\t-30.4\t-30.8\t-31.2\t-30.8\t-30.4\t-29.2\t-18.4\t-14.4\t-11.2\t1.2\t-2.8\t-11.2\t-11.2\t-11.2\t-11.2\t-11.2\t-10.8\t-10.8\t-10.8\t-10.4\t-10\t-8\t-5.2\t-5.6\t-6.8\t-7.2\t-7.2\t-7.2\t-7.2\t-6.4\t-4\t-2.4\t-2\t-1.2\t1.11022e-16\t0.4\t-0.4\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0.8\t1.2\t0.4\t-0.4\t-2\t-2\t-2.4\t-2.8\t-3.6\t-4.8\t-4.8\t-6\t-7.2\t-5.6\t-3.6\t-5.2\t-9.6\t-10.4\t-11.2\t-12\t-12.8\t-12.8\t-12.8\t-13.2\t-14\t-14.8\t-16\t-16\t-15.2\t-11.6\t-16\t-24.4\t-28.4\t-28\t-28.4\t-28.8\t-28.8\t-28\t-27.2\t-25.6\t-20.4\t-20\t-20.8\t-20.8\t-20.8\t-20.8\t-20.8\t-20.8\t-20.8\t-21.2\t-21.2\t-21.6\t-22.4\t-24\t-26\t-27.6\t-28.8\t-29.2\t-29.6\t-30\t-30.4\t-30.4\t-30\t-29.2\t-29.6\t-30.4\t-22.4\t-14\t-10.8\t0.8\t-2.8\t-11.2\t-11.2\t-11.2\t-11.2\t-11.2\t-11.2\t-10.8\t-10.8\t-10.8\t-8.8\t-5.2\t-4.8\t-6\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-4.8\t-2.4\t-2.4\t-2\t-1.2\t0.4\t0\t-0.8\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0.4\t0.8\t0.8\t-1.11022e-16\t-1.2\t-1.6\t-2\t-2\t-3.2\t-4\t-4.4\t-6\t-7.2\t-6.8\t-4\t-3.2\t-8\t-10\t-11.2\t-12\t-12.8\t-12.8\t-12.8\t-12.8\t-14\t-14.8\t-15.6\t-16.4\t-16.8\t-15.6\t-12.8\t-16.8\t-26.4\t-29.2\t-30\t-30\t-30\t-30.4\t-28.8\t-27.2\t-25.2\t-19.2\t-19.6\t-20\t-20.8\t-20.8\t-20.8\t-20.8\t-20.8\t-20\t-20.8\t-21.2\t-21.6\t-22.4\t-22.8\t-24.8\t-26\t-28\t-28.8\t-29.2\t-29.2\t-28.8\t-28.4\t-28.8\t-28.8\t-29.6\t-30.4\t-27.6\t-15.6\t-10\t2.8\t-2.8\t-11.2\t-11.2\t-11.2\t-11.2\t-11.2\t-11.2\t-11.2\t-11.2\t-10\t-4.4\t-3.6\t-5.6\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-6.4\t-4\t-2.4\t-2\t-1.2\t-0.8\t0.4\t-0.4\t-0.4\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0.4\t1.2\t0.4\t-0.8\t-1.2\t-2\t-2.4\t-2.8\t-3.6\t-4.8\t-4.8\t-6.8\t-7.2\t-6\t-3.6\t-4.4\t-9.6\t-10.4\t-11.2\t-12.8\t-12.8\t-12.8\t-12.8\t-13.6\t-14.4\t-15.6\t-16.8\t-16.8\t-18\t-16.4\t-14\t-18.4\t-27.6\t-30.8\t-30.4\t-32\t-31.2\t-30\t-28.4\t-26.4\t-24\t-18.8\t-18.8\t-20\t-20.8\t-20.8\t-20.8\t-20.8\t-20.8\t-20.8\t-20.8\t-20.8\t-21.2\t-21.2\t-22\t-23.2\t-24.8\t-25.6\t-27.2\t-27.6\t-27.2\t-26.8\t-27.2\t-27.6\t-28.4\t-29.2\t-29.6\t-29.2\t-20.8\t-8\t3.6\t-3.6\t-11.2\t-11.2\t-11.2\t-11.2\t-11.2\t-11.2\t-11.2\t-11.2\t-6.4\t-3.2\t-4.8\t-6.8\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-4.8\t-2.8\t-2.4\t-2\t-1.2\t-0.4\t0\t-0.8\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0.8\t0.8\t-1.11022e-16\t-0.4\t-1.6\t-2\t-2\t-3.2\t-4\t-4.4\t-6\t-7.2\t-7.2\t-4.4\t-3.2\t-6.4\t-9.6\t-11.2\t-12\t-12.8\t-12.8\t-12.8\t-13.2\t-14.4\t-16\t-16.8\t-17.2\t-18.4\t-18.8\t-17.6\t-15.2\t-22.4\t-30\t-31.2\t-32.4\t-32\t-31.2\t-29.6\t-28\t-26\t-22.4\t-18\t-18.4\t-19.2\t-20\t-20.8\t-20.8\t-20.8\t-20.8\t-20.8\t-20.4\t-20.4\t-20\t-20.4\t-20\t-21.2\t-22.4\t-23.6\t-25.2\t-24.4\t-24.4\t-24.8\t-25.6\t-26.4\t-26.8\t-27.2\t-28\t-26.8\t-21.2\t-10\t4\t-1.6\t-11.2\t-11.2\t-11.2\t-11.2\t-11.2\t-11.2\t-11.2\t-6.4\t-3.2\t-3.6\t-6.8\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-5.6\t-3.2\t-2.8\t-2.4\t-1.6\t-0.8\t0.4\t-0.4\t-0.4\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0.4\t1.2\t0\t-1.11022e-16\t-1.2\t-2.4\t-2.4\t-2.8\t-3.6\t-4.8\t-4.8\t-6.8\t-7.2\t-6.8\t-3.6\t-3.6\t-9.6\t-10.4\t-11.2\t-12.8\t-12.8\t-13.2\t-13.6\t-14.8\t-16\t-16.8\t-17.6\t-18.4\t-19.2\t-20.4\t-18.4\t-16\t-24\t-31.6\t-32.4\t-32.8\t-32\t-30.8\t-28.8\t-27.2\t-24.8\t-20.8\t-17.6\t-17.6\t-18.8\t-20\t-20.4\t-20.8\t-20.8\t-20.4\t-20.4\t-20\t-19.6\t-19.2\t-20\t-19.6\t-20\t-20.8\t-22.8\t-24.8\t-24\t-24.4\t-25.2\t-25.6\t-24.8\t-25.2\t-25.6\t-25.2\t-24\t-19.6\t-12.4\t4.4\t-0.4\t-11.2\t-11.2\t-11.2\t-11.2\t-11.2\t-11.2\t-8.8\t-3.2\t-3.2\t-5.6\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-6.4\t-4\t-3.2\t-2.8\t-2\t-1.2\t-0.8\t0\t-0.8\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0.8\t1.2\t0.4\t-0.4\t-2\t-2\t-2.4\t-3.2\t-4.4\t-4.4\t-6\t-7.2\t-7.2\t-6.4\t-3.2\t-4\t-9.2\t-11.2\t-12\t-12.4\t-12.4\t-13.6\t-14.8\t-15.6\t-16.8\t-18\t-18.4\t-19.2\t-20.4\t-21.2\t-18.4\t-17.6\t-27.2\t-33.2\t-32.8\t-32.8\t-32\t-30\t-28.8\t-26.8\t-23.2\t-20\t-16.8\t-17.2\t-18\t-19.2\t-20\t-20.4\t-20.4\t-20\t-19.6\t-20\t-19.6\t-19.6\t-20\t-20.4\t-20\t-21.2\t-22.8\t-24.8\t-25.6\t-25.6\t-25.6\t-26\t-26\t-26.4\t-26.8\t-25.2\t-22.4\t-18.8\t-8.8\t6.8\t2.4\t-9.2\t-11.2\t-11.2\t-11.2\t-11.2\t-10.4\t-4\t-3.2\t-5.6\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-4.8\t-3.6\t-3.2\t-2.8\t-1.6\t-1.2\t0.4\t-0.4\t-0.4\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0.8\t0.8\t-1.11022e-16\t-1.2\t-2.4\t-1.6\t-2.8\t-3.6\t-4\t-4.8\t-6\t-7.2\t-7.2\t-4.8\t-2.8\t-6.4\t-9.6\t-11.2\t-12.8\t-12\t-11.6\t-13.2\t-16\t-17.2\t-18.4\t-18.4\t-19.6\t-20\t-21.2\t-22.4\t-20\t-19.6\t-28.4\t-33.2\t-33.2\t-33.2\t-31.2\t-28\t-27.2\t-24.4\t-22.4\t-18.4\t-16\t-16.4\t-17.6\t-18.4\t-19.2\t-19.6\t-19.6\t-20\t-19.6\t-20.4\t-20.4\t-20.4\t-20.8\t-21.2\t-20.8\t-21.6\t-22.8\t-24.4\t-26.4\t-27.6\t-28\t-28\t-28.4\t-28.8\t-29.2\t-29.6\t-27.6\t-23.6\t-12.4\t1.2\t4.4\t-1.6\t-6\t-11.2\t-11.2\t-10.4\t-4\t-3.2\t-5.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-5.6\t-4\t-2.8\t-3.2\t-2\t-1.6\t1.11022e-16\t0\t-0.4\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0.4\t1.2\t0.8\t-1.11022e-16\t-1.2\t-2.4\t-2.4\t-2.4\t-3.6\t-4.4\t-4.8\t-7.2\t-7.2\t-6.8\t-4\t-3.6\t-8.4\t-10.4\t-12\t-12.8\t-12.4\t-11.6\t-12\t-14.8\t-18\t-18.8\t-19.6\t-20\t-21.2\t-22.4\t-23.6\t-20.8\t-22.4\t-31.6\t-33.2\t-33.6\t-32.4\t-29.6\t-27.2\t-25.6\t-22.4\t-20.8\t-16.8\t-15.6\t-16\t-16.4\t-17.6\t-18\t-19.6\t-20\t-20.4\t-20.8\t-20.4\t-20.8\t-21.2\t-21.6\t-22\t-22.4\t-22.8\t-23.6\t-24.8\t-26.8\t-28.4\t-29.6\t-30\t-31.2\t-31.6\t-31.6\t-32\t-30\t-27.2\t-19.2\t-10.8\t-4\t-0.8\t-6\t-6\t-5.6\t-3.6\t-3.2\t-3.6\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-6.4\t-4\t-3.2\t-2.8\t-2\t-1.2\t-0.4\t0.4\t-0.8\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0.4\t1.2\t0.4\t-0.4\t-2\t-2\t-2\t-3.2\t-4\t-4.4\t-6\t-7.2\t-7.2\t-6.4\t-3.6\t-4\t-8.8\t-11.2\t-12\t-12.8\t-12.8\t-12.4\t-12.4\t-13.6\t-17.2\t-18.8\t-20\t-21.2\t-22.4\t-23.2\t-24.8\t-23.2\t-23.6\t-32\t-33.6\t-33.6\t-31.6\t-29.6\t-28\t-24.8\t-21.6\t-19.6\t-15.2\t-15.2\t-14.8\t-15.6\t-16.4\t-17.6\t-18.4\t-19.6\t-20.4\t-20.8\t-21.2\t-21.6\t-22\t-22.4\t-22.8\t-22.8\t-23.6\t-24.8\t-26.8\t-28.8\t-30\t-30\t-30\t-30.4\t-30.8\t-31.2\t-31.6\t-29.6\t-26.4\t-19.6\t-12.8\t-8.4\t-11.6\t-14\t-5.2\t2\t2\t-0.8\t-6.8\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-4.8\t-3.6\t-3.2\t-2.8\t-1.6\t-0.8\t-0.4\t-0.4\t-0.4\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0.8\t1.6\t-0.4\t-0.4\t-1.6\t-1.6\t-2.8\t-3.6\t-4\t-4.8\t-6.8\t-7.2\t-7.2\t-6.4\t-3.2\t-4\t-9.6\t-11.2\t-12.8\t-12.8\t-13.6\t-14.4\t-13.6\t-13.2\t-15.2\t-18\t-20.8\t-22.8\t-23.6\t-24.8\t-26\t-25.6\t-26\t-31.6\t-34.4\t-32.8\t-30.4\t-28.8\t-26.4\t-22.8\t-20\t-18.4\t-15.2\t-14\t-14\t-14.8\t-16\t-17.6\t-19.2\t-20.4\t-21.6\t-22\t-22.4\t-22.8\t-23.2\t-22.8\t-23.6\t-24.4\t-26\t-26.4\t-26.8\t-28\t-29.6\t-30\t-30\t-30\t-30\t-30.4\t-30.8\t-28.8\t-26\t-20\t-12\t-8.8\t-12.4\t-14\t-8.4\t-2.8\t1.2\t-2\t-4.4\t-6\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-5.6\t-3.2\t-2.8\t-3.2\t-2\t-1.6\t-0.8\t0\t-0.8\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0.8\t0.8\t-1.11022e-16\t-1.2\t-2.4\t-2.4\t-2.4\t-3.6\t-4.4\t-5.6\t-7.2\t-7.2\t-7.2\t-6.4\t-2.8\t-4\t-10.4\t-11.2\t-12.8\t-12.4\t-12.4\t-14.8\t-15.2\t-14\t-13.2\t-16.8\t-20\t-22.8\t-24.8\t-25.6\t-27.2\t-27.6\t-27.6\t-32\t-33.6\t-31.6\t-29.6\t-27.6\t-24.4\t-21.6\t-18.4\t-17.6\t-14.4\t-12.8\t-12.8\t-14.4\t-16\t-17.2\t-18.8\t-20.4\t-21.6\t-22.4\t-22.4\t-22.8\t-23.6\t-24.4\t-25.2\t-26\t-26\t-26\t-26.4\t-27.6\t-28.8\t-30\t-30\t-30\t-30\t-30\t-30.4\t-28.8\t-25.2\t-22\t-11.6\t-10\t-9.6\t-6.8\t-8.4\t-9.6\t-9.2\t-3.6\t-2\t-4\t-5.6\t-6.8\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-5.6\t-4\t-3.6\t-2.8\t-2\t-1.2\t-0.4\t0.4\t-0.8\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t1.2\t0.8\t-1.11022e-16\t-1.2\t-2\t-2.4\t-3.2\t-4\t-4.4\t-6\t-7.2\t-7.2\t-7.2\t-6\t-2.8\t-4.4\t-10.4\t-12\t-12.8\t-11.6\t-10.8\t-10.8\t-12.8\t-14.4\t-14.4\t-14\t-17.2\t-21.6\t-26\t-27.2\t-28.8\t-29.2\t-29.2\t-31.6\t-33.2\t-30.4\t-28.4\t-25.6\t-22.4\t-19.6\t-16.8\t-17.2\t-14\t-12\t-12.8\t-14.4\t-15.6\t-17.2\t-18.4\t-20.4\t-21.2\t-23.2\t-22.8\t-23.6\t-25.2\t-26\t-26\t-26\t-26\t-26\t-26.4\t-26.8\t-28\t-29.6\t-30\t-30\t-30\t-30\t-30\t-28.4\t-24\t-22\t-12.4\t-9.6\t-4.8\t-5.6\t-10\t-12.4\t-12.4\t-9.2\t-6\t-2.8\t-4\t-5.2\t-6.8\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-6.4\t-4\t-3.2\t-3.6\t-2.8\t-1.6\t-1.2\t-0.4\t-0.4\t-0.4\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0.4\t1.2\t0.4\t-0.4\t-2\t-2\t-2\t-3.2\t-4\t-4.8\t-6\t-7.2\t-7.2\t-7.2\t-6\t-2.8\t-4.4\t-10.4\t-12\t-12.8\t-12\t-11.2\t-9.6\t-9.6\t-12\t-14.4\t-14\t-13.2\t-18\t-24.8\t-28.4\t-30.4\t-31.2\t-29.6\t-31.2\t-30.8\t-28.8\t-26.8\t-23.6\t-20.8\t-18\t-16.8\t-17.2\t-12\t-12\t-12.8\t-14\t-15.6\t-16.8\t-18.4\t-19.6\t-22\t-22.4\t-24.4\t-25.2\t-26\t-26\t-26\t-26\t-26\t-26\t-26\t-26.4\t-27.6\t-28.8\t-30\t-30\t-30\t-30\t-30\t-28.4\t-24.4\t-20\t-6.8\t-6\t-5.6\t-6.8\t-12\t-12.4\t-12.4\t-12.4\t-9.2\t-6\t-3.6\t-4.4\t-5.2\t-6.8\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-4.8\t-3.2\t-3.2\t-2.8\t-1.6\t-0.8\t1.11022e-16\t0\t-0.8\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0.4\t1.2\t0.4\t-0.4\t-1.6\t-1.6\t-2.8\t-3.6\t-4.8\t-4.8\t-7.2\t-7.2\t-7.2\t-7.2\t-5.6\t-2.4\t-4.8\t-11.2\t-12.8\t-12.8\t-12.8\t-12.8\t-11.2\t-9.2\t-8.4\t-7.6\t-8\t-10\t-11.6\t-19.2\t-29.6\t-31.6\t-31.6\t-29.2\t-30\t-30\t-28\t-24.8\t-22.4\t-19.2\t-16.8\t-16.8\t-16.4\t-12.4\t-12.4\t-12.8\t-14\t-15.2\t-16.8\t-18.4\t-20\t-21.6\t-23.6\t-25.2\t-26\t-26\t-26\t-26\t-26\t-26\t-26\t-26\t-26.4\t-27.2\t-28.4\t-29.6\t-30\t-30\t-30\t-30\t-27.6\t-20.4\t-16\t-6\t-6.8\t-9.6\t-8.8\t-11.6\t-12.4\t-12.4\t-12.4\t-12.4\t-9.2\t-6\t-4.8\t-4.4\t-6\t-6.8\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-4.8\t-3.6\t-3.2\t-3.2\t-2.4\t-1.6\t-0.8\t0\t-0.8\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0.4\t1.6\t-0.4\t-0.4\t-2.4\t-1.6\t-2.8\t-3.6\t-4.4\t-5.6\t-7.2\t-7.2\t-7.2\t-7.2\t-5.6\t-2.4\t-4.8\t-11.2\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.4\t-10.8\t-8.8\t-7.2\t-3.6\t-2.8\t-5.2\t-18.4\t-32.8\t-31.6\t-29.6\t-30\t-28.8\t-26.4\t-23.6\t-20.4\t-17.6\t-16.4\t-16.8\t-15.6\t-12\t-13.2\t-13.2\t-14\t-15.2\t-16.4\t-18.4\t-19.2\t-22\t-23.6\t-25.2\t-26\t-26\t-26\t-26\t-26\t-26\t-26\t-26\t-26\t-26.4\t-27.6\t-28.8\t-30\t-30\t-30\t-28.4\t-22.8\t-17.2\t-15.2\t-8.4\t-11.2\t-10.8\t-8.8\t-11.6\t-12.4\t-12.4\t-12.4\t-12.4\t-10.8\t-7.6\t-6\t-5.2\t-4.8\t-6\t-6.8\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-5.6\t-3.6\t-2.8\t-3.2\t-2\t-1.2\t-0.4\t0.4\t-0.4\t-0.4\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0.8\t1.6\t-1.11022e-16\t-1.2\t-2.4\t-2.4\t-2.4\t-3.6\t-4.4\t-6\t-7.2\t-7.2\t-7.2\t-7.2\t-5.6\t-2.4\t-4.8\t-11.2\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-11.6\t-10.4\t-8\t-2.8\t3.6\t2.4\t-10.8\t-26.4\t-28.8\t-28.8\t-27.2\t-24.8\t-22\t-19.2\t-17.6\t-16.8\t-16.4\t-14.8\t-12.4\t-12.8\t-14\t-14\t-15.2\t-16.4\t-17.6\t-20\t-22\t-24\t-25.2\t-26\t-26\t-26\t-26\t-26\t-26\t-26\t-26\t-26\t-26.4\t-27.2\t-28.4\t-30\t-28.4\t-25.2\t-22.4\t-19.2\t-17.2\t-14.8\t-11.6\t-12.8\t-11.2\t-9.6\t-12\t-12.4\t-12.4\t-12.4\t-12.4\t-12.4\t-10\t-7.6\t-5.2\t-4.8\t-5.2\t-6.4\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-5.6\t-4\t-3.6\t-2.8\t-2\t-2\t-1.2\t-0.4\t-0.4\t-0.4\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0.8\t0.8\t-1.11022e-16\t-1.2\t-2\t-2.4\t-3.2\t-4\t-4.8\t-6\t-7.2\t-7.2\t-7.2\t-7.2\t-5.6\t-2.4\t-4.8\t-11.2\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12\t-10.4\t-2.8\t5.6\t5.6\t-4\t-16.4\t-21.6\t-23.6\t-21.6\t-20\t-17.6\t-16.8\t-16.8\t-17.2\t-14.4\t-12.8\t-13.2\t-13.6\t-14.8\t-14.8\t-16\t-17.6\t-20.4\t-22.4\t-23.2\t-24.4\t-25.2\t-26\t-26\t-26\t-26\t-26\t-26\t-26\t-26\t-26\t-26.4\t-27.6\t-25.2\t-22\t-22\t-21.2\t-20\t-20\t-13.6\t-11.6\t-14.4\t-11.6\t-10\t-12.4\t-12.8\t-12.4\t-12.4\t-12.4\t-12.4\t-10.8\t-9.2\t-6.8\t-6\t-5.2\t-5.6\t-6.4\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-5.6\t-4\t-3.6\t-3.6\t-2.8\t-2\t-1.2\t-0.4\t-0.4\t-0.4\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0.8\t0.8\t-1.11022e-16\t-1.2\t-2\t-2\t-3.2\t-4\t-4.8\t-6.8\t-7.2\t-7.2\t-7.2\t-7.2\t-5.6\t-2.4\t-4.8\t-11.2\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.4\t-5.6\t1.2\t2\t-0.4\t-9.2\t-13.6\t-16.8\t-15.6\t-14.4\t-14\t-14\t-15.2\t-13.2\t-12.8\t-13.6\t-14\t-14.4\t-15.2\t-16.4\t-18\t-20.4\t-21.6\t-22.8\t-24\t-25.2\t-26\t-26\t-26\t-26\t-26\t-26\t-26\t-26\t-25.6\t-25.6\t-24.8\t-23.2\t-21.2\t-22\t-23.6\t-22.8\t-20\t-12.4\t-10.4\t-13.2\t-8.8\t-6.8\t-8.8\t-9.6\t-10\t-9.6\t-9.2\t-9.6\t-9.6\t-7.2\t-5.2\t-4.8\t-4.8\t-4\t-6\t-6.8\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-5.6\t-4\t-3.6\t-3.6\t-2.8\t-1.6\t-0.8\t1.11022e-16\t0\t-0.8\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0.8\t0.8\t-1.11022e-16\t-1.2\t-2\t-2\t-2.8\t-4\t-4.8\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-6\t-3.6\t-4\t-8.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.4\t-11.2\t-6\t-2.4\t-4.4\t-9.2\t-10\t-12.4\t-12.8\t-12\t-12.4\t-11.6\t-13.2\t-13.2\t-13.6\t-14.8\t-14.8\t-15.2\t-16.4\t-18\t-20\t-21.2\t-22\t-23.2\t-24.4\t-25.2\t-26\t-26\t-26\t-26\t-26\t-25.6\t-25.2\t-25.2\t-24.8\t-25.2\t-24.4\t-24\t-25.2\t-26\t-24\t-21.2\t-14.8\t-13.2\t-13.6\t-8\t-6.8\t-7.2\t-7.6\t-7.6\t-7.2\t-7.6\t-6.8\t-6.8\t-5.2\t-3.6\t-1.6\t-0.8\t-0.8\t-1.2\t-3.2\t-4.8\t-4.8\t-5.2\t-6\t-6.8\t-7.2\t-7.2\t-5.6\t-4\t-3.6\t-3.6\t-2.8\t-1.6\t-1.6\t-0.8\t0\t-0.8\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0.8\t0.8\t-1.11022e-16\t-2\t-2\t-2.8\t-3.6\t-4.4\t-4.8\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-6.4\t-3.6\t-3.2\t-8.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-11.6\t-8.8\t-7.2\t-7.2\t-9.6\t-11.2\t-13.2\t-12\t-12.4\t-11.6\t-13.2\t-13.6\t-14\t-14.4\t-15.2\t-15.6\t-16.4\t-18.8\t-19.2\t-20.4\t-21.6\t-22.8\t-24\t-24.8\t-25.6\t-26\t-26\t-26\t-25.6\t-25.2\t-25.2\t-25.6\t-26.4\t-25.6\t-26\t-26\t-25.6\t-26\t-24.8\t-20.8\t-16\t-16.4\t-16.8\t-14.4\t-13.6\t-13.6\t-12.8\t-12\t-12.4\t-12\t-11.2\t-10.8\t-11.2\t-8\t-4.4\t-2.8\t-2\t-1.11022e-16\t-1.6\t-2.8\t-4\t-4.8\t-4.8\t-5.2\t-6\t-6.8\t-6.4\t-4\t-3.2\t-3.6\t-2.8\t-2.4\t-1.6\t-0.8\t0.4\t0\t1.6\t2\t2.4\t3.2\t3.6\t4\t4.8\t5.2\t5.6\t4.8\t4.4\t4.8\t4.4\t4\t3.6\t3.2\t3.6\t3.2\t3.6\t2.4\t1.6\t0.8\t0.4\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0.8\t1.2\t0.4\t-1.6\t-2\t-2.8\t-3.6\t-4.4\t-5.6\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-6.4\t-4\t-3.2\t-8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12\t-11.2\t-10.8\t-10.8\t-12.4\t-13.6\t-12.4\t-12.8\t-12.4\t-13.2\t-13.6\t-14.8\t-14.8\t-15.2\t-15.6\t-17.2\t-18\t-18.8\t-20\t-20.8\t-22\t-23.2\t-24.4\t-25.2\t-26\t-26\t-25.6\t-25.2\t-25.2\t-25.6\t-26.4\t-25.6\t-26.4\t-26\t-26\t-26\t-25.6\t-26\t-19.2\t-17.2\t-18.8\t-16.8\t-14.8\t-14.8\t-16.8\t-18.8\t-18\t-16.8\t-16.8\t-16\t-15.6\t-16\t-15.2\t-11.6\t-10.8\t-8.8\t-7.2\t-6\t-6.4\t-7.2\t-6.8\t-6\t-5.6\t-5.2\t-5.6\t-5.6\t-4.4\t-3.2\t-3.6\t-2.8\t-2.4\t-0.8\t0.4\t1.6\t1.6\t2.4\t3.2\t4\t4.4\t5.2\t6\t6\t6.4\t7.2\t7.6\t8.4\t8\t7.6\t8\t7.6\t7.2\t7.2\t6.4\t6\t6.4\t6\t6.4\t6\t6\t6.4\t6\t6.4\t5.2\t5.2\t4.8\t4\t3.6\t3.2\t1.6\t1.2\t0\t0\t0\t0\t\n0\t0\t0\t0.8\t1.2\t0.4\t-1.6\t-2\t-2.8\t-3.6\t-4.4\t-6\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-4.8\t-1.6\t-6.4\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-13.2\t-13.2\t-13.6\t-14\t-14.4\t-12.4\t-13.2\t-14\t-14.4\t-14.8\t-15.6\t-16.4\t-18\t-18\t-18.8\t-19.2\t-20.4\t-21.6\t-22.4\t-23.6\t-24.8\t-25.6\t-25.6\t-25.2\t-25.2\t-25.6\t-26.4\t-26.4\t-26.4\t-25.6\t-26.4\t-26\t-26.4\t-27.2\t-26.4\t-21.2\t-20\t-23.2\t-19.6\t-17.2\t-17.6\t-18.8\t-20.4\t-19.2\t-18.4\t-18.8\t-19.2\t-20\t-19.6\t-17.2\t-14.4\t-12.4\t-11.2\t-9.6\t-7.6\t-7.6\t-8\t-7.6\t-7.6\t-7.6\t-6.4\t-6\t-4.8\t-3.6\t-2.8\t-3.6\t-3.2\t-1.6\t-1.11022e-16\t1.2\t2.4\t1.2\t1.2\t0.4\t0.4\t-1.11022e-16\t-1.2\t-1.6\t-1.6\t-2.8\t-2\t-0.8\t0.4\t1.2\t2\t2.8\t3.6\t2.8\t2.4\t2.4\t3.2\t3.6\t5.6\t7.6\t8.4\t9.6\t8.8\t8\t7.6\t7.6\t8.4\t7.6\t7.2\t6.8\t6.4\t5.6\t5.2\t4.4\t3.2\t2.4\t0.4\t\n0\t0\t0\t0.8\t1.2\t0.4\t-1.6\t-1.6\t-2.8\t-3.6\t-4.4\t-6\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-5.2\t-2.8\t-4.8\t-9.6\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-13.2\t-14.4\t-14\t-13.6\t-14\t-13.2\t-12.8\t-13.6\t-14\t-14.4\t-15.2\t-15.6\t-17.2\t-18\t-18\t-18\t-18.8\t-19.6\t-20.8\t-22\t-23.2\t-24.4\t-25.2\t-25.2\t-25.2\t-25.6\t-26.4\t-26.8\t-26.4\t-26\t-26.4\t-26\t-27.2\t-28\t-28\t-26\t-22.8\t-22.4\t-24.4\t-22\t-21.2\t-23.2\t-23.2\t-20.8\t-21.2\t-19.6\t-21.2\t-22\t-21.2\t-21.2\t-19.6\t-16.4\t-11.2\t-10.8\t-10.8\t-9.6\t-9.2\t-8.8\t-8\t-7.6\t-7.6\t-8.4\t-7.2\t-4.4\t-2.4\t-2\t-2.8\t-2.4\t-0.8\t-1.11022e-16\t0.8\t-1.11022e-16\t-0.4\t-0.4\t-1.2\t-1.2\t-2.8\t-2.8\t-4\t-4\t-4.4\t-4.4\t-5.6\t-4.8\t-3.6\t-3.2\t-2.8\t-3.6\t-2.8\t-2\t-2\t-0.4\t-0.4\t-1.2\t-0.4\t-0.4\t-1.6\t-1.2\t-2\t-0.8\t-0.4\t-1.2\t-1.11022e-16\t0.8\t0.8\t1.6\t3.6\t4.4\t5.6\t4.8\t4\t3.2\t\n0\t0\t0\t0.8\t0.8\t0.4\t-1.6\t-1.6\t-2.8\t-3.6\t-4.4\t-6\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-6\t-3.2\t-3.2\t-9.6\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-14\t-14.4\t-14\t-13.6\t-13.6\t-12.8\t-13.6\t-13.6\t-14\t-14.8\t-15.2\t-16.4\t-17.2\t-18\t-18\t-18\t-18\t-19.2\t-20\t-21.2\t-22.4\t-23.6\t-24.4\t-24.8\t-25.6\t-26.4\t-26\t-26.4\t-26\t-26.8\t-26.4\t-27.2\t-28.4\t-28\t-28.4\t-26.4\t-24.8\t-26\t-24.8\t-23.2\t-23.2\t-24.4\t-25.2\t-25.6\t-24\t-23.6\t-21.6\t-22\t-22.8\t-21.2\t-19.2\t-14\t-12.4\t-12.8\t-10.8\t-9.6\t-9.6\t-10\t-9.2\t-8.4\t-8\t-8\t-8.4\t-5.6\t-2.8\t-2\t-1.2\t-1.2\t-1.6\t-1.2\t-0.8\t-1.2\t-1.2\t-2.4\t-2\t-3.2\t-3.6\t-4.4\t-4\t-4.8\t-5.2\t-6.4\t-6.4\t-7.6\t-7.6\t-7.6\t-6.4\t-6\t-5.2\t-4\t-3.6\t-3.6\t-3.2\t-3.2\t-4.8\t-6.4\t-5.6\t-5.2\t-3.2\t-3.2\t-2.8\t-3.6\t-5.2\t-5.6\t-4.8\t-4.8\t-3.2\t-2.8\t-0.8\t1.11022e-16\t1.6\t4.4\t\n0\t0\t0\t0.8\t1.6\t0.4\t-1.6\t-1.6\t-2.8\t-3.6\t-4.4\t-6\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-4.4\t-2\t-7.2\t-10.4\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-13.6\t-14.4\t-14.4\t-14\t-13.2\t-13.6\t-13.2\t-13.2\t-13.6\t-14.8\t-14.8\t-14.8\t-16.4\t-18\t-18\t-18\t-18\t-18\t-18.8\t-19.6\t-20.8\t-22\t-22.8\t-23.6\t-24.4\t-26.4\t-26.4\t-26.4\t-26.4\t-26\t-26.4\t-26.8\t-28.4\t-28.4\t-28.8\t-30.4\t-28.4\t-25.2\t-28.4\t-26\t-24.8\t-24.8\t-25.6\t-26.4\t-26.4\t-28\t-26\t-24\t-22.4\t-22.8\t-19.6\t-16.8\t-15.6\t-14\t-12.4\t-11.2\t-9.2\t-8\t-7.2\t-7.6\t-5.2\t-4\t-3.6\t-4\t-3.6\t-0.4\t2\t2\t0.8\t1.2\t-1.11022e-16\t-1.11022e-16\t-1.11022e-16\t-0.8\t-2.4\t-2.4\t-3.6\t-4\t-4.8\t-5.6\t-6\t-6\t-7.2\t-7.6\t-8.4\t-9.2\t-9.6\t-9.2\t-7.6\t-6\t-5.6\t-6.4\t-6\t-5.2\t-6.4\t-7.2\t-9.2\t-6.8\t-5.6\t-5.2\t-6.4\t-7.2\t-6.8\t-6\t-6\t-5.6\t-5.6\t-5.2\t-4\t-3.6\t-2.4\t-1.6\t0.4\t\n0\t0\t0\t0.8\t1.6\t-1.11022e-16\t-0.8\t-1.6\t-2.8\t-3.6\t-4.4\t-6\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-4.8\t-2.8\t-5.6\t-10.4\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-13.2\t-14\t-14.4\t-14.4\t-14\t-13.2\t-13.2\t-13.2\t-13.2\t-13.2\t-14.4\t-14.8\t-15.6\t-16.4\t-18\t-18\t-18\t-18\t-18\t-18\t-18.8\t-20\t-21.2\t-22\t-22.8\t-24.4\t-26\t-26\t-26.4\t-26\t-26.4\t-27.2\t-27.6\t-27.6\t-28.8\t-30\t-29.2\t-28.8\t-27.2\t-28.8\t-26\t-26\t-26\t-26\t-27.6\t-28\t-28.4\t-28\t-27.2\t-22.8\t-19.2\t-18.4\t-16\t-15.6\t-15.2\t-12.8\t-11.2\t-8.4\t-6\t-6.8\t-5.6\t-5.2\t-3.6\t-3.2\t-2\t-1.11022e-16\t2.4\t3.6\t4\t4.8\t3.2\t3.6\t2.4\t2\t0.8\t-0.8\t-2\t-2.8\t-3.6\t-5.2\t-5.2\t-6.4\t-7.2\t-7.6\t-8.4\t-9.2\t-10.4\t-10.8\t-10\t-8.8\t-8.8\t-7.6\t-7.2\t-8\t-8\t-8.4\t-9.6\t-7.2\t-7.6\t-7.6\t-9.6\t-9.2\t-8\t-8\t-7.2\t-6.8\t-6\t-5.6\t-6.4\t-5.6\t-4\t-3.6\t-2.4\t-1.6\t\n0\t0\t0\t0.8\t1.6\t-1.11022e-16\t-1.2\t-2\t-2.8\t-3.6\t-4.4\t-6\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-6\t-3.2\t-3.6\t-8.8\t-10.4\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-13.6\t-14.4\t-14.4\t-14.4\t-14\t-13.2\t-12.4\t-12.8\t-13.2\t-14\t-14.4\t-15.2\t-15.6\t-17.2\t-18\t-18\t-18\t-18\t-18\t-18\t-18.8\t-19.2\t-20.4\t-21.2\t-22\t-23.6\t-25.6\t-26.8\t-26.4\t-26\t-26.4\t-28.4\t-28\t-28.4\t-29.6\t-30.4\t-28.4\t-26.8\t-28.8\t-28.4\t-26\t-26.4\t-26.4\t-27.6\t-28.8\t-29.6\t-30\t-29.6\t-27.6\t-23.2\t-16.8\t-14.8\t-17.6\t-16.4\t-14.8\t-12\t-11.6\t-10.8\t-10.4\t-10.4\t-12\t-12.4\t-12.4\t-10.4\t-7.6\t-5.2\t-2\t-0.4\t-0.4\t0.8\t-0.4\t-1.11022e-16\t-1.6\t-0.8\t-2.4\t-2.8\t-2.8\t-3.6\t-4\t-4.8\t-5.6\t-6.4\t-7.2\t-8.8\t-9.2\t-10.8\t-10.8\t-10.4\t-10.4\t-10.4\t-10\t-9.2\t-8.8\t-9.2\t-10.8\t-10.8\t-9.2\t-7.2\t-8.8\t-11.2\t-10.8\t-9.6\t-9.6\t-8.4\t-7.6\t-7.2\t-7.2\t-6\t-6\t-5.6\t-5.6\t-4\t-3.6\t-2.8\t\n0\t0\t0\t0.4\t1.6\t-1.11022e-16\t-1.2\t-2\t-2\t-3.6\t-4.4\t-6\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-4.4\t-2.8\t-7.2\t-10.4\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-13.2\t-14.4\t-14.4\t-14.4\t-14.4\t-14\t-13.2\t-12\t-12.8\t-13.2\t-14\t-14.4\t-15.2\t-15.6\t-17.2\t-18\t-18\t-18\t-18\t-18\t-18\t-18\t-18.8\t-20\t-20.4\t-21.6\t-24\t-24.8\t-26\t-26\t-26.8\t-27.2\t-27.6\t-28\t-28\t-30\t-29.2\t-28.8\t-27.6\t-28.8\t-26.8\t-26.4\t-26.8\t-27.2\t-28.8\t-30\t-30\t-30.4\t-29.6\t-26\t-18.4\t-15.6\t-15.6\t-17.2\t-16\t-14.8\t-14\t-13.2\t-12.4\t-12\t-12\t-13.6\t-14.4\t-13.6\t-13.2\t-11.6\t-8.4\t-6.8\t-4.8\t-6\t-4\t-5.2\t-5.2\t-6\t-6\t-6.4\t-6.4\t-4.4\t-5.2\t-4.4\t-6\t-6\t-7.2\t-7.2\t-8.8\t-10\t-11.2\t-10.4\t-10.8\t-10.8\t-11.6\t-10.8\t-10\t-10.8\t-11.2\t-12.8\t-10.8\t-8.8\t-9.2\t-11.6\t-11.6\t-11.6\t-10.4\t-10\t-8.8\t-8.8\t-7.6\t-7.6\t-6.4\t-5.6\t-6\t-6\t-5.6\t-4\t-3.2\t\n0\t0\t0\t0.4\t1.2\t0.8\t-1.2\t-2\t-2\t-3.6\t-4.4\t-6\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-5.2\t-3.2\t-3.2\t-8.8\t-10.4\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-14\t-14.4\t-14.4\t-14.4\t-14.4\t-14\t-13.2\t-12\t-12.8\t-13.2\t-14\t-14.4\t-15.2\t-15.6\t-17.2\t-18\t-18\t-18\t-18\t-18\t-18\t-18\t-18.8\t-19.2\t-19.6\t-20.8\t-23.2\t-24\t-25.6\t-26\t-26.4\t-27.2\t-28.4\t-27.6\t-29.6\t-30\t-28.4\t-26.8\t-29.2\t-27.6\t-26.8\t-27.2\t-26.8\t-28\t-30\t-30.8\t-31.2\t-30.8\t-27.6\t-23.2\t-16.4\t-15.2\t-16.8\t-18.8\t-16.4\t-15.6\t-15.2\t-14.4\t-13.6\t-13.2\t-14.4\t-14.8\t-15.2\t-14.8\t-13.6\t-12\t-9.2\t-9.2\t-8.8\t-8.4\t-6.8\t-8.8\t-7.2\t-6.4\t-8.4\t-8\t-7.2\t-5.6\t-6.8\t-5.6\t-6.8\t-6.8\t-7.6\t-7.6\t-9.2\t-10\t-10.8\t-10\t-11.2\t-11.2\t-12\t-12.8\t-11.2\t-12\t-12.4\t-12.8\t-10.4\t-10\t-11.6\t-12\t-11.2\t-12\t-10.8\t-10.4\t-9.2\t-9.2\t-8\t-7.2\t-7.2\t-6\t-5.6\t-6.4\t-6.4\t-4.8\t-4.4\t\n0\t0\t0\t0\t1.2\t1.6\t-0.4\t-2\t-2\t-2.8\t-4.4\t-6\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-3.6\t-2.8\t-7.2\t-9.6\t-10.4\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-13.6\t-14.4\t-14.4\t-14.4\t-14.4\t-14.4\t-14\t-12.4\t-12\t-12.8\t-13.2\t-14\t-14.4\t-15.2\t-15.6\t-17.2\t-18\t-18\t-18\t-18\t-18\t-18\t-18\t-18\t-18.8\t-18.8\t-20\t-22.4\t-23.2\t-24.8\t-26\t-26.4\t-26.8\t-28.4\t-28.4\t-29.6\t-28.4\t-27.6\t-27.6\t-28\t-27.2\t-26.4\t-26.8\t-27.6\t-28.4\t-30\t-30.8\t-31.6\t-28.4\t-24\t-18.8\t-16.4\t4691.6\t-18\t-18.8\t-16.8\t-16\t-15.6\t-14.8\t-14.8\t-14\t-14.8\t-15.2\t-15.6\t-15.2\t-14.8\t-12.8\t-12\t-11.2\t-10.8\t-10.4\t-10.8\t-8\t-8.4\t-8.4\t-7.6\t-9.2\t-8\t-7.6\t-7.6\t-7.6\t-7.6\t-8\t-8.4\t-8.8\t-9.2\t-10.4\t-10.4\t-10.8\t-10.8\t-11.6\t-12.4\t-13.2\t-12.8\t-12.8\t-14\t-12\t-10.8\t-11.6\t-12.8\t-12.8\t-11.6\t-11.6\t-11.6\t-11.2\t-10\t-8.8\t-8.8\t-7.6\t-7.6\t-6.4\t-6.4\t-6\t-6\t-5.6\t-4\t\n0\t0\t0\t0\t1.2\t1.2\t-0.4\t-1.2\t-2\t-2.8\t-3.6\t-4.8\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-4.8\t-3.6\t-2.8\t-8.8\t-10.4\t-11.2\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-13.2\t-14\t-14.4\t-14.4\t-14.4\t-14.4\t-14.4\t-14\t-12\t-12\t-12.8\t-13.2\t-14\t-14.4\t-15.2\t-15.6\t-17.2\t-18\t-18\t-18\t-18\t-18\t-18\t-18\t-18\t-18.4\t-18.4\t-19.6\t-22\t-22.8\t-24.4\t-26\t-26.4\t-26.8\t-28\t-28.4\t-28\t-28\t-26.8\t-28.8\t-28\t-26\t-28\t-27.2\t-27.2\t-29.6\t-30.8\t-30.8\t-30.8\t-25.2\t-19.2\t-18\t-18\t-18.8\t-18\t-18.4\t-17.2\t-16.8\t-16\t-15.6\t-15.2\t-14.8\t-14.4\t-15.2\t-15.2\t-16\t-15.2\t-13.6\t-12.4\t-13.2\t-11.6\t-11.6\t-11.6\t-9.6\t-9.6\t-9.2\t-8.4\t-9.6\t-9.6\t-8.8\t-8.8\t-8.8\t-8\t-8.8\t-8\t-10\t-10.8\t-10\t-10\t-11.2\t-11.2\t-12.4\t-12.8\t-13.2\t-13.6\t-14.4\t-13.2\t-11.6\t-11.6\t-12.8\t-13.6\t-12.4\t-12.4\t-11.2\t-12\t-11.2\t-10.4\t-9.6\t-8.4\t-8.4\t-7.2\t-7.2\t-6\t-6\t-6.8\t-6.4\t-4.8\t\n0\t0\t0\t0\t0.8\t2\t0.4\t-1.6\t-1.6\t-2.4\t-4\t-4.8\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-3.6\t-3.2\t-8.4\t-8.8\t-10.4\t-12\t-12.8\t-12.8\t-12.8\t-12.8\t-12.8\t-13.6\t-14.4\t-14.4\t-14.4\t-14.4\t-14.4\t-14.4\t-14\t-12\t-12\t-12.4\t-13.2\t-13.2\t-14.4\t-15.2\t-15.6\t-17.2\t-18\t-18\t-18\t-18\t-18\t-18\t-18\t-18\t-18\t-18\t-18.8\t-21.2\t-22\t-23.6\t-25.2\t-25.6\t-26.8\t-28\t-26.8\t-28\t-26.4\t-27.6\t-26.8\t-26.4\t-25.6\t-27.2\t-28\t-28.4\t-29.2\t-30.8\t-30.8\t-26.8\t-19.6\t-16.8\t-19.6\t-20\t-19.6\t-18.4\t-19.2\t-18\t-16.4\t-17.6\t-16\t-14.8\t-15.2\t-16\t-15.6\t-16.4\t-16.4\t-15.2\t-13.2\t-12.8\t-13.2\t-13.2\t-13.2\t-11.2\t-9.6\t-9.6\t-9.6\t-8.8\t-9.2\t-8.8\t-9.6\t-8.8\t-8.4\t-9.2\t-8.4\t-9.2\t-9.6\t-10.8\t-10\t-10.4\t-10.8\t-12\t-12\t-12.8\t-13.6\t-15.2\t-15.2\t-13.6\t-11.6\t-12.8\t-14.4\t-14\t-13.2\t-12\t-12\t-12\t-11.6\t-10.4\t-10\t-9.2\t-8\t-8\t-7.6\t-6.8\t-5.6\t-6.4\t-6.4\t-5.6\t\n0\t0\t0\t0\t0.4\t1.6\t0.4\t-0.8\t-1.6\t-2.4\t-4\t-4.8\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-3.6\t-2.8\t-9.6\t-8.8\t-10.4\t-12\t-12.8\t-12.8\t-12.8\t-13.2\t-14.4\t-14.4\t-14.4\t-14.4\t-14.4\t-14.4\t-14.4\t-13.6\t-12\t-12\t-12.4\t-13.2\t-13.2\t-14.4\t-14.4\t-15.6\t-17.2\t-18\t-18\t-18\t-18\t-18\t-18\t-18\t-18\t-18\t-17.2\t-18.4\t-20.8\t-21.2\t-22.8\t-24.4\t-25.2\t-26.8\t-26.4\t-26\t-25.6\t-27.6\t-27.2\t-26.4\t-24.8\t-25.6\t-27.2\t-28\t-28.8\t-29.2\t-30.8\t-28.4\t-21.2\t-16\t-18.4\t-22.4\t-20.8\t-19.6\t-18.4\t-18.8\t-16.8\t-16.4\t-16\t-16.4\t-15.6\t-15.2\t-16\t-15.6\t-16.8\t-16\t-15.6\t-13.6\t-13.2\t-13.6\t-13.6\t-14.8\t-12.4\t-10.4\t-9.2\t-10\t-9.6\t-9.6\t-10\t-9.6\t-9.6\t-9.6\t-8.8\t-9.6\t-9.2\t-10.4\t-11.6\t-9.6\t-10\t-11.6\t-11.6\t-12.4\t-13.6\t-14.4\t-15.2\t-16\t-13.6\t-12\t-12.8\t-14\t-14\t-13.2\t-12.8\t-12\t-11.6\t-11.6\t-11.2\t-10\t-8.8\t-8.8\t-8\t-7.6\t-6.8\t-6.4\t-6.4\t-6.8\t-5.6\t\n0\t0\t0\t0\t0\t1.2\t0.8\t-1.2\t-1.6\t-2.4\t-3.2\t-4\t-6.4\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-3.6\t-3.6\t-2.8\t-9.6\t-8.8\t-10.4\t-11.2\t-12.8\t-12.8\t-14\t-14.4\t-14.4\t-14.4\t-14.4\t-14.4\t-14.4\t-14.4\t-12.8\t-12\t-11.6\t-12.4\t-12.4\t-13.6\t-14\t-14.8\t-14.8\t-16.4\t-18\t-18\t-18\t-18\t-18\t-18\t-18\t-18\t-18\t-17.6\t-18\t-19.2\t-21.2\t-22.4\t-23.2\t-24.8\t-24.4\t-26\t-24.4\t-26.8\t-26.8\t-25.2\t-24.8\t-26\t-25.6\t-27.6\t-28.4\t-28.8\t-29.2\t-30\t-21.2\t-15.6\t-18\t-22\t-22.8\t-20\t-18.8\t-18.4\t-18.8\t-16.8\t-16.8\t-16.8\t-15.6\t-15.6\t-15.6\t-15.2\t-15.2\t-17.2\t-16.8\t-14.8\t-12.4\t-13.6\t-14.4\t-14.4\t-14\t-12\t-10.8\t-10.8\t-9.6\t-9.6\t-9.6\t-10\t-9.6\t-9.6\t-9.6\t-9.6\t-9.6\t-8.8\t-10.4\t-11.2\t-10.4\t-9.6\t-11.2\t-12.4\t-12.4\t-13.2\t-14.4\t-16\t-16\t-13.6\t-12\t-12.8\t-14.8\t-14\t-12.8\t-12.8\t-12\t-11.6\t-11.6\t-11.2\t-10\t-9.6\t-8.8\t-8.4\t-7.6\t-7.2\t-6.4\t-6\t-6.8\t-5.6\t\n0\t0\t0\t0\t0\t1.2\t1.2\t-0.4\t-2\t-2\t-3.6\t-4.4\t-6\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-3.6\t-3.6\t-2.8\t-9.6\t-8.8\t-10.4\t-11.2\t-13.6\t-14.4\t-14.4\t-14.4\t-14.4\t-14.4\t-14.4\t-14.4\t-14.4\t-12.8\t-12.4\t-11.6\t-11.6\t-12.8\t-13.6\t-14\t-14.8\t-14.8\t-16.4\t-18\t-18\t-18\t-18\t-18\t-18\t-18\t-18\t-18\t-17.6\t-17.2\t-18.4\t-20.4\t-21.6\t-22\t-21.6\t-22.8\t-23.6\t-24.8\t-26\t-26\t-24.4\t-24.8\t-24.8\t-26.4\t-27.6\t-28.8\t-28.8\t-28.4\t-22\t-15.6\t-16.8\t-21.6\t-23.6\t-22\t-20\t-18\t-18.8\t-18\t-16\t-16.8\t-17.2\t-15.2\t-15.6\t-14.8\t-15.2\t-15.6\t-16.4\t-16.4\t-14.4\t-13.2\t-12.8\t-14\t-14.8\t-14\t-12\t-10\t-11.2\t-9.6\t-9.6\t-10\t-10\t-9.6\t-9.6\t-9.6\t-9.2\t-9.6\t-10.4\t-10.4\t-10.8\t-10.4\t-10.4\t-10.8\t-12.4\t-13.2\t-13.2\t-14.4\t-16\t-15.6\t-13.2\t-12.8\t-13.6\t-14.8\t-14\t-13.6\t-12.8\t-11.6\t-11.6\t-11.6\t-11.2\t-10\t-9.6\t-8.8\t-8.4\t-7.6\t-7.2\t-6.4\t-6\t-6.8\t-6.4\t\n0\t0\t0\t0\t0\t0.8\t2\t0.4\t-1.2\t-2\t-2.8\t-4.4\t-6\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-3.6\t-3.6\t-6\t-9.6\t-8.8\t-10.8\t-11.6\t-14.4\t-14.4\t-14.4\t-14.4\t-14.4\t-14.4\t-14.4\t-14\t-12.8\t-12.4\t-11.6\t-12\t-12\t-13.2\t-13.2\t-14\t-15.2\t-15.6\t-17.2\t-18\t-18\t-18\t-18\t-18\t-18\t-18\t-18\t-18\t-17.2\t-17.6\t-19.6\t-20\t-20\t-20.8\t-21.2\t-23.6\t-24\t-24.4\t-24\t-23.6\t-24\t-24.8\t-26.4\t-28.8\t-28.8\t-28\t-19.6\t-14.8\t-16\t-21.2\t-23.6\t-22.8\t-21.2\t-20\t-18.4\t-18.8\t-17.2\t-16\t-16.8\t-14.8\t-15.2\t-15.2\t-15.2\t-15.2\t-16\t-16.4\t-16\t-13.6\t-12\t-12.8\t-14\t-14.4\t-13.2\t-11.6\t-10.4\t-9.6\t-10\t-10\t-10\t-10\t-9.6\t-9.2\t-9.6\t-10\t-9.6\t-9.6\t-10.4\t-11.2\t-10.4\t-10.4\t-10.8\t-12.4\t-13.2\t-13.2\t-14.4\t-16\t-15.6\t-13.2\t-12.8\t-13.6\t-14.8\t-14\t-13.6\t-12.8\t-11.6\t-11.6\t-11.6\t-11.2\t-10\t-9.6\t-8.8\t-8.4\t-7.6\t-7.2\t-6.4\t-6\t-6.8\t-6.4\t\n0\t0\t0\t0\t0\t0.4\t1.6\t1.2\t-0.8\t-1.6\t-2.4\t-3.6\t-5.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-3.6\t-3.6\t-6.8\t-10\t-9.6\t-11.2\t-12\t-12.8\t-14.4\t-14.4\t-14.4\t-14.4\t-14.4\t-13.6\t-12.8\t-12.4\t-12\t-11.6\t-12.4\t-12.4\t-13.2\t-14.4\t-14.4\t-15.6\t-17.2\t-18\t-18\t-18\t-18\t-18\t-18\t-18\t-18\t-18\t-17.6\t-16.4\t-16.8\t-17.6\t-18.4\t-18.8\t-21.2\t-21.2\t-22.8\t-22\t-21.2\t-24\t-24\t-25.6\t-26.4\t-28\t-28\t-19.2\t-13.6\t-15.2\t-20.4\t-23.6\t-23.6\t-21.2\t-20.4\t-19.2\t-18.8\t-16.8\t-16.4\t-16\t-15.2\t-15.6\t-14.4\t-14\t-15.2\t-15.6\t-16\t-16\t-14.4\t-12\t-11.6\t-12\t-14\t-13.2\t-12.4\t-11.2\t-10\t-10\t-8.4\t-10.4\t-9.2\t-10\t-10\t-8.8\t-9.6\t-8.4\t-9.6\t-10\t-10.4\t-11.2\t-9.6\t-10.4\t-11.2\t-12.4\t-13.2\t-13.2\t-14.4\t-16\t-15.6\t-13.2\t-12.8\t-13.6\t-14.8\t-14\t-12.8\t-12.8\t-12\t-11.6\t-11.6\t-11.2\t-10\t-9.6\t-8.8\t-8.4\t-7.6\t-7.2\t-6.4\t-6\t-6.8\t-6.4\t\n0\t0\t0\t0\t0\t0\t1.2\t1.6\t-0.4\t-1.6\t-2.4\t-3.2\t-4.8\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-6.4\t-3.6\t-3.6\t-6.8\t-11.6\t-10.8\t-10.4\t-12\t-12\t-12.8\t-14.4\t-14.4\t-14.4\t-13.2\t-12.8\t-12.8\t-12.4\t-11.6\t-11.6\t-12.8\t-12.8\t-14\t-14.8\t-14.8\t-16.4\t-18\t-18\t-18\t-18\t-18\t-18\t-18\t-18\t-17.2\t-16.4\t-14.8\t-15.2\t-14.8\t-16.8\t-19.2\t-19.6\t-20.4\t-19.6\t-20.4\t-22.4\t-21.6\t-24\t-25.2\t-26.8\t-27.2\t-18.8\t-12.4\t-12.8\t-19.2\t-22.8\t-23.6\t-22.8\t-20.4\t-19.6\t-19.2\t-19.2\t-17.2\t-14.8\t-15.2\t-16\t-14.4\t-14\t-13.6\t-14.4\t-15.6\t-14.8\t-15.6\t-13.2\t-12\t-10\t-12\t-12\t-12.4\t-12.4\t-11.2\t-9.2\t-7.6\t-9.2\t-10\t-8.4\t-9.6\t-9.2\t-9.2\t-9.2\t-8.8\t-9.2\t-9.2\t-10.8\t-10.4\t-9.6\t-10.8\t-11.2\t-12.4\t-13.2\t-13.2\t-14.4\t-16\t-15.2\t-13.6\t-11.6\t-12.8\t-14.4\t-14\t-13.2\t-12.8\t-12\t-11.6\t-11.6\t-11.2\t-10\t-9.6\t-8.8\t-8.4\t-7.6\t-7.2\t-6.4\t-6\t-6.8\t-5.6\t\n0\t0\t0\t0\t0\t0\t0.8\t2\t0.4\t-1.2\t-2\t-3.6\t-4\t-6.4\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-5.6\t-3.6\t-4.8\t-7.2\t-10.8\t-11.6\t-10.8\t-11.2\t-12\t-12\t-12.8\t-13.6\t-12.8\t-12.8\t-12.8\t-12.4\t-12\t-11.2\t-12.4\t-12.4\t-13.2\t-14\t-15.2\t-15.6\t-17.2\t-18\t-18\t-18\t-18\t-18\t-17.2\t-16.4\t-15.6\t-15.6\t-14.4\t-14\t-14.8\t-15.6\t-16.4\t-17.2\t-18.4\t-17.2\t-20.4\t-20\t-22\t-23.2\t-25.2\t-23.6\t-15.2\t-12.4\t-12.8\t-18.4\t-21.2\t-22.8\t-22\t-21.2\t-19.6\t-18.8\t-19.6\t-18.4\t-16\t-13.6\t-14.8\t-13.6\t-12.4\t-12.4\t-13.6\t-13.2\t-15.6\t-15.2\t-14.8\t-12.4\t-10.8\t-10.8\t-10.8\t-10.4\t-10\t-10\t-10\t-8.8\t-8\t-8.8\t-8.8\t-9.2\t-8.8\t-8.4\t-8.8\t-7.6\t-8.8\t-8.4\t-8.8\t-10.8\t-11.2\t-9.6\t-10\t-11.6\t-12.4\t-12.4\t-13.2\t-14.4\t-16\t-15.2\t-12.8\t-11.6\t-12\t-14.4\t-13.2\t-13.2\t-12\t-12\t-12\t-11.6\t-10.4\t-10\t-9.2\t-8.8\t-8\t-7.6\t-6.8\t-6.4\t-6\t-6.8\t-5.6\t\n0\t0\t0\t0\t0\t0\t0\t1.6\t2\t-0.8\t-1.2\t-2\t-3.6\t-6\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-5.6\t-5.2\t-6.8\t-9.2\t-11.6\t-11.2\t-10.8\t-11.2\t-12\t-11.6\t-10.4\t-11.2\t-12\t-12.8\t-12.4\t-11.6\t-11.6\t-12.4\t-12.8\t-13.6\t-14.4\t-14.8\t-16.4\t-18\t-17.2\t-17.2\t-16.4\t-15.6\t-15.6\t-15.6\t-14.8\t-14.4\t-15.2\t-14.8\t-14.4\t-13.6\t-14.4\t-14.4\t-16\t-18\t-18\t-20.4\t-21.2\t-22.4\t-20\t-9.6\t-10.8\t-12.4\t-19.2\t-19.2\t-18.8\t-20.4\t-19.6\t-18.8\t-18.8\t-19.6\t-19.2\t-17.6\t-15.6\t-13.6\t-12.4\t-12\t-12\t-12\t-12.4\t-13.2\t-14.4\t-14.4\t-12.8\t-10.8\t-10.8\t-9.6\t-8.4\t-10\t-7.2\t-7.6\t-6.8\t-8\t-7.2\t-7.6\t-9.2\t-8\t-7.6\t-7.6\t-7.2\t-7.6\t-8.4\t-7.6\t-9.2\t-9.6\t-10.4\t-9.6\t-10.8\t-10.8\t-11.6\t-12.4\t-13.6\t-13.6\t-14.4\t-15.2\t-13.2\t-11.6\t-12.4\t-13.6\t-13.6\t-12.4\t-12.4\t-11.6\t-12\t-11.2\t-10.4\t-9.6\t-9.2\t-8\t-8\t-7.6\t-6.8\t-5.6\t-6.4\t-6\t-5.6\t\n0\t0\t0\t0\t0\t0\t0\t1.2\t2.4\t-0.4\t-1.6\t-2.4\t-3.2\t-4.8\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.6\t-8.4\t-8\t-6.4\t-5.2\t-6.8\t-8.4\t-10\t-11.6\t-11.6\t-10.8\t-9.2\t-9.6\t-10.4\t-10.4\t-10.4\t-10\t-10.4\t-9.6\t-10\t-10.8\t-11.6\t-12.4\t-13.2\t-13.2\t-14.8\t-15.6\t-15.6\t-15.6\t-14.8\t-14.4\t-14.8\t-15.2\t-15.2\t-14.4\t-13.6\t-12.4\t-12\t-11.2\t-12.8\t-14.8\t-16\t-18.8\t-19.2\t-18.4\t-12\t-5.2\t-5.2\t-8\t-14.8\t-16.4\t-16.4\t-16\t-16.4\t-18.4\t-18.8\t-20\t-19.6\t-17.6\t-16.8\t-14.8\t-13.2\t-12\t-10.4\t-9.2\t-10.4\t-10.8\t-12.4\t-12.8\t-13.2\t-11.6\t-10\t-8.4\t-8\t-6.8\t-5.2\t-5.2\t-3.6\t-6\t-6\t-5.6\t-7.2\t-7.2\t-7.6\t-6.4\t-6.4\t-6.4\t-7.2\t-6.4\t-8\t-8.4\t-9.2\t-9.6\t-10.4\t-10\t-10.8\t-12\t-12\t-12.8\t-13.6\t-13.6\t-14.4\t-12.8\t-11.2\t-10.8\t-12.4\t-12.8\t-12.8\t-11.6\t-11.6\t-11.6\t-11.2\t-10\t-9.6\t-8.4\t-8.4\t-7.2\t-7.2\t-6\t-6\t-6.4\t-6.4\t-4.8\t\n0\t0\t0\t0\t0\t0\t0\t0.4\t1.6\t1.2\t-0.4\t-2\t-3.6\t-4\t-6.4\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-8\t-8.8\t-8.8\t-8.4\t-6.8\t-5.6\t-5.2\t-6.8\t-9.2\t-10.4\t-10.8\t-10\t-9.6\t-9.6\t-9.2\t-9.6\t-9.6\t-10\t-9.2\t-9.2\t-9.6\t-10.4\t-11.2\t-11.2\t-11.6\t-13.2\t-14.8\t-14.4\t-14.8\t-15.2\t-15.2\t-15.2\t-14.8\t-13.6\t-12.8\t-12\t-11.6\t-11.2\t-12\t-12.8\t-13.2\t-14.4\t-16\t-15.6\t-10\t-4.8\t-6.8\t-10\t-12.8\t-14.8\t-14.4\t-15.2\t-15.6\t-15.6\t-18\t-19.6\t-18.8\t-18.4\t-16.8\t-15.6\t-14.4\t-13.6\t-12\t-10\t-8.8\t-8\t-8.4\t-9.6\t-10\t-10\t-7.6\t-6.4\t-5.6\t-4\t-2\t-0.8\t-0.8\t-1.11022e-16\t-0.8\t-2\t-3.2\t-5.6\t-5.6\t-4.8\t-4.8\t-4\t-4.8\t-6\t-6.4\t-7.2\t-8\t-8.4\t-10.4\t-10.8\t-10.4\t-10.4\t-11.2\t-12.4\t-12.4\t-12.4\t-12.8\t-13.2\t-13.6\t-12\t-10.4\t-11.2\t-12.4\t-12.4\t-12\t-12\t-11.6\t-10.4\t-10\t-9.2\t-8.8\t-8\t-7.6\t-6.4\t-6.4\t-6\t-6.8\t-5.6\t-4.8\t\n0\t0\t0\t0\t0\t0\t0\t0\t1.2\t2.4\t-1.11022e-16\t-1.6\t-2\t-3.6\t-6\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.6\t-8.8\t-8.8\t-8.8\t-8.8\t-8.8\t-7.6\t-6.4\t-5.6\t-6\t-6.8\t-8\t-8\t-9.2\t-9.2\t-10\t-10\t-10\t-9.6\t-9.2\t-8.4\t-8.4\t-9.2\t-9.2\t-10.4\t-10.8\t-12.8\t-14.4\t-15.2\t-15.2\t-14.8\t-14\t-13.6\t-12.8\t-12\t-11.6\t-11.2\t-11.6\t-11.2\t-11.6\t-12.4\t-13.2\t-14.4\t-11.6\t-5.6\t-1.2\t-2.4\t-7.6\t-12\t-12\t-12\t-13.2\t-14.4\t-16\t-15.6\t-15.6\t-17.6\t-18.4\t-17.6\t-14.8\t-14.4\t-13.2\t-12\t-11.2\t-10\t-9.6\t-8\t-7.6\t-6.8\t-5.6\t-3.2\t-0.4\t0.4\t0.8\t1.6\t2.4\t6\t6\t5.2\t6.4\t6\t3.6\t2.4\t2\t-1.2\t-2.8\t-2.8\t-4.4\t-4.8\t-6\t-6.4\t-7.6\t-8\t-10\t-10.4\t-10.4\t-10.8\t-10.8\t-11.6\t-12.8\t-11.2\t-11.2\t-11.6\t-13.2\t-11.6\t-10\t-9.6\t-10.4\t-11.6\t-11.6\t-11.6\t-11.2\t-9.6\t-9.6\t-8.4\t-8.4\t-7.2\t-7.2\t-6.8\t-5.6\t-6.4\t-6.4\t-5.6\t-4.4\t\n0\t0\t0\t0\t0\t0\t0\t0\t0.4\t2\t1.2\t-1.2\t-1.6\t-3.2\t-4.8\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-8.4\t-8.8\t-8.8\t-8.8\t-8.8\t-8.8\t-8.8\t-8\t-7.2\t-6.4\t-5.6\t-5.2\t-5.2\t-6.8\t-7.6\t-8.4\t-8\t-9.6\t-9.2\t-8.8\t-8.4\t-7.6\t-7.6\t-8.4\t-9.6\t-10.8\t-11.6\t-11.6\t-12.8\t-13.6\t-12.8\t-12\t-12\t-11.6\t-11.2\t-11.6\t-11.2\t-10.8\t-11.6\t-11.6\t-12.8\t-14.4\t-12.4\t-6.8\t-4.8\t-6\t-7.6\t-8.8\t-8\t-7.2\t-8\t-9.6\t-10.8\t-13.2\t-14.4\t-15.6\t-15.2\t-14.8\t-14.4\t-14\t-12.4\t-12.4\t-11.2\t-10\t-10\t-10\t-10\t-9.6\t-6.8\t-4.8\t-3.2\t-1.6\t-1.2\t-1.2\t0.8\t2\t4\t4.4\t4.4\t4\t4\t2.8\t2.4\t1.2\t-0.4\t-2\t-2.4\t-3.6\t-4.8\t-6\t-6.4\t-7.6\t-8\t-9.2\t-10\t-10.8\t-10.4\t-10.4\t-11.2\t-10.4\t-10\t-10.4\t-10.4\t-12\t-11.6\t-10.8\t-8.4\t-8.4\t-11.2\t-12\t-10.8\t-10.4\t-9.2\t-9.2\t-8\t-8\t-7.6\t-6.4\t-6.4\t-6\t-6.8\t-5.6\t-4.8\t-3.6\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t1.2\t2.4\t-1.11022e-16\t-1.2\t-2\t-4.4\t-6.4\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-8\t-8.8\t-8.8\t-8.8\t-8.8\t-8.8\t-8.8\t-8.8\t-8.8\t-8.8\t-8\t-7.2\t-5.6\t-4.8\t-4.8\t-5.2\t-5.2\t-6\t-6.8\t-6.8\t-7.6\t-7.2\t-6.8\t-6\t-6\t-6.8\t-7.6\t-8.4\t-8.8\t-9.6\t-11.2\t-11.6\t-10.8\t-11.6\t-11.6\t-11.6\t-10.8\t-11.6\t-11.6\t-11.6\t-12\t-12.8\t-12\t-9.6\t-8.4\t-9.6\t-12\t-12.4\t-10.4\t-9.6\t-8.8\t-8.8\t-7.6\t-6.8\t-6\t-6.4\t-10\t-10.8\t-9.6\t-11.2\t-10.8\t-11.2\t-10.4\t-10.4\t-9.2\t-9.6\t-9.6\t-9.2\t-8\t-8.4\t-6.4\t-6.4\t-5.2\t-4.8\t-3.6\t-3.2\t-0.8\t-1.11022e-16\t0.4\t0.8\t0.4\t-0.4\t-0.8\t-1.2\t-1.2\t-1.2\t-2.4\t-3.6\t-3.6\t-4\t-5.6\t-6.4\t-6.4\t-7.6\t-8.4\t-9.2\t-10.4\t-10.8\t-10\t-10\t-8.4\t-8.8\t-8.8\t-8.4\t-9.2\t-10.4\t-10\t-9.2\t-7.2\t-9.2\t-10.8\t-10.4\t-10\t-8.8\t-8.4\t-7.6\t-7.2\t-7.2\t-6\t-6\t-6.4\t-6.4\t-4.8\t-4.4\t-3.2\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t2\t2\t-1.2\t-1.6\t-3.2\t-5.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-6.8\t-7.6\t-8.8\t-8.8\t-8.8\t-8.8\t-8.8\t-8.8\t-8.8\t-8.8\t-8.8\t-8.8\t-8.8\t-6.4\t-6\t-5.6\t-5.2\t-4.8\t-5.2\t-5.6\t-5.6\t-5.6\t-5.6\t-5.2\t-4.4\t-4\t-4\t-4.8\t-5.6\t-6.8\t-8.4\t-9.2\t-11.2\t-11.2\t-10.8\t-11.2\t-11.6\t-11.6\t-11.6\t-12\t-12.4\t-12.4\t-12.4\t-11.6\t-10.4\t-11.2\t-12.4\t-12.4\t-12.4\t-12.4\t-12.4\t-12.4\t-10.8\t-10\t-8.8\t-8\t-7.2\t-5.2\t-2.8\t-2\t-0.8\t-6.8\t-8.4\t-8.4\t-6.4\t-7.2\t-8\t-8\t-7.6\t-8\t-6.8\t-5.6\t-4.8\t-3.6\t-2.8\t-2\t-2\t-1.2\t-0.8\t-1.11022e-16\t0.4\t2\t0.4\t-0.4\t-1.11022e-16\t-0.8\t-1.2\t-2\t-3.2\t-4\t-4.4\t-4.4\t-5.2\t-6.4\t-7.2\t-7.6\t-8.4\t-10\t-10.4\t-8.8\t-7.2\t-7.6\t-6.8\t-7.2\t-7.2\t-8\t-8.4\t-9.2\t-8.8\t-8.4\t-6.8\t-7.2\t-9.6\t-8.8\t-8.4\t-7.6\t-7.2\t-7.2\t-6\t-5.6\t-6.4\t-6\t-4.8\t-4\t-3.2\t-2.8\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0.8\t2.4\t0.8\t-1.2\t-2\t-4\t-6.4\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-6.4\t-6.4\t-7.2\t-8\t-8.8\t-8.8\t-8.8\t-8.8\t-8.8\t-8.8\t-8.8\t-8.8\t-8.4\t-7.2\t-7.2\t-6.8\t-6.4\t-6.4\t-6\t-5.6\t-5.6\t-5.2\t-5.2\t-6\t-5.6\t-5.2\t-4.4\t-4.4\t-4\t-4.8\t-5.6\t-8\t-8.8\t-11.6\t-11.6\t-11.6\t-12\t-12.4\t-12.4\t-12.4\t-12.4\t-12.4\t-12.4\t-12\t-12.4\t-12.4\t-12.4\t-12.4\t-12.4\t-12.4\t-12.4\t-12.4\t-12.4\t-12.4\t-12.4\t-11.6\t-8.8\t-6.4\t-3.6\t-3.2\t-2\t-1.2\t-1.2\t-1.11022e-16\t-0.8\t-6\t-6.8\t-7.2\t-7.6\t-6.4\t-5.2\t-4.4\t-3.2\t-2.8\t-2.4\t-2\t-0.8\t-1.6\t-1.2\t-0.8\t0.4\t0.8\t1.2\t2\t0.8\t-1.11022e-16\t-1.11022e-16\t-1.2\t-2\t-2.4\t-3.2\t-4\t-4.4\t-5.2\t-6.4\t-6.4\t-7.2\t-7.6\t-7.6\t-6.8\t-6.4\t-5.6\t-5.2\t-5.6\t-5.2\t-5.6\t-6\t-7.2\t-8.8\t-8.4\t-7.2\t-5.6\t-5.6\t-6\t-7.2\t-7.2\t-6.8\t-6\t-5.6\t-6\t-6\t-4.8\t-4\t-3.2\t-2.8\t-0.8\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t1.6\t2.8\t-0.4\t-1.6\t-2.8\t-5.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-6\t-6\t-6.4\t-7.2\t-7.2\t-8\t-8.8\t-8.8\t-8.8\t-8.8\t-8.8\t-8.8\t-7.6\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-6.8\t-6.4\t-6.4\t-6.4\t-6.4\t-6.4\t-6.4\t-6\t-5.6\t-4.8\t-4\t-4\t-4.8\t-5.6\t-8\t-8.8\t-11.6\t-12.4\t-12.4\t-12.4\t-12.4\t-12.4\t-12.4\t-12.4\t-12.4\t-12.4\t-12.4\t-12.4\t-12.4\t-12.4\t-12.4\t-12.4\t-12.4\t-12.4\t-12.4\t-12.4\t-10.8\t-10\t-8.4\t-8\t-8\t-6.8\t-6.8\t-2.4\t-1.2\t-2\t-3.2\t-3.6\t-4\t-4.4\t-4.8\t-3.2\t-2.4\t-2.8\t-1.6\t-2\t-2\t-2\t-2\t-1.6\t-1.2\t-1.2\t0\t0\t0.8\t2\t2.4\t2.4\t1.6\t0.4\t0.4\t-0.4\t-1.6\t-2.4\t-3.2\t-3.6\t-4.4\t-4.8\t-4.8\t-3.2\t-3.6\t-4.8\t-3.6\t-4.4\t-2.8\t-2.4\t-3.6\t-3.2\t-4.8\t-4.8\t-6.4\t-6.8\t-6.4\t-5.2\t-3.6\t-3.6\t-4\t-3.6\t-5.2\t-5.6\t-6\t-5.2\t-4.8\t-4\t-3.2\t-2\t1.11022e-16\t4.8\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0.4\t2\t2.4\t-1.2\t-2\t-4\t-6.4\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-6.8\t-6.4\t-6\t-6\t-6.4\t-6.4\t-7.2\t-8\t-8\t-8.8\t-8.8\t-8.8\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-6.8\t-6.8\t-6.8\t-6.8\t-6.4\t-5.6\t-5.2\t-4\t-4.4\t-5.6\t-7.6\t-9.2\t-10.8\t-12.4\t-12.4\t-12.4\t-12.4\t-12.4\t-12.4\t-12.4\t-12.4\t-12.4\t-12.4\t-12.4\t-12.4\t-12.4\t-12.4\t-12.4\t-12.4\t-10.8\t-10\t-9.2\t-7.6\t-7.6\t-7.2\t-6\t-6\t-5.6\t-5.6\t-6.4\t-6.8\t-6.8\t-5.2\t-5.2\t-5.2\t-4.4\t-3.2\t-3.2\t-3.2\t-2.4\t-3.6\t-3.2\t-2.4\t-2\t-1.6\t-0.8\t-0.4\t-0.4\t-0.8\t0\t0.8\t1.6\t2\t2.8\t3.6\t4.4\t4.8\t6\t3.6\t2.8\t2.8\t2.8\t1.6\t2.4\t1.6\t1.6\t1.6\t0.4\t-0.8\t-0.4\t-0.8\t-0.8\t-1.2\t-0.8\t-1.2\t-2\t-2.4\t-3.6\t-4.4\t-4\t-1.6\t-1.6\t-1.2\t-1.6\t-1.6\t-1.2\t-0.8\t1.6\t1.6\t3.6\t5.6\t4.8\t4\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t1.2\t2.8\t1.2\t-0.8\t-3.2\t-5.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-6.8\t-6.4\t-6\t-6\t-6.4\t-6.4\t-7.2\t-7.2\t-8\t-8.4\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-6.8\t-6.4\t-5.2\t-4.4\t-3.6\t-3.6\t-4.4\t-7.6\t-9.2\t-11.6\t-12.4\t-12.4\t-12.4\t-12.4\t-12.4\t-12.4\t-12.4\t-12.4\t-12.4\t-12.4\t-12.4\t-12.4\t-10.8\t-10\t-9.2\t-7.6\t-7.2\t-6.8\t-6\t-5.6\t-5.6\t-5.2\t-6\t-6.4\t-6.8\t-7.2\t-7.2\t-7.2\t-7.2\t-6.4\t-5.6\t-5.2\t-4\t-4\t-3.6\t-3.6\t-2.8\t-2.4\t-1.6\t-1.2\t-1.2\t0\t-0.8\t-0.4\t0\t0\t0\t0.8\t1.6\t2\t2.8\t3.6\t4.4\t5.2\t6\t6.4\t7.2\t8\t7.6\t8\t8.4\t8.4\t8.4\t8.4\t8\t8\t5.6\t4.4\t4\t4.8\t4.4\t4\t2.8\t2\t0.8\t-1.6\t-1.2\t-0.4\t0.4\t0.8\t1.6\t3.6\t6.4\t5.6\t5.2\t4.4\t3.6\t0.4\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t1.6\t2.8\t-1.11022e-16\t-1.2\t-3.6\t-6.4\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-6.8\t-6.4\t-6.4\t-6\t-5.6\t-6.4\t-6.4\t-8\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-6.8\t-6\t-5.2\t-4\t-3.6\t-2\t-2.8\t-3.6\t-9.2\t-10.8\t-12.4\t-12.4\t-12.4\t-12.4\t-12.4\t-12.4\t-11.6\t-10.8\t-9.2\t-9.2\t-7.6\t-7.6\t-6.8\t-6.8\t-6\t-5.6\t-5.2\t-5.2\t-5.6\t-6\t-6.8\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-5.6\t-4.8\t-4.8\t-3.6\t-3.6\t-3.2\t-2.8\t-2.4\t-2\t-2\t-0.8\t-0.4\t-0.4\t-0.8\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t1.2\t2\t2.8\t2.8\t3.6\t4\t4.4\t4.8\t5.2\t5.2\t5.6\t5.6\t5.6\t6\t6\t6.4\t6.8\t6.8\t7.2\t7.2\t7.2\t6.8\t6.4\t5.6\t5.2\t5.2\t4.8\t4.8\t4\t3.2\t2.8\t1.6\t0.8\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t2\t3.2\t-0.4\t-1.6\t-4\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-6.8\t-6.8\t-6.4\t-6\t-6\t-6.8\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-6.8\t-5.2\t-4\t-3.2\t-2\t-2\t-2\t-2\t-2\t-2.8\t-6\t-7.6\t-7.6\t-6.8\t-6.8\t-6\t-6\t-5.2\t-4.8\t-5.2\t-4.8\t-4.4\t-5.2\t-5.6\t-6\t-6.4\t-6.8\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-5.6\t-4.8\t-4.8\t-3.6\t-3.2\t-4\t-3.6\t-2.4\t-2\t-1.6\t-1.6\t-0.4\t0\t-0.8\t-0.4\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t1.2\t2\t2.4\t2\t2.4\t3.6\t3.6\t3.6\t4\t4.4\t4.4\t4.4\t3.6\t3.6\t2.8\t2\t0.4\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0.4\t2.4\t3.6\t-0.8\t-2.8\t-5.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-6.8\t-6.8\t-6.8\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-6.8\t-6\t-3.6\t-2\t-2\t-2\t-2\t-2\t-2\t-2\t-2.4\t-2.8\t-3.2\t-3.6\t-4\t-4.4\t-4.8\t-5.2\t-6\t-6.4\t-6.8\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-6.4\t-4.8\t-4.4\t-4.4\t-4\t-3.6\t-3.6\t-2.8\t-2.4\t-1.6\t-1.2\t-0.8\t0\t-0.4\t-0.4\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0.8\t2.8\t3.2\t-0.4\t-2.4\t-6.4\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-6.8\t-5.2\t-4.4\t-4.4\t-4.8\t-4.8\t-5.2\t-5.2\t-6\t-6.4\t-6.4\t-6.8\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-6.4\t-5.6\t-4.4\t-4\t-4\t-3.6\t-3.2\t-2.8\t-2.4\t-2\t-1.2\t-0.8\t-0.4\t-0.4\t-0.8\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t1.2\t2.8\t2.8\t-0.8\t-4.4\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-6.4\t-5.6\t-4.4\t-4\t-4\t-3.6\t-3.2\t-2.8\t-2.4\t-2\t-1.6\t-0.8\t-0.4\t0\t-0.8\t-0.4\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t1.6\t3.2\t2.8\t-0.8\t-4.4\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-6.4\t-5.6\t-4.4\t-4\t-3.6\t-3.6\t-4\t-2.8\t-2.4\t-2\t-1.6\t-1.2\t-0.4\t0\t-0.4\t-0.4\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t1.6\t3.2\t4\t-1.2\t-5.6\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-6.4\t-5.6\t-4.4\t-4\t-3.6\t-3.6\t-4\t-2.8\t-2.4\t-2\t-1.6\t-1.2\t-0.8\t0\t-0.4\t-0.8\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t1.6\t3.6\t4.8\t-0.8\t-5.6\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-6.4\t-4.8\t-4.4\t-4\t-3.6\t-3.6\t-4\t-2.8\t-2\t-2\t-1.6\t-1.2\t-0.8\t-0.8\t-0.4\t-0.8\t-0.4\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t1.2\t3.6\t5.2\t-0.8\t-6.4\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-5.6\t-4.8\t-4.4\t-4\t-4\t-3.6\t-4\t-2.8\t-2\t-2\t-1.6\t-1.2\t-0.8\t-0.4\t-0.4\t-0.8\t-0.4\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t3.6\t5.2\t-0.8\t-6.4\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-6.4\t-5.6\t-4.8\t-4.4\t-4.4\t-4\t-3.6\t-3.2\t-2.8\t-2\t-2\t-1.6\t-1.2\t-0.8\t-0.4\t-0.4\t-0.8\t-0.4\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t3.2\t5.2\t1.2\t-6.4\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-6.4\t-5.6\t-4.8\t-4.8\t-3.6\t-4\t-3.6\t-3.2\t-2.8\t-2.4\t-2\t-1.6\t-1.2\t-0.8\t-0.4\t-0.4\t-0.8\t-0.4\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t3.2\t5.2\t6\t-5.6\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-6.4\t-5.6\t-4.8\t-4.4\t-4\t-3.6\t-3.2\t-3.6\t-3.2\t-2.8\t-2.4\t-2\t-1.6\t-1.2\t-0.8\t-0.4\t-0.4\t-0.8\t-0.4\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t4.8\t6.4\t-4\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-5.6\t-5.6\t-4.8\t-4.8\t-4.4\t-4\t-3.6\t-4\t-3.6\t-2.8\t-2.4\t-2\t-1.6\t-1.2\t-0.8\t0\t-0.4\t-0.8\t-0.4\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t4.4\t6.4\t4.8\t-5.6\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-6.4\t-5.6\t-4.8\t-4.4\t-4\t-3.6\t-3.2\t-3.6\t-3.2\t-2.8\t-2\t-2.4\t-2\t-1.6\t-1.6\t-0.4\t0\t-0.4\t-0.8\t-0.4\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t6\t5.6\t-2.4\t-5.6\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-6.4\t-5.6\t-4.8\t-4.4\t-4\t-3.6\t-4\t-3.6\t-4\t-3.6\t-2.8\t-2.4\t-2\t-1.6\t-1.2\t-0.8\t-0.4\t0\t-0.4\t-0.8\t-0.4\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t3.6\t5.6\t4\t-3.2\t-5.6\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-6.4\t-5.6\t-5.6\t-4.8\t-4.4\t-4\t-3.6\t-4\t-3.2\t-3.6\t-3.2\t-2.8\t-2\t-2.4\t-2\t-1.6\t-1.2\t-0.8\t-0.4\t0\t-0.8\t-0.4\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t4.8\t5.2\t0.8\t-2.4\t-4.8\t-5.6\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-6.4\t-6.4\t-5.6\t-4.8\t-4.8\t-4.4\t-4\t-3.6\t-3.6\t-3.2\t-3.6\t-3.2\t-2.8\t-2\t-2.4\t-2\t-1.6\t-1.2\t-0.8\t-0.4\t0\t-0.4\t-0.8\t-0.4\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t1.2\t4\t4.8\t0.8\t-2.4\t-4\t-4.8\t-5.6\t-6.4\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-6.4\t-5.6\t-5.6\t-4.8\t-4.8\t-4.4\t-3.6\t-4\t-3.6\t-3.2\t-3.2\t-3.6\t-3.2\t-2.8\t-2\t-2.4\t-2\t-1.6\t-0.8\t-0.4\t1.11022e-16\t0.4\t0\t-0.4\t-0.8\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t2.4\t3.6\t4.4\t1.11022e-16\t-1.6\t-2.4\t-3.2\t-4\t-4.8\t-5.6\t-5.6\t-6.4\t-6.4\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-7.2\t-6.4\t-6.4\t-5.6\t-5.6\t-5.6\t-4.8\t-4.8\t-4\t-4.4\t-3.6\t-4\t-3.6\t-3.6\t-3.2\t-3.6\t-3.2\t-3.2\t-2.8\t-2\t-2.4\t-2\t-1.2\t-0.8\t-1.2\t-0.8\t-0.4\t0\t-0.4\t-0.8\t-0.4\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t1.6\t2.8\t3.6\t0.4\t-0.8\t-2\t-2\t-2.4\t-3.2\t-4\t-4\t-4.8\t-4.8\t-4.8\t-4.8\t-4.8\t-5.6\t-5.6\t-4.8\t-4.8\t-4.8\t-4.8\t-4.8\t-4\t-4\t-4.4\t-3.6\t-4\t-3.2\t-3.6\t-2.8\t-3.2\t-3.6\t-2.8\t-3.2\t-2.8\t-2\t-2\t-1.6\t-2\t-1.6\t-0.8\t-0.4\t-0.8\t-0.4\t0\t-0.4\t-0.8\t-0.4\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0.8\t2.4\t2.8\t1.11022e-16\t-1.2\t-0.8\t-2\t-2.4\t-2.4\t-2.4\t-2.8\t-2.8\t-2.8\t-2.8\t-3.6\t-3.6\t-3.6\t-3.6\t-3.2\t-3.2\t-3.2\t-3.2\t-3.6\t-2.8\t-3.2\t-3.2\t-3.6\t-3.6\t-3.2\t-3.2\t-2.8\t-2\t-2\t-2.4\t-2\t-1.2\t-1.6\t-1.2\t-0.8\t1.11022e-16\t0.4\t0\t-0.4\t-0.8\t-0.4\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t-0.4\t1.2\t2\t2.8\t0.4\t-0.8\t-1.6\t-1.2\t-2\t-1.6\t-2.4\t-2.4\t-3.2\t-3.2\t-3.2\t-3.2\t-3.2\t-3.2\t-2.8\t-2.8\t-2.8\t-3.2\t-2.4\t-2.4\t-2.8\t-2\t-2\t-2\t-1.6\t-2\t-1.2\t-1.6\t-1.2\t-0.4\t1.11022e-16\t-0.4\t0\t0\t-0.4\t-0.8\t-0.4\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0.8\t1.6\t2\t0.8\t0.4\t-0.4\t-1.2\t-1.2\t-2\t-2\t-2\t-2\t-2\t-2\t-2\t-2\t-2\t-2\t-1.6\t-1.6\t-1.6\t-1.2\t-1.2\t-0.8\t-0.8\t-0.4\t-0.4\t1.11022e-16\t-0.4\t0.4\t0\t-0.4\t-0.8\t-0.8\t-0.4\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t-0.4\t0.4\t0.8\t1.2\t1.6\t0.8\t0.8\t0.4\t-0.4\t-0.4\t-0.4\t-0.4\t-0.4\t-0.4\t-0.8\t-0.8\t-0.8\t1.11022e-16\t-0.4\t-0.4\t1.11022e-16\t1.11022e-16\t0.4\t0.4\t0\t0\t-0.4\t-0.8\t-0.8\t-0.4\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t-0.4\t-0.8\t-0.4\t0\t0.4\t0.4\t0.4\t0.4\t0.8\t0.8\t0.4\t0.4\t0.4\t0.4\t0.4\t0\t0\t0\t-0.4\t-0.4\t-0.8\t-0.8\t-0.4\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t-0.4\t-0.4\t-0.4\t-0.8\t-0.8\t-0.8\t-0.8\t-0.8\t-0.4\t-0.4\t-0.4\t-0.4\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\n0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t",
                    "name": "map.txt"
                  },
                  {
                    "text": "#include <iostream>\n#include <math.h>\n#include <vector>\n#include <algorithm>\n#include <fstream>\n\nusing namespace std;\n\n// Map class\nclass Map {\npublic:\n    const static int mapHeight = 300;\n    const static int mapWidth = 150;\n    vector<vector<double> > map = GetMap();\n    vector<vector<int> > grid = MaptoGrid();\n    vector<vector<int> > heuristic = GenerateHeuristic();\n\nprivate:\n    // Read the file and get the map\n    vector<vector<double> > GetMap()\n    {\n        vector<vector<double> > mymap(mapHeight, vector<double>(mapWidth));\n        ifstream myReadFile;\n        myReadFile.open(\"map.txt\");\n\n        while (!myReadFile.eof()) {\n            for (int i = 0; i < mapHeight; i++) {\n                for (int j = 0; j < mapWidth; j++) {\n                    myReadFile >> mymap[i][j];\n                }\n            }\n        }\n        return mymap;\n    }\n\n    //Convert the map to 1's and 0's\n    vector<vector<int> > MaptoGrid()\n    {\n        vector<vector<int> > grid(mapHeight, vector<int>(mapWidth));\n        for (int x = 0; x < mapHeight; x++) {\n            for (int y = 0; y < mapWidth; y++) {\n                if (map[x][y] == 0) //unkown state\n                    grid[x][y] = 1;\n\n                else if (map[x][y] > 0) //Occupied state\n                    grid[x][y] = 1;\n\n                else //Free state\n                    grid[x][y] = 0;\n            }\n        }\n\n        return grid;\n    }\n\n    // Generate a Manhattan Heuristic Vector\n    vector<vector<int> > GenerateHeuristic()\n    {\n        vector<vector<int> > heuristic(mapHeight, vector<int>(mapWidth));\n        int goal[2] = { 60, 50 };\n        for (int i = 0; i < heuristic.size(); i++) {\n            for (int j = 0; j < heuristic[0].size(); j++) {\n                int xd = goal[0] - i;\n                int yd = goal[1] - j;\n                // Manhattan Distance\n                   int d = abs(xd) + abs(yd);\n                // Euclidian Distance\n                // double d = sqrt(xd * xd + yd * yd);\n                // Chebyshev distance\n                // int d = max(abs(xd), abs(yd));\n                heuristic[i][j] = d;\n            }\n        }\n        return heuristic;\n    }\n};\n\n// Planner class\nclass Planner : Map {\npublic:\n    int start[2] = { 230, 145 };\n    int goal[2] = { 60, 50 };\n    int cost = 1;\n\n    string movements_arrows[4] = { \"^\", \"<\", \"v\", \">\" };\n\n    vector<vector<int> > movements{\n        { -1, 0 },\n        { 0, -1 },\n        { 1, 0 },\n        { 0, 1 }\n    };\n\n    vector<vector<int> > path;\n};\n\n// Printing vectors of any type\ntemplate <typename T>\nvoid print2DVector(T Vec)\n{\n    for (int i = 0; i < Vec.size(); ++i) {\n        for (int j = 0; j < Vec[0].size(); ++j) {\n            cout << Vec[i][j] << ' ';\n        }\n        cout << endl;\n    }\n}\n\nPlanner search(Map map, Planner planner)\n{\n    // Create a closed 2 array filled with 0s and first element 1\n    vector<vector<int> > closed(map.mapHeight, vector<int>(map.mapWidth));\n    closed[planner.start[0]][planner.start[1]] = 1;\n\n    // Create expand array filled with -1\n    vector<vector<int> > expand(map.mapHeight, vector<int>(map.mapWidth, -1));\n\n    // Create action array filled with -1\n    vector<vector<int> > action(map.mapHeight, vector<int>(map.mapWidth, -1));\n\n    // Defined the quadruplet values\n    int x = planner.start[0];\n    int y = planner.start[1];\n    int g = 0;\n    int f = g + map.heuristic[x][y];\n\n    // Store the expansions\n    vector<vector<int> > open;\n    open.push_back({ f, g, x, y });\n\n    // Flags and Counts\n    bool found = false;\n    bool resign = false;\n    int count = 0;\n\n    int x2;\n    int y2;\n\n    // While I am still searching for the goal and the problem is solvable\n    while (!found && !resign) {\n        // Resign if no values in the open list and you can't expand anymore\n        if (open.size() == 0) {\n            resign = true;\n            cout << \"Failed to reach a goal\" << endl;\n        }\n        // Keep expanding\n        else {\n            // Remove quadruplets from the open list\n            sort(open.begin(), open.end());\n            reverse(open.begin(), open.end());\n            vector<int> next;\n            // Stored the poped value into next\n            next = open.back();\n            open.pop_back();\n\n            x = next[2];\n            y = next[3];\n            g = next[1];\n\n            // Fill the expand vectors with count\n            expand[x][y] = count;\n            count += 1;\n            \n\n            // Check if we reached the goal:\n            if (x == planner.goal[0] && y == planner.goal[1]) {\n                found = true;\n                //cout << \"[\" << g << \", \" << x << \", \" << y << \"]\" << endl;\n            }\n\n            //else expand new elements\n            else {\n                for (int i = 0; i < planner.movements.size(); i++) {\n                    x2 = x + planner.movements[i][0];\n                    y2 = y + planner.movements[i][1];\n                    if (x2 >= 0 && x2 < map.grid.size() && y2 >= 0 && y2 < map.grid[0].size()) {\n                        if (closed[x2][y2] == 0 and map.grid[x2][y2] == 0) {\n                            int g2 = g + planner.cost;\n                            f = g2 + map.heuristic[x2][y2];\n                            open.push_back({ f, g2, x2, y2 });\n                            closed[x2][y2] = 1;\n                            action[x2][y2] = i;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    // Print the expansion List\n    //print2DVector(expand);\n\n    // Find the path with robot orientation\n    vector<vector<string> > policy(map.mapHeight, vector<string>(map.mapWidth, \"-\"));\n\n    // Going backward\n    x = planner.goal[0];\n    y = planner.goal[1];\n    policy[x][y] = '*';\n\n    while (x != planner.start[0] or y != planner.start[1]) {\n        x2 = x - planner.movements[action[x][y]][0];\n        y2 = y - planner.movements[action[x][y]][1];\n        // Store the  Path in a vector\n        planner.path.push_back({ x2, y2 });\n        policy[x2][y2] = planner.movements_arrows[action[x][y]];\n        x = x2;\n        y = y2;\n    }\n\n    // Print the robot path\n    //cout << endl;\n    print2DVector(policy);\n\n    return planner;\n}\n\nint main()\n{\n    // Instantiate a planner and map objects\n    Map map;\n    Planner planner;\n    // Generate the shortest Path using the Astar algorithm\n    planner = search(map, planner);\n\n    return 0;\n}\n",
                    "name": "solution.cpp"
                  }
                ]
              },
              "answer": null
            }
          ]
        },
        {
          "id": 573540,
          "key": "14aefe2d-17fb-4f52-a722-e1aa76ab8b6d",
          "title": "A*: Visualization",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "14aefe2d-17fb-4f52-a722-e1aa76ab8b6d",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 591157,
              "key": "70d0fd90-6f05-43f7-b1f4-9c64e4ee34f6",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# A*: Visualization\n## Path Planning\nSo far, you’ve generated the shortest path using the A* algorithm, but it was really hard to see it. Now, you'll edit the visualization function that you previously coded and modify it to plot the shortest path. \n\n## Udacity Workspace\nFor this quiz, you'll use the [Udacity Workspace](https://classroom.udacity.com/nanodegrees/nd209/parts/dad7b7cc-9cce-4be4-876e-30935216c8fa/modules/451b7eed-6813-422a-a4d0-ce5db5ee1bca/lessons/411e2410-8f65-4764-a02a-e219ac36c776/concepts/fc59506b-6059-45a2-9d4d-204f7343988a?contentVersion=1.0.0&contentLocale=en-us). Move to the next concept, enable the GPU, Go to Desktop, and follow these instructions. Remember to disable the GPU once you are done generating the image.\n\n \n\n",
              "instructor_notes": ""
            },
            {
              "id": 591159,
              "key": "cfda425d-a2eb-4e22-a9c2-61d163eb59dc",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Instruction\n### Clone the Lab from GitHub\n```sh\n$ cd /home/workspace/\n$ git clone https://github.com/udacity/RoboND-A-Visualization\n```\n### Next, edit `main.cpp`\nModify the `visualization` function and plot the start position, goal position, and path using the `matplotlib` python library. **Note that you are required to use letter 'o' (not number character '0') and the asterisk '*' to mark the start and end states in visualization!**\n``` C++\nvoid visualization(Map map, Planner planner)\n{\n    //Graph Format\n    plt::title(\"Path\");\n    plt::xlim(0, map.mapHeight);\n    plt::ylim(0, map.mapWidth);\n\n    // Draw every grid of the map:\n    for (double x = 0; x < map.mapHeight; x++) {\n        cout << \"Remaining Rows= \" << map.mapHeight - x << endl;\n        for (double y = 0; y < map.mapWidth; y++) {\n            if (map.map[x][y] == 0) { //Green unkown state\n                plt::plot({ x }, { y }, \"g.\");\n            }\n            else if (map.map[x][y] > 0) { //Black occupied state\n                plt::plot({ x }, { y }, \"k.\");\n            }\n            else { //Red free state\n                plt::plot({ x }, { y }, \"r.\");\n            }\n        }\n    }\n\n    // TODO: Plot start and end states in blue colors using o and * respectively\n    \n    // TODO: Plot the robot path in blue color using a .\n    \n    //Save the image and close the plot\n    plt::save(\"./Images/Path.png\");\n    plt::clf();\n}\n```\nHere are some helpful commands you can use to generate plots with the `matplotlib` library:\n* *Set Title*: `plt::title(\"Your Title\");`\n* *Set Limits*: `plt::xlim(x-axis lower limit, x-axis upper limit );`\n* *Plot Data*:`plt::plot({ x-value }, { y-value }, \"Color and Shape\");`\n* *Save Plot*: `plt::save(\"File name and directory\")`;\n* *Close Plot*:   `plt::clf()`;\n\nCheck out this [link](https://github.com/lava/matplotlib-cpp) for more information on the `matplotlib` C++ library. For information regarding the plot color and shape refer to the LineSpec and LineColor section of the [MATLAB](https://www.mathworks.com/help/matlab/ref/plot.html?requestedDomain=true) documentation. \n\n### Then, compile the program\n```sh\n$ cd RoboND-A-Visualization/\n$ rm -rf Images/*    #Delete the folder content and not the folder itself!\n$ g++ main.cpp -o app -std=c++11 -I/usr/include/python2.7 -lpython2.7\n```\n\n### Finally, run the program\n```sh\n$ ./app\n```\nIf you get a warning regarding the `matplotlib` library, just ignore it.\n\nNow, wait for the program to generate the path and store it in the `/home/workspace/RoboND-A-Visualization/Images` directory!\n\n## Generated Path\n\n\n",
              "instructor_notes": ""
            },
            {
              "id": 591138,
              "key": "b27c3119-e26a-4365-89c1-7d50e877ca96",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2018/April/5ac54c89_path/path.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/b27c3119-e26a-4365-89c1-7d50e877ca96",
              "caption": "",
              "alt": "",
              "width": 800,
              "height": 600,
              "instructor_notes": null
            },
            {
              "id": 591160,
              "key": "64ad19aa-c373-4aa6-b17d-bbb3f3c5901a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Map Legend\n* <span style=\"color:green\">Green: Unkown/Undiscovered zone</span>\n* <span style=\"color:red\">Red: Free zone</span>\n* <span style=\"color:black\">Black: Occupied zone</span>\n* <span style=\"color:blue\">Blue: Shortest Path</span>",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 616804,
          "key": "21377147-b852-4ef6-85bd-f4720aed54f7",
          "title": "Udacity Workspace",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "21377147-b852-4ef6-85bd-f4720aed54f7",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 616805,
              "key": "c92ecb0c-6d7e-4cf8-8df6-3b3ee2337703",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "view4bb242ad",
              "pool_id": "autonomousgpu",
              "view_id": "3a9f5a74-2f9c-4a53-9362-da866bff8f03",
              "gpu_capable": true,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "port": 3000,
                    "ports": [],
                    "userCode": "",
                    "openFiles": [],
                    "showFiles": true,
                    "allowClose": true,
                    "allowSubmit": false,
                    "actionButtonText": "GO TO DESKTOP"
                  },
                  "kind": "react"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        }
      ]
    }
  },
  "_deprecated": [
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    },
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    }
  ]
}