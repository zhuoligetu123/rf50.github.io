WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.384
Well, it's great to have you out here today, Harry Young.

00:00:02.384 --> 00:00:05.689
I'm really excited to interview you for our control engineer position.

00:00:05.690 --> 00:00:10.320
What I'd like to start off with is just a question in controls actually. Are you ready?

00:00:10.320 --> 00:00:11.185
Yeah, sure.

00:00:11.185 --> 00:00:14.429
Okay, great. So, my first question for you is just

00:00:14.429 --> 00:00:17.855
to explain the different components of PID control.

00:00:17.855 --> 00:00:23.130
Okay, sure. So, PID controller: the P stands for Proportional,

00:00:23.129 --> 00:00:26.789
I for integral and D for derivative and

00:00:26.789 --> 00:00:31.535
those controllers is one of the most used controller in industry.

00:00:31.535 --> 00:00:36.100
Yeah, great. So, if you are going to code a PID controller, how would you do it?

00:00:36.100 --> 00:00:39.914
Okay, sure. Let me just go ahead and write those on the whiteboard.

00:00:39.914 --> 00:00:40.725
Great.

00:00:40.725 --> 00:00:43.600
So, as we just discussed,

00:00:43.600 --> 00:00:46.439
PID we need the three controller variables,

00:00:46.439 --> 00:00:50.265
the first one would be the kp for proportional

00:00:50.265 --> 00:00:55.945
and ki for integral and the kd for derivative.

00:00:55.945 --> 00:01:00.630
Essentially, what you're going to receive is our error,

00:01:00.630 --> 00:01:03.330
the value of our current error.

00:01:03.329 --> 00:01:07.575
We are trying to gain a control output.

00:01:07.575 --> 00:01:09.670
I have it here.

00:01:09.670 --> 00:01:11.424
So, all control loop,

00:01:11.424 --> 00:01:19.844
essentially we are calculate the control value using the error in our PID variables.

00:01:19.844 --> 00:01:24.174
Because we are using integral and derivative of parameters,

00:01:24.174 --> 00:01:29.334
so we need also two other variables to calculate those states.

00:01:29.334 --> 00:01:33.324
There's first of all I will say is the error of

00:01:33.325 --> 00:01:38.770
integral and also to calculate derivative we need the previous error,

00:01:38.769 --> 00:01:41.369
our codes error underscore free.

00:01:41.370 --> 00:01:43.575
So in a control loop,

00:01:43.575 --> 00:01:46.454
basically we are going to first,

00:01:46.454 --> 00:01:50.754
let's do an update of our integral error.

00:01:50.754 --> 00:01:56.359
So, that will be errors underscore i plus equal to

00:01:56.359 --> 00:02:03.605
our error in this loop and then we're going to go ahead and calculate the value here.

00:02:03.605 --> 00:02:10.365
So that will be four equals to first, the proportional one,

00:02:10.365 --> 00:02:13.855
our kp times our error,

00:02:13.854 --> 00:02:19.639
then our integral as it was already updated here.

00:02:19.639 --> 00:02:22.324
So, I'll go ahead and use it directly.

00:02:22.324 --> 00:02:29.009
Error underscore i and the last one would be the derivative,

00:02:29.009 --> 00:02:33.609
so kd times the derivative of which

00:02:33.610 --> 00:02:40.100
essentially is our current error minus our previous error.

00:02:43.229 --> 00:02:46.359
One of the things to know is that after this loop,

00:02:46.360 --> 00:02:49.085
we kind of need to update our previous error here.

00:02:49.085 --> 00:02:54.860
So, our current error become our previous error in the next loop.

00:02:54.860 --> 00:03:02.700
So, that's our error here and that will be my control loop of a PID controller.

00:03:02.699 --> 00:03:03.984
Okay, great.

00:03:03.985 --> 00:03:05.880
So, in going through this,

00:03:05.879 --> 00:03:07.134
if you're going to do it, say,

00:03:07.134 --> 00:03:08.479
in C plus plus,

00:03:08.479 --> 00:03:10.164
how do you think you might need to initialize

00:03:10.164 --> 00:03:12.804
variables including some of the types that you might use?

00:03:12.805 --> 00:03:21.430
Yeah. So, I'll say that would really depends on what our error and control variable is.

00:03:21.430 --> 00:03:26.314
But suppose we will be using mostly float for

00:03:26.314 --> 00:03:31.650
error and come full output variable and since they're essentially the same,

00:03:31.650 --> 00:03:36.254
we'll also have float here as our error.

00:03:36.254 --> 00:03:38.805
Since the initial state,

00:03:38.805 --> 00:03:43.849
our integral error should be zero since there's no error before and also

00:03:43.849 --> 00:03:49.875
our previous error should be ideally zeros to calculate the derivative later.

00:03:49.875 --> 00:03:51.500
Okay, great.

00:03:51.500 --> 00:03:55.360
So, if you have a PID controller in there,

00:03:55.360 --> 00:03:57.920
it does seem like it works in a lot of situations,

00:03:57.919 --> 00:04:01.409
are there any situations you can think of where it wouldn't work so well?

00:04:01.409 --> 00:04:06.569
Yeah, I guess PID is most widely used controller.

00:04:06.569 --> 00:04:12.560
One thing I will say about some case that PID is not appropriate,

00:04:12.560 --> 00:04:17.120
maybe for like non-linear systems since

00:04:17.120 --> 00:04:24.959
our control output may not be able to influence the system's output in a linear fashion.

00:04:24.959 --> 00:04:31.629
So, the PID controller will be struggling with different areas of that control output.

00:04:31.629 --> 00:04:38.375
Also, another aspect I will say it will be our simple system.

00:04:38.375 --> 00:04:41.865
You probably don't even need to use a full PID controller,

00:04:41.865 --> 00:04:45.465
sometimes maybe a proportional controller is fine.

00:04:45.464 --> 00:04:48.709
Great, okay. That's everything I had for this area anyway,

00:04:48.709 --> 00:04:50.014
we can move on to next topic now.

00:04:50.014 --> 00:04:50.474
Cool.

00:04:50.475 --> 00:04:51.080
All right.

