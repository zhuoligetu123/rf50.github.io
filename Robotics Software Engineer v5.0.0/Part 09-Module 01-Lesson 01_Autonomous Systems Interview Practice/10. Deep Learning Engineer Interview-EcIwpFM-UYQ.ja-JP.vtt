WEBVTT
Kind: captions
Language: ja-JP

00:00:00.000 --> 00:00:04.259
Aaron さん、深層学習エンジニア職への応募ありがとうございます。

00:00:04.259 --> 00:00:06.689
まずは深層学習について

00:00:06.690 --> 00:00:08.850
質問させていただきますが、よろしいですか

00:00:08.849 --> 00:00:09.939
もちろんです。よろしくお願いします

00:00:09.939 --> 00:00:12.119
ではまず、セマンティックセグメンテーションの

00:00:12.119 --> 00:00:15.889
概念を説明してもらえますか

00:00:15.890 --> 00:00:18.190
分かりました。セマンティックセグメンテーションは経験があります。

00:00:18.190 --> 00:00:18.560
素晴らしい。

00:00:18.559 --> 00:00:20.164
素晴らしい成果も挙げました

00:00:20.164 --> 00:00:20.629
いいですね

00:00:20.629 --> 00:00:28.144
私の成果の前に、完全な畳み込みニューラルネットワークの使用経験

00:00:28.144 --> 00:00:36.649
さらにエンコーダーとデコーダーの作成についてお話します

00:00:36.950 --> 00:00:40.080
エンコーダーは学習内容を転送するために使用できます

00:00:40.079 --> 00:00:42.204
これは畳み込みニューラルネットワークです

00:00:42.204 --> 00:00:44.600
VGG 16 のようなトレーニング済みのものを使うことも可能で

00:00:44.600 --> 00:00:48.649
さらに非常に興味深いテクニックも使用できます

00:00:48.649 --> 00:00:51.920
デコーダーに転送するために

00:00:51.920 --> 00:00:56.120
畳み込みを一つずつ使用できます。そしてここがとても興味深いところなんですが

00:00:56.119 --> 00:00:58.820
デコンボリューション層と呼ばれるものを使って

00:00:58.820 --> 00:01:03.929
結果をアップサンプリングします

00:01:03.929 --> 00:01:11.165
最終的に取得する結果は、入力したものと同じ寸法になります

00:01:11.165 --> 00:01:15.740
画像のどのピクセルが道路に属し

00:01:15.739 --> 00:01:21.179
どのピクセルが属していないかを調べる場合など

00:01:21.180 --> 00:01:25.060
畳み込みニューラルネットワークが得意とする分野です

00:01:25.060 --> 00:01:28.120
これを使えば道路に実際に属するピクセルがどれで

00:01:28.219 --> 00:01:33.750
どれが属さないかを教えてくれます

00:01:33.750 --> 00:01:35.704
これは、それらのカテゴリーを見ています。

00:01:35.704 --> 00:01:40.400
これを実現するために

00:01:40.400 --> 00:01:44.870
イメージをフィードする場合、かなりランダムに開始します

00:01:44.870 --> 00:01:47.930
このようにノイズが多く見られます

00:01:49.340 --> 00:01:53.844
多くのピクセルが多様な値を持ちます

00:01:53.844 --> 00:01:56.150
これにラベルを付けることができます

00:01:56.150 --> 00:01:57.690
つまりここに学習させるわけです

00:01:57.689 --> 00:02:04.459
これが入力データで、これがラベルです

00:02:04.459 --> 00:02:06.034
手書きですね

00:02:06.034 --> 00:02:06.700
なるほど

00:02:06.700 --> 00:02:08.689
ここでピクセルが 1 であれば道路に属し

00:02:08.689 --> 00:02:13.675
0 は道路ではないことになります

00:02:13.675 --> 00:02:16.965
最終的にはこのように見える結果が欲しいわけです

00:02:16.965 --> 00:02:19.914
こちらからこのような結果を得たい場合は

00:02:19.914 --> 00:02:22.310
何らかの学習をさせることが必要です

00:02:22.310 --> 00:02:25.865
そのためには優れた損失関数が必要です

00:02:25.865 --> 00:02:29.330
そうですね。どのような損失関数が使えると思いますか

00:02:29.330 --> 00:02:32.300
異なるイメージを分類する場合に使用する

00:02:32.300 --> 00:02:35.225
損失関数に似たものを使用できると思います

00:02:35.224 --> 00:02:44.120
softmax を使った後にクロスエントロピーを実行します。どのように見えるかと言えば最初は

00:02:44.120 --> 00:02:45.625
まったくランダムな状態です

00:02:45.625 --> 00:02:48.224
ここのピクセルを取得するとしたら

00:02:48.224 --> 00:02:50.319
処理する異なるカテゴリーが存在します

00:02:50.319 --> 00:02:54.000
道路に属するこのピクセルを取得したとしましょう

00:02:54.000 --> 00:02:57.530
道路でないピクセルと道路に属するピクセルを取得できます

00:02:57.530 --> 00:03:01.830
これは確率で合計が 1 になります

00:03:01.830 --> 00:03:06.115
まずネットワークが何かを生成しますがこれは合計が 1 にはなりません

00:03:06.115 --> 00:03:08.980
かなりランダムです

00:03:08.979 --> 00:03:15.379
たとえばマイナス 0.23 と 105 です

00:03:15.379 --> 00:03:20.930
softmax はこの数字を使って確率を出します

00:03:20.930 --> 00:03:24.710
これを関数のような形式で表し e とします

00:03:24.710 --> 00:03:28.700
そして異なる値を足し合わせます

00:03:28.699 --> 00:03:34.829
異なる 2 つの値があるのでこれを使用します

00:03:34.830 --> 00:03:36.755
そして合計が 1 になることを確認します

00:03:36.754 --> 00:03:37.539
分かりました

00:03:37.539 --> 00:03:39.699
この総和が 1 になれば

00:03:39.699 --> 00:03:45.439
クロスエントロピーを使用できます。これはログ損失関数です

00:03:45.439 --> 00:03:52.189
記述すると、このように負の総和になります

00:03:52.189 --> 00:03:55.879
そして L log S となり L はラベルの一部で

00:03:55.879 --> 00:04:00.439
S は softmax から取得する値です

00:04:00.439 --> 00:04:05.770
実際にうまく機能しているのであれば

00:04:05.770 --> 00:04:07.645
損失はゼロになります

00:04:07.645 --> 00:04:08.939
大きくずれている場合は

00:04:08.939 --> 00:04:11.329
損失も大きくなります[inaudible]

00:04:11.330 --> 00:04:16.250
損失関数があり、これが勾配降下法を使っているなら

00:04:16.250 --> 00:04:18.470
微分係数 (デリバティブ) が損失を最小化し

00:04:18.470 --> 00:04:22.070
時間をかけてトレーニングをします

00:04:22.069 --> 00:04:25.959
実際にはかなりランダムなノイズの多い結果を得ることができます

00:04:25.959 --> 00:04:28.055
実物にこのラベルのように見えます

00:04:28.055 --> 00:04:30.879
なるほど。このトピックに関する論点は網羅されたようです

00:04:30.879 --> 00:04:32.105
では次の質問に移りましょう

00:04:32.105 --> 00:04:32.840
はい。

